# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

db: test_zw
debugs: []
sqlDialect: ["HybridSQL"]
version: 0.5.0
cases:
  - id: 0
    desc: 默认udf null处理逻辑：返回null
    inputs:
      - columns: ["id int64", "c1 string", "c2 int", "c3 double",
                  "c4 date", "c5 timestamp", "std_ts timestamp"]
        indexs: ["index1:id:std_ts"]
        rows:
        - [1, NULL, 42, 3.14, "2020-05-20", 1590738989000, 1590738989000]
        - [2, "hello world", NULL, NULL, NULL, NULL, 1590738989000]
    sql: select id,
        substring(c1, 1, 5) as r1,
        substring(c1, 1, c2) as r2,
        pow(c2, 2) as r3,
        floor(c3) as r4,
        dayofweek(c4) as r5,
        dayofweek(c5) as r6
        from {0};
    expect:
      order: id
      columns: ["id int64", "r1 string", "r2 string", "r3 double", "r4 double",
                "r5 int", "r6 int"]
      rows:
        - [1, NULL, NULL, 1764, 3.00, 4, 6]
        - [2, "hello", NULL, NULL, NULL, NULL, NULL]

  - id: 1
    desc: udf使用中间结果null值
    inputs:
      - columns: ["id int64", "c1 string", "c2 int", "c3 double",
                  "c4 date", "c5 timestamp", "std_ts timestamp"]
        indexs: ["index1:id:std_ts"]
        rows:
        - [1, NULL, 42, 3.14, "2020-05-20", 1590738989000, 1590738989000]
        - [2, "hello world", NULL, NULL, NULL, NULL, 1590738989000]
    sql: select id,
        substring(substring(c1, 1, 5), 1, 1) as r1,
        substring(substring(c1, 1, c2), c2, 1) as r2,
        abs(pow(c2, 2)) as r3,
        abs(floor(c3)) as r4,
        abs(dayofweek(c4)) as r5,
        abs(dayofweek(c5)) as r6
        from {0};
    expect:
      order: id
      columns: ["id int64", "r1 string", "r2 string", "r3 double", "r4 double",
                "r5 int", "r6 int"]
      rows:
        - [1, NULL, NULL, 1764, 3.00, 4, 6]
        - [2, "h", NULL, NULL, NULL, NULL, NULL]

  - id: 2
    desc: 函数名大小写不敏感
    inputs:
      - columns: ["id int64", "c1 double", "c2 timestamp"]
        indexs: ["index1:id:c2"]
        rows:
          - [1, 1.0, 1590738989000]
    sql: select id,
        SUM(c1) over w as r1, sUm(c1) over w as r2, sum(c1) over w as r3, log(c1) as r4 
        from {0} window w as (PARTITION BY id ORDER BY c2 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW);
    expect:
      order: id
      columns: ["id int64", "r1 double", "r2 double", "r3 double", "r4 double"]
      rows:
        - [1, 1, 1, 1, 0]

  - id: 3
    desc: udf regexp_like
    inputs:
      - columns: ["id int", "std_ts timestamp"]
        indexs: ["index1:id:std_ts"]
        rows:
          - [1, 1590115420000 ]
          - [2, 1590115430000 ]
          - [3, 1590115440000 ]
          - [4, 1590115450000 ]
          - [5, 1590115460000 ]
          - [6, 1590115470000 ]
      - columns: ["id int", "ts timestamp", "col2 string"]
        indexs: ["index1:id:ts"]
        rows:
          - [1, 1590115420000, contact@openmldb.ai]
          - [2, 1590115430000, contact@opfnmldb.ai]
          - [3, 1590115440000, contact@opgnmldb.ai]
          - [4, 1590115450000, contact@ophnmldb.ai]
          - [5, 1590115460000, contact@dropmldb.ai]
          - [6, 1590115470000, contact@closemldb.ai]
    dataProvider:
      - ["regexp_like", "NOT regexp_like"] # regexp_like / NOT regexp_like
      - ["[A-Za-z0-9+_.-]+@openmldb[A-Za-z0-9+_.-]+"] # match pattern
    sql: |
      select {0}.id, col2 from {0} last join {1} ON {0}.id = {1}.id and d[0](col2,'d[1]');
    expect:
      columns: ["id int", "col2 string"]
      order: id
    expectProvider:
      0:
        0:
          rows:
            - [1, contact@openmldb.ai]
            - [2, null]
            - [3, null]
            - [4, null]
            - [5, null]
            - [6, null]
      1:
        0:
          rows:
            - [1, null]
            - [2, contact@opfnmldb.ai]
            - [3, contact@opgnmldb.ai]
            - [4, contact@ophnmldb.ai]
            - [5, contact@dropmldb.ai]
            - [6, contact@closemldb.ai]

# reserved case
# For more details, please checkout https://github.com/4paradigm/OpenMLDB/pull/2187
#  - id: 4
#    desc: udf regexp_like with flags
#    inputs:
#      - columns: ["id int", "ts timestamp"]
#        indexs: ["index1:id:ts"]
#        rows:
#          - [1, 1590115420000]
#          - [2, 1590115420001]
#          - [3, 1590115420002]
#      - columns: ["id int", "ts timestamp", "col2 string"]
#        indexs: ["index1:id:ts"]
#        rows:
#          - [1, 1590115420000, "the Lord of the Rings"]
#          - [2, 1590115420001, "The Lord of the Rings"]
#          - [3, 1590115420002, "The Lord of the Rings\nJ. R. R. Tolkien"]
#    dataProvider:
#      - ["The Lord of the Rings", "The Lord of the Rings.J\\\\\\\\. R\\\\\\\\. R\\\\\\\\. Tolkien", "^The Lord of the Rings$.J\\\\\\\\. R\\\\\\\\. R\\\\\\\\. Tolkien"] # match pattern
#      - ["i", "s", "m", "smi", "c", ""] # flags
#    sql: |
#      select {0}.id, {1}.col2 from {0} last join {1} on {0}.id = {1}.id and regexp_like(col2, "d[0]", "d[1]");
#    expect:
#      columns: ["id int", "col2 string"]
#      order: id
#    expectProvider:
#      0:
#        0:
#          rows:
#            - [1, "the Lord of the Rings"]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        1:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        2:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        3:
#          rows:
#            - [1, "the Lord of the Rings"]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        4:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        5:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#      1:
#        0:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        1:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, "The Lord of the Rings\nJ. R. R. Tolkien"]
#        2:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        3:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, "The Lord of the Rings\nJ. R. R. Tolkien"]
#        4:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        5:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#      2:
#        0:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        1:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        2:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        3:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, "The Lord of the Rings\nJ. R. R. Tolkien"]
#        4:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        5:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]