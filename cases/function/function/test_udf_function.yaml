# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

db: test_zw
debugs: []
sqlDialect: ["HybridSQL"]
version: 0.5.0
cases:
  - id: 0
    desc: 默认udf null处理逻辑：返回null
    inputs:
      - columns: ["id int64", "c1 string", "c2 int", "c3 double",
                  "c4 date", "c5 timestamp", "std_ts timestamp"]
        indexs: ["index1:id:std_ts"]
        rows:
        - [1, NULL, 42, 3.14, "2020-05-20", 1590738989000, 1590738989000]
        - [2, "hello world", NULL, NULL, NULL, NULL, 1590738989000]
    sql: select id,
        substring(c1, 1, 5) as r1,
        substring(c1, 1, c2) as r2,
        pow(c2, 2) as r3,
        floor(c3) as r4,
        dayofweek(c4) as r5,
        dayofweek(c5) as r6
        from {0};
    expect:
      order: id
      columns: ["id int64", "r1 string", "r2 string", "r3 double", "r4 double",
                "r5 int", "r6 int"]
      rows:
        - [1, NULL, NULL, 1764, 3.00, 4, 6]
        - [2, "hello", NULL, NULL, NULL, NULL, NULL]

  - id: 1
    desc: udf使用中间结果null值
    inputs:
      - columns: ["id int64", "c1 string", "c2 int", "c3 double",
                  "c4 date", "c5 timestamp", "std_ts timestamp"]
        indexs: ["index1:id:std_ts"]
        rows:
        - [1, NULL, 42, 3.14, "2020-05-20", 1590738989000, 1590738989000]
        - [2, "hello world", NULL, NULL, NULL, NULL, 1590738989000]
    sql: select id,
        substring(substring(c1, 1, 5), 1, 1) as r1,
        substring(substring(c1, 1, c2), c2, 1) as r2,
        abs(pow(c2, 2)) as r3,
        abs(floor(c3)) as r4,
        abs(dayofweek(c4)) as r5,
        abs(dayofweek(c5)) as r6
        from {0};
    expect:
      order: id
      columns: ["id int64", "r1 string", "r2 string", "r3 double", "r4 double",
                "r5 int", "r6 int"]
      rows:
        - [1, NULL, NULL, 1764, 3.00, 4, 6]
        - [2, "h", NULL, NULL, NULL, NULL, NULL]

  - id: 2
    desc: 函数名大小写不敏感
    inputs:
      - columns: ["id int64", "c1 double", "c2 timestamp"]
        indexs: ["index1:id:c2"]
        rows:
          - [1, 1.0, 1590738989000]
    sql: select id,
        SUM(c1) over w as r1, sUm(c1) over w as r2, sum(c1) over w as r3, log(c1) as r4 
        from {0} window w as (PARTITION BY id ORDER BY c2 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW);
    expect:
      order: id
      columns: ["id int64", "r1 double", "r2 double", "r3 double", "r4 double"]
      rows:
        - [1, 1, 1, 1, 0]

  - id: 3
    desc: udf regexp_like
    inputs:
      - columns: ["id int", "std_ts timestamp"]
        indexs: ["index1:id:std_ts"]
        rows:
          - [1, 1590115420000 ]
          - [2, 1590115430000 ]
          - [3, 1590115440000 ]
          - [4, 1590115450000 ]
          - [5, 1590115460000 ]
          - [6, 1590115470000 ]
      - columns: ["id int", "ts timestamp", "col2 string"]
        indexs: ["index1:id:ts"]
        rows:
          - [1, 1590115420000, contact@openmldb.ai]
          - [2, 1590115430000, contact@opfnmldb.ai]
          - [3, 1590115440000, contact@opgnmldb.ai]
          - [4, 1590115450000, contact@ophnmldb.ai]
          - [5, 1590115460000, contact@dropmldb.ai]
          - [6, 1590115470000, contact@closemldb.ai]
    dataProvider:
      - ["regexp_like", "NOT regexp_like"] # regexp_like / NOT regexp_like
      - ["[A-Za-z0-9+_.-]+@openmldb[A-Za-z0-9+_.-]+"] # match pattern
    sql: |
      select {0}.id, col2 from {0} last join {1} ON {0}.id = {1}.id and d[0](col2,'d[1]');
    expect:
      columns: ["id int", "col2 string"]
      order: id
    expectProvider:
      0:
        0:
          rows:
            - [1, contact@openmldb.ai]
            - [2, null]
            - [3, null]
            - [4, null]
            - [5, null]
            - [6, null]
      1:
        0:
          rows:
            - [1, null]
            - [2, contact@opfnmldb.ai]
            - [3, contact@opgnmldb.ai]
            - [4, contact@ophnmldb.ai]
            - [5, contact@dropmldb.ai]
            - [6, contact@closemldb.ai]

  - id: 4
    desc: |
      hash64 function, for all data types
    inputs:
      - name: t1
        schema: id:int32, col1:int64, col2:int16, col3:string, col4:double, col5:float, std_ts:timestamp, de:date, bt bool
        index: index2:col2:std_ts
        data: |
          0, 1,    55, g1,   2.0, 1.0, 1590115420000, 2020-07-15, true
          1, 2,    55, NULL, 2.0, 4.4, 1590115421000, 2020-07-15, true
          2, 3,    55, g2,   NULL,4.4, 1590115422000, 2020-07-15, false
          3, 4,    55, g1,   4.0, 4.0, 1590115423000, 2020-07-15, false
          4, NULL, 55, g2,   4.0, 4.0, 1590115424000, 2020-07-15, false
          5, 5,    55, g2,   4.0, 4.0, 1590115425000, 2020-07-15, false
          90, 5,   55, g2,   1.0, 4.0, 1590115426000, 2020-07-15, true
    sql: |
      select
        id,
        hash64(id) as hid,
        hash64(col1) as hcol1,
        hash64(col2) as hcol2,
        hash64(col3) as hcol3,
        hash64(col4) as hcol4,
        hash64(col5) as hcol5,
        farm_fingerprint(std_ts) as hts,
        farm_fingerprint(de) as hdate,
        farm_fingerprint(bt) as hb,
      from t1
    expect:
      order: id
      columns: ["id int", "hid int64","hcol1 int64","hcol2 int64","hcol3 int64", "hcol4 int64", "hcol5 int64", "hts int64", "hdate int64", "hb int64"]
      rows:
         - [0, -470600885322160961, 5925585971146611297, -8280049305495806603, 3208330103598489124, 1446482599179445476, 322450456541637418,   4361965398422314040, -8740639806462273876, 5161771770385946686]
         - [1, 7601041269982238804, 3353244675891348105, -8280049305495806603, NULL,                1446482599179445476, -2386882153598325791, -8427233238384893499, -8740639806462273876, 5161771770385946686]
         - [2, 6706320920252439311, 7262150054277104024, -8280049305495806603, 386896907218095555,  NULL,                -2386882153598325791, -8306842479876455466, -8740639806462273876, -4728684028706075820]
         - [3, 2681491882390849628, 3255232038643208583, -8280049305495806603, 3208330103598489124, 4223774888982935081, -2508610241776323253, 836854283058012232, -8740639806462273876, -4728684028706075820]
         - [4, -601936896161254990, NULL,                -8280049305495806603, 386896907218095555,  4223774888982935081, -2508610241776323253, -1715213075984056143, -8740639806462273876, -4728684028706075820]
         - [5, -2259736796076314196, 3312746975386716960, -8280049305495806603, 386896907218095555, 4223774888982935081, -2508610241776323253,  4701969050813670, -8740639806462273876, -4728684028706075820]
         - [90, -3754664774081171349, 3312746975386716960, -8280049305495806603, 386896907218095555, -6169223503904558093, -2508610241776323253, 6739953749437222492, -8740639806462273876, 5161771770385946686]

  - id: 5
    desc: |
      hash64 function, different hash result for different type, even for same value
    mode: request-unsupport
    inputs:
      - name: t1
        schema: id:int32, col1:int64, col2:int16, col3:string, col4:double, col5:float, std_ts:timestamp, de:date
        index: index2:col2:std_ts
        data: |
          0, 1,    55, g1,   2.0, 1.0, 1590115420000, 2020-07-15
    sql: |
      select
        hash64(cast(90 as int16)) as h16,
        hash64(cast(90 as int32)) as h32,
        hash64(cast(90 as int64)) as h64,
        hash64(cast(90 as double)) as hd,
        hash64(cast(90 as float)) as hf,
    expect:
      columns: ["h16 int64", "h32 int64", "h64 int64", "hd int64", "hf int64"]
      rows:
        - [ -9205917472348398353, -3754664774081171349, -6110541762027922508, 42123122574000053, 3717229009355585768 ]

# reserved case
# For more details, please checkout https://github.com/4paradigm/OpenMLDB/pull/2187
#  - id: 4
#    desc: udf regexp_like with flags
#    inputs:
#      - columns: ["id int", "ts timestamp"]
#        indexs: ["index1:id:ts"]
#        rows:
#          - [1, 1590115420000]
#          - [2, 1590115420001]
#          - [3, 1590115420002]
#      - columns: ["id int", "ts timestamp", "col2 string"]
#        indexs: ["index1:id:ts"]
#        rows:
#          - [1, 1590115420000, "the Lord of the Rings"]
#          - [2, 1590115420001, "The Lord of the Rings"]
#          - [3, 1590115420002, "The Lord of the Rings\nJ. R. R. Tolkien"]
#    dataProvider:
#      - ["The Lord of the Rings", "The Lord of the Rings.J\\\\\\\\. R\\\\\\\\. R\\\\\\\\. Tolkien", "^The Lord of the Rings$.J\\\\\\\\. R\\\\\\\\. R\\\\\\\\. Tolkien"] # match pattern
#      - ["i", "s", "m", "smi", "c", ""] # flags
#    sql: |
#      select {0}.id, {1}.col2 from {0} last join {1} on {0}.id = {1}.id and regexp_like(col2, "d[0]", "d[1]");
#    expect:
#      columns: ["id int", "col2 string"]
#      order: id
#    expectProvider:
#      0:
#        0:
#          rows:
#            - [1, "the Lord of the Rings"]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        1:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        2:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        3:
#          rows:
#            - [1, "the Lord of the Rings"]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        4:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#        5:
#          rows:
#            - [1, null]
#            - [2, "The Lord of the Rings"]
#            - [3, null]
#      1:
#        0:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        1:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, "The Lord of the Rings\nJ. R. R. Tolkien"]
#        2:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        3:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, "The Lord of the Rings\nJ. R. R. Tolkien"]
#        4:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        5:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#      2:
#        0:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        1:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        2:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        3:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, "The Lord of the Rings\nJ. R. R. Tolkien"]
#        4:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#        5:
#          rows:
#            - [1, null]
#            - [2, null]
#            - [3, null]
#
  - id: 6
    desc: earth_distance
    inputs:
      -
        name: t1
        columns : ["id int","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp"]
        indexs: ["index1:c1:c7"]
        rows:
          - [1, "aa", 40, 73, 73, 41.0, 74.0, 1590738990000]
    sql: |
      select
        id,
        earth_distance(40.0, 73.0, 41.0, 74.0) as dis1,
        earth_distance(c2, c3, 41.0, 74.0) as dis2,
        earth_distance(c2, c3, c5, c6) as dis3,
        earth_distance(c2, c4, c5, c6) as dis4,
        earth_distance(c2, 73.0, c5, c6) as dis5,
      from t1;
    expect:
      order: id
      columns:
        - id int
        - dis1 double
        - dis2 double
        - dis3 double
        - dis4 double
        - dis5 double
      data: |
        1, 139.72810080682342, 139.72810080682342, 139.72810080682342, 139.72810080682342, 139.72810080682342
