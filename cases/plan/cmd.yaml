# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 1
    desc: CREATE DATABASE db1
    sql: CREATE DATABASE db1;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: create database
          +-args: [db1]
  - id: 2
    desc: CREATE TABLE
    sql: CREATE TABLE schema.sql;
    expect:
      node_tree_str: |
        +-node[CREATE]
          +-table: schema.sql
          +-IF NOT EXIST: 0
          +-column_desc_list: []
          +-replica_num: 1
          +-partition_num: 1
          +-distribution_list: []
  - id: 3
    desc: CREATE GROUP
    mode: zetasql-unsupport
    sql: CREATE GROUP group1;
  - id: 4
    desc: DESC table
    sql: DESC t1;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: desc table
          +-args: [t1]
  - id: 5
    desc: SHOW TABLE
    sql: SHOW TABLES;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show tables
          +-args: []
  - id: 6
    desc: SHOW DATABASES
    sql: SHOW DATABASES;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show databases
          +-args: []
  - id: 7
    desc: explain
    sql: explain SELECT * FROM t1 WHERE COL1 > (select avg(COL1) from t1) limit 10;
  - id: 8
    desc: explain logical
    tags: ["TODO"]
    sql: explain logical SELECT * FROM t1 WHERE COL1 > (select avg(COL1) from t1) limit 10;
  - id: 9
    desc: SHOW PROCEDUERS
    sql: SHOW PROCEDURES;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show procedures
          +-args: []
  - id: 10
    desc: SHOW PROCEDUERS
    sql: SHOW PROCEDURE STATUS;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show procedures
          +-args: []
  - id: 11
    desc: SHOW CREATE PROCEDUER
    sql: SHOW CREATE PROCEDURE sp_name;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show create procedure
          +-args: [sp_name]
  - id: 12
    desc: SHOW CREATE PROCEDUER
    sql: SHOW CREATE PROCEDURE db.sp_name;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show create procedure
          +-args: [db, sp_name]
  - id: 13
    desc: DROP PROCEDUER
    sql: DROP PROCEDURE sp1;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: drop procedure
          +-args: [sp1]
  - id: 14
    desc: DROP TABLE
    sql: DROP TABLE t1;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: drop table
          +-args: [t1]
  - id: 15
    desc: DROP INDEX
    sql: DROP INDEX t1.index1
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: drop index
          +-args: [t1, index1]
  - id: 16
    desc: USE DATABASE
    sql: USE db1
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: use database
          +-args: [db1]
  - id: 17
    desc: DROP DATABASE
    sql: DROP DATABASE db1
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: drop database
          +-args: [db1]
  - id: show_deployments
    desc: show deployments
    sql: SHOW DEPLOYMENTS;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show deployments
          +-args: []
  - id: show_deployment
    desc: show deployment foo
    sql: SHOW DEPLOYMENT foo;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show deployment
          +-args: [foo]
  - id: drop_deployment
    desc: drop deployment foo
    sql: DROP DEPLOYMENT foo;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: drop deployment
          +-args: [foo]
  - id: deploy_stmt_1
    desc: deploy query task
    sql: DEPLOY foo SELECT col1 from t1;
    expect:
      node_tree_str: |
        +-node[kDeployStmt]
          +-if_not_exists: false
          +-name: foo
          +-stmt:
            +-node[kQuery]: kQuerySelect
              +-distinct_opt: false
              +-where_expr: null
              +-group_expr_list: null
              +-having_expr: null
              +-order_expr_list: null
              +-limit: null
              +-select_list[list]:
              |  +-0:
              |    +-node[kResTarget]
              |      +-val:
              |      |  +-expr[column ref]
              |      |    +-relation_name: <nil>
              |      |    +-column_name: col1
              |      +-name: <nil>
              +-tableref_list[list]:
              |  +-0:
              |    +-node[kTableRef]: kTable
              |      +-table: t1
              |      +-alias: <nil>
              +-window_list: []
  - id: deploy_stmt_2
    desc: deploy query task if not exists
    sql: DEPLOY IF NOT EXISTS foo2 SELECT col1 from t1;
    expect:
      node_tree_str: |
        +-node[kDeployStmt]
          +-if_not_exists: true
          +-name: foo2
          +-stmt:
            +-node[kQuery]: kQuerySelect
              +-distinct_opt: false
              +-where_expr: null
              +-group_expr_list: null
              +-having_expr: null
              +-order_expr_list: null
              +-limit: null
              +-select_list[list]:
              |  +-0:
              |    +-node[kResTarget]
              |      +-val:
              |      |  +-expr[column ref]
              |      |    +-relation_name: <nil>
              |      |    +-column_name: col1
              |      +-name: <nil>
              +-tableref_list[list]:
              |  +-0:
              |    +-node[kTableRef]: kTable
              |      +-table: t1
              |      +-alias: <nil>
              +-window_list: []
  - id: load_data_infile_1
    sql: LOAD DATA INFILE 'hello.csv' INTO TABLE t1;
    expect:
      node_tree_str: |
        +-node[kLoadDataStmt]
          +-file: hello.csv
          +-db: <nil>
          +-table: t1
          +-options: <nil>
          +-config_options: <nil>
  - id: load_data_infile_2
    sql: LOAD DATA INFILE 'data.csv' INTO TABLE db0.t1 OPTIONS (charset = 'utf-8') CONFIG ( job = 'online' );
    expect:
      node_tree_str: |
        +-node[kLoadDataStmt]
          +-file: data.csv
          +-db: db0
          +-table: t1
          +-options:
          |  +-charset:
          |    +-expr[primary]
          |      +-value: utf-8
          |      +-type: string
          +-config_options:
            +-job:
              +-expr[primary]
                +-value: online
                +-type: string
  - id: select_into_outfile_1
    sql: SELECT col1 FROM t1 WHERE col1 > 10 INTO OUTFILE 'data.csv';
    expect:
      node_tree_str: |
        +-node[kSelectIntoStmt]
          +-out_file: data.csv
          +-query:
          |  +-node[kQuery]: kQuerySelect
          |    +-distinct_opt: false
          |    +-where_expr:
          |    |  +-expr[binary]
          |    |    +->[list]:
          |    |      +-0:
          |    |      |  +-expr[column ref]
          |    |      |    +-relation_name: <nil>
          |    |      |    +-column_name: col1
          |    |      +-1:
          |    |        +-expr[primary]
          |    |          +-value: 10
          |    |          +-type: int32
          |    +-group_expr_list: null
          |    +-having_expr: null
          |    +-order_expr_list: null
          |    +-limit: null
          |    +-select_list[list]:
          |    |  +-0:
          |    |    +-node[kResTarget]
          |    |      +-val:
          |    |      |  +-expr[column ref]
          |    |      |    +-relation_name: <nil>
          |    |      |    +-column_name: col1
          |    |      +-name: <nil>
          |    +-tableref_list[list]:
          |    |  +-0:
          |    |    +-node[kTableRef]: kTable
          |    |      +-table: t1
          |    |      +-alias: <nil>
          |    +-window_list: []
          +-options: <nil>
          +-config_options: <nil>
  - id: select_into_outfile_2
    sql: SELECT col1 FROM t1 WHERE col1 <= 10 INTO OUTFILE 'data.csv' OPTIONS ( delimit = ',' ) CONFIG ( job = 'spark' );
    expect:
      node_tree_str: |
        +-node[kSelectIntoStmt]
          +-out_file: data.csv
          +-query:
          |  +-node[kQuery]: kQuerySelect
          |    +-distinct_opt: false
          |    +-where_expr:
          |    |  +-expr[binary]
          |    |    +-<=[list]:
          |    |      +-0:
          |    |      |  +-expr[column ref]
          |    |      |    +-relation_name: <nil>
          |    |      |    +-column_name: col1
          |    |      +-1:
          |    |        +-expr[primary]
          |    |          +-value: 10
          |    |          +-type: int32
          |    +-group_expr_list: null
          |    +-having_expr: null
          |    +-order_expr_list: null
          |    +-limit: null
          |    +-select_list[list]:
          |    |  +-0:
          |    |    +-node[kResTarget]
          |    |      +-val:
          |    |      |  +-expr[column ref]
          |    |      |    +-relation_name: <nil>
          |    |      |    +-column_name: col1
          |    |      +-name: <nil>
          |    +-tableref_list[list]:
          |    |  +-0:
          |    |    +-node[kTableRef]: kTable
          |    |      +-table: t1
          |    |      +-alias: <nil>
          |    +-window_list: []
          +-options:
          |  +-delimit:
          |    +-expr[primary]
          |      +-value: ,
          |      +-type: string
          +-config_options:
            +-job:
              +-expr[primary]
                +-value: spark
                +-type: string
  - id: set_select_mode_2
    desc: unsupport syntax
    sql: SET SELECT_MODE = 1 + 2;
    expect:
      success: false
  - id: show jobs
    sql: SHOW JOBS
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show jobs
          +-args: []
  - id: show job
    sql: SHOW JOB 1
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show job
          +-args: [1]
  - id: stop_job_1
    sql: stop JOB 10;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: stop job
          +-args: [10]
  - id: stop_job_2
    sql: stop JOB abc;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: stop job
          +-args: [abc]

  - id: delete_job
    sql: delete job 12;
    expect:
      node_tree_str: |
        +-node[kDeleteStmt]
          +-target: JOB
          +-job_id: 12
  - id: set global system variable
    sql: SET @@global.sys_var1 = 'xxxx';
    expect:
      node_tree_str: |
        +-node[kSetStmt]
          +-scope: GlobalSystemVariable
          +-key: sys_var1
          +-value:
            +-expr[primary]
              +-value: xxxx
              +-type: string

  - id: set session system variable
    sql: SET @@session.sess_var1 = 'yyyy';
    expect:
      node_tree_str: |
        +-node[kSetStmt]
          +-scope: SessionSystemVariable
          +-key: sess_var1
          +-value:
            +-expr[primary]
              +-value: yyyy
              +-type: string


  - id: set session system variable 2
    sql: SET @@sess_var1 = 'yyyy';
    expect:
      node_tree_str: |
        +-node[kSetStmt]
          +-scope: SessionSystemVariable
          +-key: sess_var1
          +-value:
            +-expr[primary]
              +-value: yyyy
              +-type: string
  - id: show_variables
    sql: SHOW VARIABLES;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show session variables
          +-args: []
  - id: show_session_variables
    sql: SHOW SESSION VARIABLES;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show session variables
          +-args: []
  - id: show_global_variables
    sql: SHOW GLOBAL VARIABLES;
    expect:
      node_tree_str: |
        +-node[CMD]
          +-cmd_type: show global variables
          +-args: []
