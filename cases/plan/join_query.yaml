# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 1
    desc: 简单SELECT FULL JOIN
    sql: SELECT t1.COL1, t1.COL2, t2.COL1, t2.COL2 FROM t1 full join t2 on t1.col1 = t2.col2;
    mode: physical-plan-unsupport
  - id: 2
    mode: request-unsupport
    desc: 简单SELECT LEFT JOIN
    sql: SELECT t1.COL1, t1.COL2, t2.COL1, t2.COL2 FROM t1 left join t2 on t1.col1 = t2.col2;
    expect:
      node_tree_str: |
        +-node[kQuery]: kQuerySelect
          +-distinct_opt: false
          +-where_expr: null
          +-group_expr_list: null
          +-having_expr: null
          +-order_expr_list: null
          +-limit: null
          +-select_list[list]:
          |  +-0:
          |  |  +-node[kResTarget]
          |  |    +-val:
          |  |    |  +-expr[column ref]
          |  |    |    +-relation_name: t1
          |  |    |    +-column_name: COL1
          |  |    +-name: <nil>
          |  +-1:
          |  |  +-node[kResTarget]
          |  |    +-val:
          |  |    |  +-expr[column ref]
          |  |    |    +-relation_name: t1
          |  |    |    +-column_name: COL2
          |  |    +-name: <nil>
          |  +-2:
          |  |  +-node[kResTarget]
          |  |    +-val:
          |  |    |  +-expr[column ref]
          |  |    |    +-relation_name: t2
          |  |    |    +-column_name: COL1
          |  |    +-name: <nil>
          |  +-3:
          |    +-node[kResTarget]
          |      +-val:
          |      |  +-expr[column ref]
          |      |    +-relation_name: t2
          |      |    +-column_name: COL2
          |      +-name: <nil>
          +-tableref_list[list]:
          |  +-0:
          |    +-node[kTableRef]: kJoin
          |      +-join_type: LeftJoin
          |      +-left:
          |      |  +-node[kTableRef]: kTable
          |      |    +-table: t1
          |      |    +-alias: <nil>
          |      +-right:
          |        +-node[kTableRef]: kTable
          |          +-table: t2
          |          +-alias: <nil>
          |      +-order_expressions: null
          |      +-on:
          |        +-expr[binary]
          |          +-=[list]:
          |            +-0:
          |            |  +-expr[column ref]
          |            |    +-relation_name: t1
          |            |    +-column_name: col1
          |            +-1:
          |              +-expr[column ref]
          |                +-relation_name: t2
          |                +-column_name: col2
          +-window_list: []
  - id: 3
    desc: 简单SELECT LAST JOIN
    sql: SELECT t1.COL1, t1.COL2, t2.COL1, t2.COL2 FROM t1 last join t2 order by t2.col5 on t1.col1 = t2.col2;
  - id: 4
    desc: 简单SELECT RIGHT JOIN
    sql: SELECT t1.COL1, t1.COL2, t2.COL1, t2.COL2 FROM t1 right join t2 on t1.col1 = t2.col2;
    mode: physical-plan-unsupport
  - id: 5
    desc: LeftJoin有不等式条件
    sql: SELECT t1.col1 as t1_col1, t2.col2 as t2_col2 FROM t1 left join t2 on t1.col1 = t2.col2 and t2.col5 >= t1.col5;
    mode: request-unsupport
  - id: 6
    desc: LastJoin有不等式条件
    sql: SELECT t1.col1 as t1_col1, t2.col2 as t2_col2 FROM t1 last join t2 order by t2.col5 on t1.col1 = t2.col2 and t2.col5 >= t1.col5;
  - id: 7-1
    desc: LastJoin有between条件
    sql: SELECT t1.col1 as t1_col1, t2.col1 as t2_col2 from t1 LAST JOIN t2 order by t2.col5 on t1.col1 = t2.col1 and t2.std_ts between t1.std_ts - 30d and t1.std_ts - 1d;
    mode: physical-plan-unsupport, runner-unsupport
  - id: 7-2
    desc: LastJoin有not between条件
    sql: SELECT t1.col1 as t1_col1, t2.col1 as t2_col2 from t1 LAST JOIN t2 order by t2.col5 on t1.col1 = t2.col1 and t2.std_ts not between t1.std_ts - 30d and t1.std_ts - 1d;
    mode: physical-plan-unsupport, runner-unsupport
  - id: 8-1
    desc: LastJoin无ORDER BY
    sql: SELECT t1.col1 as t1_col1, t2.col1 as t2_col2 from t1 LAST JOIN t2 on t1.col1 = t2.col1;
    mode: physical-plan-unsupport, runner-unsupport
  - id: 8-2
    desc: LastJoin有不等式条件无ORDER BY
    sql: SELECT t1.col1 as t1_col1, t2.col2 as t2_col2 FROM t1 last join t2 on t1.col1 = t2.col2 and t2.col5 >= t1.col5;
  - id: 9-1
    desc: t1 LAST JOIN db2.table2
    sql: |
      SELECT t1.COL1, t1.COL2, db2.table2.COL1, db2.table2.COL2 FROM t1 last join db2.table2 order by
      db2.table2.col5 on t1.col1 = db2.table2.col2;
    expect:
      node_tree_str: |
        +-node[kQuery]: kQuerySelect
          +-distinct_opt: false
          +-where_expr: null
          +-group_expr_list: null
          +-having_expr: null
          +-order_expr_list: null
          +-limit: null
          +-select_list[list]:
          |  +-0:
          |  |  +-node[kResTarget]
          |  |    +-val:
          |  |    |  +-expr[column ref]
          |  |    |    +-relation_name: t1
          |  |    |    +-column_name: COL1
          |  |    +-name: <nil>
          |  +-1:
          |  |  +-node[kResTarget]
          |  |    +-val:
          |  |    |  +-expr[column ref]
          |  |    |    +-relation_name: t1
          |  |    |    +-column_name: COL2
          |  |    +-name: <nil>
          |  +-2:
          |  |  +-node[kResTarget]
          |  |    +-val:
          |  |    |  +-expr[column ref]
          |  |    |    +-relation_name: db2.table2
          |  |    |    +-column_name: COL1
          |  |    +-name: <nil>
          |  +-3:
          |    +-node[kResTarget]
          |      +-val:
          |      |  +-expr[column ref]
          |      |    +-relation_name: db2.table2
          |      |    +-column_name: COL2
          |      +-name: <nil>
          +-tableref_list[list]:
          |  +-0:
          |    +-node[kTableRef]: kJoin
          |      +-join_type: LastJoin
          |      +-left:
          |      |  +-node[kTableRef]: kTable
          |      |    +-table: t1
          |      |    +-alias: <nil>
          |      +-right:
          |        +-node[kTableRef]: kTable
          |          +-table: table2
          |          +-alias: <nil>
          |      +-order_expressions:
          |        +-node[kExpr]
          |          +-order_expressions: (db2.table2.col5 ASC)
          |      +-on:
          |        +-expr[binary]
          |          +-=[list]:
          |            +-0:
          |            |  +-expr[column ref]
          |            |    +-relation_name: t1
          |            |    +-column_name: col1
          |            +-1:
          |              +-expr[column ref]
          |                +-relation_name: db2.table2
          |                +-column_name: col2
          +-window_list: []
  - id: 9-2
    desc: db.t1 LAST JOIN db2.table2
    sql: |
      SELECT db.t1.COL1, db.t1.COL2, db2.table2.COL1, db2.table2.COL2 FROM db.t1 last join db2.table2 order by
      db2.table2.col5 on db.t1.col1 = db2.table2.col2;
  - id: 10-1
    desc: join temperary feature table
    mode: batch-unsupport
    sql: |
      select * from
      (
      SELECT
      col1 as id,
      sum(col2) OVER w1 as w1_col2_sum,
      FROM t1 WINDOW
      w1 AS (PARTITION BY col1 ORDER BY col5 ROWS BETWEEN 10 OPEN PRECEDING AND CURRENT ROW)
      ) as out0 LAST JOIN
      (
      SELECT
      col1 as id,
      sum(col2) OVER w2 as w2_col2_sum FROM t1 WINDOW
      w2 AS (PARTITION BY col1 ORDER BY col5 ROWS_RANGE BETWEEN 1d OPEN PRECEDING AND CURRENT ROW)
      ) as out1 ON out0.id = out1.id;
  - id: 10-2
    desc: join temperary feature table with duplicate column name but same column id
    mode: batch-unsupport
    sql: |
      select * from
      (
      SELECT
      col1 as id,
      col1 as id,
      t1.col1 as id,
      sum(col2) OVER w1 as w1_col2_sum,
      FROM t1 WINDOW
      w1 AS (PARTITION BY col1 ORDER BY col5 ROWS BETWEEN 10 OPEN PRECEDING AND CURRENT ROW)
      ) as out0 LAST JOIN
      (
      SELECT
      col1 as id,
      sum(col2) OVER w2 as w2_col2_sum FROM t1 WINDOW
      w2 AS (PARTITION BY col1 ORDER BY col5 ROWS_RANGE BETWEEN 1d OPEN PRECEDING AND CURRENT ROW)
      ) as out1 ON out0.id = out1.id;
