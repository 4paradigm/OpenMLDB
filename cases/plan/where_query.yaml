# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 1
    desc: SELECT简单过滤
    sql: SELECT COL1 FROM t1 where COL1 > 10;
  - id: 2
    desc: SELECT过滤条件是逻辑关系表达式
    sql: SELECT COL1 FROM t1 where COL1 > 10 and COL2 = 20 or COL1 =0;
  - id: 3
    desc: SELECT 过滤后统计条数
    sql: SELECT COUNT(COL1) FROM t1 where COL1 > 10 and COL2 = 20;
    mode: physical-plan-unsupport
  - id: 4
    desc: SELECT 过滤后分组聚合条数
    sql: SELECT col1, COUNT(COL1) FROM t1 where COL1 > 10 and COL2 = 20 group by col1;
  - id: 5
    desc: SELECT 过滤条件LIKE通配符
    sql: SELECT COL1 FROM t1 where COL like "%abc";
    mode: physical-plan-unsupport
  - id: 6
    desc: SELECT 过滤条件NOT LIKE 通配符
    sql: SELECT COL1 FROM t1 where COL like "%abc";
    mode: physical-plan-unsupport
  - id: 7
    desc: SELECT 过滤条件LIKE 数字
    sql: SELECT COL1 FROM t1 where COL1 like 10;
    mode: physical-plan-unsupport
  - id: 8
    desc: SELECT 过滤条件NOT LIKE 数字
    sql: SELECT COL1 FROM t1 where COL1 not like 10;
    mode: physical-plan-unsupport
  - id: 9
    tags: ["TODO", "zetasql-unsupport"]
    mode: physical-plan-unsupport
    desc: SELECT 过滤条件in整数元组
    sql: SELECT COL1 FROM t1 where COL2 in (1, 2, 3, 4, 5);
  - id: 10
    tags: ["TODO", "zetasql-unsupport"]
    mode: physical-plan-unsupport
    desc: SELECT 过滤条件in字符串元组
    sql: SELECT COL1 FROM t1 where COL1 in ("abc", "xyz", "test");
  - id: 11
    tags: ["TODO", "zetasql-unsupport"]
    mode: physical-plan-unsupport
    desc: SELECT 过滤条件NOT IN证书元组
    sql: SELECT COL1 FROM t1 where COL1 not in (1,2,3,4,5);
  - id: 12
    desc: SELECT简单过滤, id=?
    sql: SELECT COL1 FROM t1 where COL1 = ?;
    parameters:
      columns : ["1 int"]
    expect:
      node_tree_str: |
        +-node[kQuery]: kQuerySelect
          +-distinct_opt: false
          +-where_expr:
          |  +-expr[binary]
          |    +-=[list]:
          |      +-0:
          |      |  +-expr[column ref]
          |      |    +-relation_name: <nil>
          |      |    +-column_name: COL1
          |      +-1:
          |        +-expr[parameter]
          |          +-position: 1
          +-group_expr_list: null
          +-having_expr: null
          +-order_expr_list: null
          +-limit: null
          +-select_list[list]:
          |  +-0:
          |    +-node[kResTarget]
          |      +-val:
          |      |  +-expr[column ref]
          |      |    +-relation_name: <nil>
          |      |    +-column_name: COL1
          |      +-name: <nil>
          +-tableref_list[list]:
          |  +-0:
          |    +-node[kTableRef]: kTable
          |      +-table: t1
          |      +-alias: <nil>
          +-window_list: []

  - id: 13
    desc: SELECT过滤条件是逻辑关系表达式, 两个占位参数
    mode: physical-plan-unsupport
    sql: SELECT COL1 FROM t1 where COL1 = ? and COL2 > ? ;
    parameters:
      columns: [ "1 int", "2 bigint"]
    expect:
      node_tree_str: |
        +-node[kQuery]: kQuerySelect
          +-distinct_opt: false
          +-where_expr:
          |  +-expr[binary]
          |    +-AND[list]:
          |      +-0:
          |      |  +-expr[binary]
          |      |    +-=[list]:
          |      |      +-0:
          |      |      |  +-expr[column ref]
          |      |      |    +-relation_name: <nil>
          |      |      |    +-column_name: COL1
          |      |      +-1:
          |      |        +-expr[parameter]
          |      |          +-position: 1
          |      +-1:
          |        +-expr[binary]
          |          +->[list]:
          |            +-0:
          |            |  +-expr[column ref]
          |            |    +-relation_name: <nil>
          |            |    +-column_name: COL2
          |            +-1:
          |              +-expr[parameter]
          |                +-position: 2
          +-group_expr_list: null
          +-having_expr: null
          +-order_expr_list: null
          +-limit: null
          +-select_list[list]:
          |  +-0:
          |    +-node[kResTarget]
          |      +-val:
          |      |  +-expr[column ref]
          |      |    +-relation_name: <nil>
          |      |    +-column_name: COL1
          |      +-name: <nil>
          +-tableref_list[list]:
          |  +-0:
          |    +-node[kTableRef]: kTable
          |      +-table: t1
          |      +-alias: <nil>
          +-window_list: []
  - id: 14
    desc: SELECT 过滤后分组聚合条数, 两个占位参数
    sql: SELECT col1, COUNT(COL1) FROM t1 where COL1 = ? and COL2 > ? group by col1;
    parameters:
      columns: [ "1 int", "2 bigint" ]
    expect:
      node_tree_str: |
        +-node[kQuery]: kQuerySelect
          +-distinct_opt: false
          +-where_expr:
          |  +-expr[binary]
          |    +-AND[list]:
          |      +-0:
          |      |  +-expr[binary]
          |      |    +-=[list]:
          |      |      +-0:
          |      |      |  +-expr[column ref]
          |      |      |    +-relation_name: <nil>
          |      |      |    +-column_name: COL1
          |      |      +-1:
          |      |        +-expr[parameter]
          |      |          +-position: 1
          |      +-1:
          |        +-expr[binary]
          |          +->[list]:
          |            +-0:
          |            |  +-expr[column ref]
          |            |    +-relation_name: <nil>
          |            |    +-column_name: COL2
          |            +-1:
          |              +-expr[parameter]
          |                +-position: 2
          +-group_expr_list:
          |  +-expr[column ref]
          |    +-relation_name: <nil>
          |    +-column_name: col1
          +-having_expr: null
          +-order_expr_list: null
          +-limit: null
          +-select_list[list]:
          |  +-0:
          |  |  +-node[kResTarget]
          |  |    +-val:
          |  |    |  +-expr[column ref]
          |  |    |    +-relation_name: <nil>
          |  |    |    +-column_name: col1
          |  |    +-name: <nil>
          |  +-1:
          |    +-node[kResTarget]
          |      +-val:
          |      |  +-expr[function]
          |      |    +-function:
          |      |    |  [Unresolved](count)
          |      |    +-arg[0]:
          |      |      +-expr[column ref]
          |      |        +-relation_name: <nil>
          |      |        +-column_name: COL1
          |      +-name: <nil>
          +-tableref_list[list]:
          |  +-0:
          |    +-node[kTableRef]: kTable
          |      +-table: t1
          |      +-alias: <nil>
          +-window_list: []
  - id: between_predicate_1
    desc: X between Y and Z
    sql: SELECT col1 FROM t1 WHERE COL1 BETWEEN 1 AND 5;
    expect:
      node_tree_str: |
        +-node[kQuery]: kQuerySelect
          +-distinct_opt: false
          +-where_expr:
          |  +-expr[between]
          |    +-is_not_between: false
          |    +-value:
          |    |  +-expr[column ref]
          |    |    +-relation_name: <nil>
          |    |    +-column_name: COL1
          |    +-left:
          |    |  +-expr[primary]
          |    |    +-value: 1
          |    |    +-type: int32
          |    +-right:
          |      +-expr[primary]
          |        +-value: 5
          |        +-type: int32
          +-group_expr_list: null
          +-having_expr: null
          +-order_expr_list: null
          +-limit: null
          +-select_list[list]:
          |  +-0:
          |    +-node[kResTarget]
          |      +-val:
          |      |  +-expr[column ref]
          |      |    +-relation_name: <nil>
          |      |    +-column_name: col1
          |      +-name: <nil>
          +-tableref_list[list]:
          |  +-0:
          |    +-node[kTableRef]: kTable
          |      +-table: t1
          |      +-alias: <nil>
          +-window_list: []
  - id: between_predicate_2
    desc: X NOT BETWEEN Y AND Z
    sql: SELECT col1 FROM t1 WHERE COL1 NOT BETWEEN 1 AND 5;
    expect:
      node_tree_str: |
        +-node[kQuery]: kQuerySelect
          +-distinct_opt: false
          +-where_expr:
          |  +-expr[between]
          |    +-is_not_between: true
          |    +-value:
          |    |  +-expr[column ref]
          |    |    +-relation_name: <nil>
          |    |    +-column_name: COL1
          |    +-left:
          |    |  +-expr[primary]
          |    |    +-value: 1
          |    |    +-type: int32
          |    +-right:
          |      +-expr[primary]
          |        +-value: 5
          |        +-type: int32
          +-group_expr_list: null
          +-having_expr: null
          +-order_expr_list: null
          +-limit: null
          +-select_list[list]:
          |  +-0:
          |    +-node[kResTarget]
          |      +-val:
          |      |  +-expr[column ref]
          |      |    +-relation_name: <nil>
          |      |    +-column_name: col1
          |      +-name: <nil>
          +-tableref_list[list]:
          |  +-0:
          |    +-node[kTableRef]: kTable
          |      +-table: t1
          |      +-alias: <nil>
          +-window_list: []
