# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 0
    desc: Distinct Count
    db: db1
    sql: |
      SELECT col1 as id, col2, std_ts,
      count(col2) OVER w1 as w1_col2_cnt,
      distinct_count(col2) OVER w1 as w1_col2_dis_cnt,
      distinct_count(col0) OVER w1 as w1_col0_dis_cnt
      FROM t1
      WINDOW w1 as (PARTITION BY t1.col2 ORDER BY t1.std_ts ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col6:string, std_ts:timestamp
        index: index2:col2:std_ts
        data: |
          0, 1, 5, 1, 1590115420000
          0, 2, 5, 22, 1590115421000
          1, 3, 55, 333, 1590115422000
          1, 4, 55, 4444, 1590115423000
          2, 5, 55, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000
    expect:
      schema: id:int32, col2:int16, std_ts:timestamp, w1_col2_cnt:int64, w1_col2_dis_cnt:int64, w1_col0_dis_cnt:int64
      order: id
      data: |
        1, 5, 1590115420000, 1, 1, 1
        2, 5, 1590115421000, 2, 1, 1
        3, 55, 1590115422000, 1, 1, 1
        4, 55, 1590115423000, 2, 1, 1
        5, 55, 1590115424000, 3, 1, 2

  - id: 1
    desc: Count of string types
    db: db1
    sql: |
      SELECT col1 as id,
             count(col2) over w1 as col2_cnt,
             count(col6) over w1 as col6_cnt,
             count(std_ts) over w1 as std_ts_cnt
      FROM t1
      WINDOW w1 as (PARTITION BY t1.col2 ORDER BY t1.std_ts ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col6:string, std_ts:timestamp
        index: index2:col2:std_ts
        data: |
          0, 1, 5, 1, 1590115420000
          0, 2, 5, 22, 1590115421000
          1, 3, 55, 333, 1590115422000
          1, 4, 55, 4444, 1590115423000
          2, 5, 55, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000
    expect:
      schema: id:int32, col2_cnt:int64, col6_cnt:int64, std_ts_cnt:int64
      order: id
      data: |
        1, 1, 1, 1
        2, 2, 2, 2
        3, 1, 1, 1
        4, 2, 2, 2
        5, 3, 3, 3
  - id: 2
    desc: udf and udaf in same window project
    db: db1
    sql: |
      SELECT col1 as id,
             month(std_ts) as my_month,
             month(std_ts + col2) as my_month_add_col2,
             month(std_ts + 1) as my_month_add_1,
             month(1 + std_ts) as my_month_1_add,
             count(col2) over w1 as col2_cnt
      FROM t1
      WINDOW w1 as (PARTITION BY t1.col2 ORDER BY t1.std_ts ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col6:string, std_ts:timestamp
        index: index2:col2:std_ts
        data: |
          0, 1, 5, 1, 1590115420000
          0, 2, 5, 22, 1590115421000
          1, 3, 55, 333, 1590115422000
          1, 4, 55, 4444, 1590115423000
          2, 5, 55, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000
    expect:
      schema: id:int32, my_month:int, my_month_add_col2:int, my_month_add_1:int,, my_month_1_add:int, col2_cnt:int64
      order: id
      data: |
        1, 5, 5, 5, 5, 1
        2, 5, 5, 5, 5, 2
        3, 5, 5, 5, 5, 1
        4, 5, 5, 5, 5, 2
        5, 5, 5, 5, 5, 3

  - id: 3
    desc: correctness for codegen loop combining
    inputs:
      - name: t1
        columns:
          - id int
          - key1 string
          - l1 int64
          - l2 int64
          - f1 float
          - d1 double
          - ts timestamp
        indexs:
          - idx:key1:ts
        data: |
          1, g1, null,   -3,  null, 2.0,  1590738990000
          2, g1, 1,    null,  2.0,  2.0,  1590738990001
          3, g1, 2,     -1,   null, 2.0,  1590738990002
          4, g2, null, null,  4.4,  null, 1590738990002
          5, g2, null,   -2,  9.0,  4.0,  1590738990003
          6, g2, 1,       1,  7.0,  4.0,  1590738990004
          7, g2, 1,    null,  null, null, 1590738990005
          8, g2, null, null,  null, 7.0,  1590738990006
    sql: |
      select
        id,
        key1,
        count(id) over w as c1,
        count(l1) over w as c2,
        max(`l1`) over w as mi,
        min(`l2`) over w as ma,
        sum(f1) over w as sum,
        avg(d1) over w as av
      from t1
          window w as (partition by `key1` order by `ts` rows_range between 5s open preceding and 0s preceding maxsize 10);
    expect:
      columns:
        - id int
        - key1 string
        - c1 int64
        - c2 int64
        - mi int64
        - ma int64
        - sum float
        - av double
      order: id
      data: |
        1, g1, 1, 0, null, -3,   null, 2.0
        2, g1, 2, 1, 1,    -3,    2.0, 2.0
        3, g1, 3, 2, 2,    -3,    2.0, 2.0
        4, g2, 1, 0, null, null,  4.4, null
        5, g2, 2, 0, null, -2,   13.4, 4.0
        6, g2, 3, 1, 1,    -2,   20.4, 4.0
        7, g2, 4, 2, 1,    -2,   20.4, 4.0
        8, g2, 5, 2, 1,    -2,   20.4, 5.0

  - id: 4
    inputs:
      - name: t1
        columns:
          - id int
          - uid string
          - mid string
          - cardno string
          - trans_time timestamp
          - trans_amt double
          - trans_type string
          - province string
          - city string
          - label bool
        indexs:
          - idx:label:trans_time
        data: |
           1, UserA, M1,1111111, 1643767200000,     10.0,      CASH,      SH,ShangHai, true
           3, UserA, M2,1111111, 1643857200000,     20.0,       POS,      SH,ShangHai, true
           4, UserA, M3,1111111, 1644202800000,     15.0,       POS,      SH,ShangHai, true
           6, UserA, M1,1111111, 1644210000000,     20.0,      CASH,      BJ, BeiJing, true
           8, UserA, M2,1111111, 1644289200000,     50.0,      CASH,      BJ, BeiJing, true
           9, UserA, M3,1111111, 1644292800000,    100.0,       POS,      BJ, BeiJing, true
           2, UserB, M3,2222222, 1643686200000,     10.0,       POS,      SH,ShangHai, true
           5, UserB, M1,2222222, 1644199200000,     20.0,       POS,      SH,ShangHai, true
           7, UserB, M2,2222222, 1644206400000,     30.0,       POS,      SH,ShangHai, true
           10,UserB, M5,2222222, 1644289200000,     10.0,       POS,      SH,ShangHai, true

          #  +---+-----+---+-------+-------------------+---------+----------+--------+--------+-----+
          # | id|  uid|mid| cardno|         trans_time|trans_amt|trans_type|province|    city|label|
          # +---+-----+---+-------+-------------------+---------+----------+--------+--------+-----+
          # |  2|UserB| M3|2222222|2022-02-01 11:30:00|     10.0|       POS|      SH|ShangHai| true|
          # |  1|UserA| M1|1111111|2022-02-02 10:00:00|     10.0|      CASH|      SH|ShangHai| true|
          # |  3|UserA| M2|1111111|2022-02-03 11:00:00|     20.0|       POS|      SH|ShangHai| true|
          # |  5|UserB| M1|2222222|2022-02-07 10:00:00|     20.0|       POS|      SH|ShangHai| true|
          # |  4|UserA| M3|1111111|2022-02-07 11:00:00|     15.0|       POS|      SH|ShangHai| true|
          # |  7|UserB| M2|2222222|2022-02-07 12:00:00|     30.0|       POS|      SH|ShangHai| true|
          # |  6|UserA| M1|1111111|2022-02-07 13:00:00|     20.0|      CASH|      BJ| BeiJing| true|
          # |  8|UserA| M2|1111111|2022-02-08 11:00:00|     50.0|      CASH|      BJ| BeiJing| true|
          # | 10|UserB| M5|2222222|2022-02-08 11:00:00|     10.0|       POS|      SH|ShangHai| true|
          # |  9|UserA| M3|1111111|2022-02-08 12:00:00|    100.0|       POS|      BJ| BeiJing| true|
    sql: |
      SELECT id, top_n_key_count_cate_where(trans_amt, label, uid, 5) over w30d as w30d_count_trans_amt
      from t1
      window w30d as (PARTITION BY label ORDER BY trans_time ROWS_RANGE BETWEEN 30d PRECEDING AND CURRENT ROW);
    expect:
      columns:
        - id int
        - w30d_count_trans_amt string
      order: id
      rows:
        - [1, "UserB:1,UserA:1"]
        - [2, 'UserB:1']
        - [3, 'UserB:1,UserA:2']
        - [4, 'UserB:2,UserA:3']
        - [5, 'UserB:2,UserA:2']
        - [6, 'UserB:3,UserA:4']
        - [7, 'UserB:3,UserA:3']
        - [8, 'UserB:3,UserA:5']
        - [9, 'UserB:4,UserA:6']
        - [10, 'UserB:4,UserA:5']
