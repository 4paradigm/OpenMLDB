# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 0
    desc: Distinct Count
    db: db1
    sql: |
      SELECT col1 as id, col2, std_ts,
      count(col2) OVER w1 as w1_col2_cnt,
      distinct_count(col2) OVER w1 as w1_col2_dis_cnt,
      distinct_count(col0) OVER w1 as w1_col0_dis_cnt
      FROM t1
      WINDOW w1 as (PARTITION BY t1.col2 ORDER BY t1.std_ts ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col6:string, std_ts:timestamp
        index: index2:col2:std_ts
        data: |
          0, 1, 5, 1, 1590115420000
          0, 2, 5, 22, 1590115421000
          1, 3, 55, 333, 1590115422000
          1, 4, 55, 4444, 1590115423000
          2, 5, 55, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000
    expect:
      schema: id:int32, col2:int16, std_ts:timestamp, w1_col2_cnt:int64, w1_col2_dis_cnt:int64, w1_col0_dis_cnt:int64
      order: id
      data: |
        1, 5, 1590115420000, 1, 1, 1
        2, 5, 1590115421000, 2, 1, 1
        3, 55, 1590115422000, 1, 1, 1
        4, 55, 1590115423000, 2, 1, 1
        5, 55, 1590115424000, 3, 1, 2

  - id: 1
    desc: Count of string types
    db: db1
    sql: |
      SELECT col1 as id,
             count(col2) over w1 as col2_cnt,
             count(col6) over w1 as col6_cnt,
             count(std_ts) over w1 as std_ts_cnt
      FROM t1
      WINDOW w1 as (PARTITION BY t1.col2 ORDER BY t1.std_ts ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col6:string, std_ts:timestamp
        index: index2:col2:std_ts
        data: |
          0, 1, 5, 1, 1590115420000
          0, 2, 5, 22, 1590115421000
          1, 3, 55, 333, 1590115422000
          1, 4, 55, 4444, 1590115423000
          2, 5, 55, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000
    expect:
      schema: id:int32, col2_cnt:int64, col6_cnt:int64, std_ts_cnt:int64
      order: id
      data: |
        1, 1, 1, 1
        2, 2, 2, 2
        3, 1, 1, 1
        4, 2, 2, 2
        5, 3, 3, 3
  - id: 2
    desc: udf and udaf in same window project
    db: db1
    sql: |
      SELECT col1 as id,
             month(std_ts) as my_month,
             month(std_ts + col2) as my_month_add_col2,
             month(std_ts + 1) as my_month_add_1,
             month(1 + std_ts) as my_month_1_add,
             count(col2) over w1 as col2_cnt
      FROM t1
      WINDOW w1 as (PARTITION BY t1.col2 ORDER BY t1.std_ts ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col6:string, std_ts:timestamp
        index: index2:col2:std_ts
        data: |
          0, 1, 5, 1, 1590115420000
          0, 2, 5, 22, 1590115421000
          1, 3, 55, 333, 1590115422000
          1, 4, 55, 4444, 1590115423000
          2, 5, 55, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000
    expect:
      schema: id:int32, my_month:int, my_month_add_col2:int, my_month_add_1:int,, my_month_1_add:int, col2_cnt:int64
      order: id
      data: |
        1, 5, 5, 5, 5, 1
        2, 5, 5, 5, 5, 2
        3, 5, 5, 5, 5, 1
        4, 5, 5, 5, 5, 2
        5, 5, 5, 5, 5, 3

  - id: 3
    desc: correctness for codegen loop combining
    inputs:
      - name: t1
        columns:
          - id int
          - key1 string
          - l1 int64
          - l2 int64
          - f1 float
          - d1 double
          - ts timestamp
        indexs:
          - idx:key1:ts
        data: |
          1, g1, null,   -3,  null, 2.0,  1590738990000
          2, g1, 1,    null,  2.0,  2.0,  1590738990001
          3, g1, 2,     -1,   null, 2.0,  1590738990002
          4, g2, null, null,  4.4,  null, 1590738990002
          5, g2, null,   -2,  9.0,  4.0,  1590738990003
          6, g2, 1,       1,  7.0,  4.0,  1590738990004
          7, g2, 1,    null,  null, null, 1590738990005
          8, g2, null, null,  null, 7.0,  1590738990006
    sql: |
      select
        id,
        key1,
        count(id) over w as c1,
        count(l1) over w as c2,
        max(`l1`) over w as mi,
        min(`l2`) over w as ma,
        sum(f1) over w as sum,
        avg(d1) over w as av
      from t1
          window w as (partition by `key1` order by `ts` rows_range between 5s open preceding and 0s preceding maxsize 10)
    expect:
      columns:
        - id int
        - key1 string
        - c1 int64
        - c2 int64
        - mi int64
        - ma int64
        - sum float
        - av double
      order: id
      data: |
        1, g1, 1, 0, null, -3,   null, 2.0
        2, g1, 2, 1, 1,    -3,    2.0, 2.0
        3, g1, 3, 2, 2,    -3,    2.0, 2.0
        4, g2, 1, 0, null, null,  4.4, null
        5, g2, 2, 0, null, -2,   13.4, 4.0
        6, g2, 3, 1, 1,    -2,   20.4, 4.0
        7, g2, 4, 2, 1,    -2,   20.4, 4.0
        8, g2, 5, 2, 1,    -2,   20.4, 5.0

  -
    id: 4
    desc: udaf with a expr registered udf as parameter, refer \#2974
    inputs:
      -
        columns : ["id int","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date","c9 string","c10 bool"]
        indexs: ["index1:c1:c7"]
        rows:
          - [1,"aa",1,1,30,1.1,2.1,1590738990000,"2020-05-01","a",true]
          - [2,"aa",4,4,33,1.4,2.4,1590738991000,"2020-05-03","c",false]
          - [3,"aa",3,3,32,1.3,2.3,1590738992000,"2020-05-02","b",true]
          - [4,"aa",NULL,NULL,NULL,NULL,NULL,1590738993000,NULL,NULL,NULL]
    sql: |
      SELECT
        {0}.id, c1,
        count_where(inc(c2), c2<4) OVER w1 as m2,
        sum_where(nvl(c3, 14), nvl(c3, 14) > 4) OVER w1 as m3
      FROM {0} WINDOW
        w1 AS (PARTITION BY {0}.c1 ORDER BY {0}.c7 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW);
    expect:
      order: id
      columns: ["id int","c1 string","m2 bigint","m3 int"]
      rows:
        - [1, "aa", 1, NULL]
        - [2, "aa", 1, NULL]
        - [3, "aa", 2, NULL]
        - [4, "aa", 1, 14]

  -
    id: 5
    desc: udaf with a expr registered udf as parameter, refer \#2974
    inputs:
      -
        columns : ["id int","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date","c9 string","c10 bool"]
        indexs: ["index1:c1:c7"]
        rows:
          - [1,"aa",1,1,30,1.1,2.1,1590738990000,"2020-05-01","a",true]
          - [2,"aa",4,4,33,1.4,2.4,1590738991000,"2020-05-03","c",false]
          - [3,"aa",3,3,32,1.3,2.3,1590738992000,"2020-05-02","b",true]
          - [4,"aa",NULL,NULL,NULL,NULL,NULL,1590738993000,NULL,NULL,NULL]
    sql: |
      SELECT
        {0}.id, c1,
        count(case when c2 > last_value(c2) over w1 then c3 else null end) OVER w1 as m2,
        sum(nvl(c3, 14)) OVER w1 as m3
      FROM {0} WINDOW
        w1 AS (PARTITION BY {0}.c1 ORDER BY {0}.c7 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW);
    expect:
      order: id
      columns: ["id int","c1 string","m2 bigint","m3 int"]
      rows:
        - [1, "aa", 0, 1]
        - [2, "aa", 0, 5]
        - [3, "aa", 1, 8]
        - [4, "aa", 0, 21]

