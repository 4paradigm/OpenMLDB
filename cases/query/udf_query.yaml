# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 0
    desc: SELECT Day(date列)
    mode: request
    db: db1
    sql: select col1 as id, std_ts, std_date, day(std_date) as mday from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1590115420001, 2020-05-20
          2, 1590115421001, 2020-05-21
          3, 1590115422001, 2020-05-22

    expect:
      schema: id:int32, std_ts:timestamp, std_date:date, mday:int32
      order: id
      data: |
        1, 1590115420001, 2020-05-20, 20
        2, 1590115421001, 2020-05-21, 21
        3, 1590115422001, 2020-05-22, 22
  - id: 1
    desc: SELECT Month(date列)
    mode: request
    db: db1
    sql: select col1 as id, std_ts, std_date, month(std_date) as `month` from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1590115420001, 2020-05-20
          2, 1590115421001, 2020-06-21
          3, 1590115422001, 2020-07-22

    expect:
      schema: id:int32, std_ts:timestamp, std_date:date, month:int32
      order: id
      data: |
        1, 1590115420001, 2020-05-20, 05
        2, 1590115421001, 2020-06-21, 06
        3, 1590115422001, 2020-07-22, 07
  - id: 2
    desc: SELECT Year(date列)
    mode: request
    db: db1
    sql: select col1 as id, std_ts, std_date, year(std_date) as `year` from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1590115420001, 2020-05-20
          2, 1590115421001, 1900-06-21

    expect:
      schema: id:int32, std_ts:timestamp, std_date:date, year:int32
      order: id
      data: |
        1, 1590115420001, 2020-05-20, 2020
        2, 1590115421001, 1900-06-21, 1900
  - id: 3
    desc: SELECT Weekday(date列)
    mode: request
    db: db1
    sql: select col1 as id, std_ts, std_date, dayofweek(std_date) as wday from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1590115420001, 2020-05-20
          2, 1590115421001, 1900-06-21

    expect:
      schema: id:int32, std_ts:timestamp, std_date:date, wday:int32
      order: id
      data: |
        1, 1590115420001, 2020-05-20, 4
        2, 1590115421001, 1900-06-21, 5
  - id: 4
    desc: SELECT Week(date列)
    mode: request
    db: db1
    sql: select col1 as id, std_date, week(std_date) as `week` from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1, 2020-05-22
          2, 2, 2020-05-23
          3, 3, 2020-05-24
          4, 4, 2020-05-25

    expect:
      schema: id:int32, std_date:date, week:int32
      order: id
      data: |
        1, 2020-05-22, 21
        2, 2020-05-23, 21
        3, 2020-05-24, 21
        4, 2020-05-25, 22

  - id: 5
    desc: SELECT Day, Month, Year, Weekday, Week, Hour, Minute, Second Of Timestamp
    mode: request
    db: db1
    sql: |
      select col1 as id, std_ts,
      day(std_ts) as mday, month(std_ts) as `month`, year(std_ts) as `year`,
      dayofweek(std_ts) as wday, weekofyear(std_ts) as yweek,
      hour(std_ts) as `hour`, minute(std_ts) as `minute`, second(std_ts) as `second`
      from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp
        index: index2:col1:std_ts
        data: |
          1, 1590115420000

    expect:
      schema: |
        id:int32, std_ts:timestamp, mday:int32, month:int32, year:int32, wday:int32, yweek:int32,
        hour:int32, minute:int32, second:int32
      order: id
      data: |
        1, 1590115420000, 22, 5, 2020, 6, 21, 10, 43, 40
  - id: 6
    desc: SELECT DayOfMonth(date列)
    mode: request
    db: db1
    sql: select col1 as id, std_ts, std_date, dayofmonth(std_date) as mday from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1590115420001, 2020-05-20
          2, 1590115421001, 2020-05-21
          3, 1590115422001, 2020-05-22

    expect:
      schema: id:int32, std_ts:timestamp, std_date:date, mday:int32
      order: id
      data: |
        1, 1590115420001, 2020-05-20, 20
        2, 1590115421001, 2020-05-21, 21
        3, 1590115422001, 2020-05-22, 22
  - id: 7
    desc: SELECT WeekOfYear(date列)
    mode: request
    db: db1
    sql: select col1 as id, std_date, weekofyear(std_date) as yweek from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1, 2020-05-22
          2, 2, 2020-05-23
          3, 3, 2020-05-24
          4, 4, 2020-05-25

    expect:
      schema: id:int32, std_date:date, yweek:int32
      order: id
      data: |
        1, 2020-05-22, 21
        2, 2020-05-23, 21
        3, 2020-05-24, 21
        4, 2020-05-25, 22
  - id: 8
    desc: SELECT day(null)
    tags: ["TODO", "null还不支持"]
    mode: request
    sql: select col1 as id, std_date, day(std_date) as m from t1;
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1:std_ts
        data: |
          1, 1, 2020-05-22
          2, 2, 2020-05-23
          3, 3, 2020-05-24
          4, 4, NULL

    expect:
      schema: id:int32, std_date:date, m:int32
      order: id
      data: |
        1, 2020-05-22, 22
        2, 2020-05-23, 23
        3, 2020-05-24, 24
        4, NULL, NULL
  - id: 9
    desc: substr pos
    mode: request-unsupport
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, col_str:string
        index: index2:col1:std_ts
        data: |
          1, 1, hello_world
          2, 2, abcdefghig
    sql: |
      select col1 as id, substring(col_str, 3) as col1 from t1;
    expect:
      schema: id:int32, col1:string
      order: id
      rows:
        - [1, "llo_world"]
        - [2, "cdefghig"]
  - id: 10
    desc: substr pos len
    mode: request-unsupport
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, col_str:string
        index: index2:col1:std_ts
        data: |
          1, 1, hello_world
          2, 2, abcdefghig
    sql: |
      select col1 as id, substring(col_str, 3, 6) as col1 from t1;
    expect:
      schema: id:int32, col1:string
      order: id
      rows:
        - [1, "llo_wo"]
        - [2, "cdefgh"]
  - id: 11
    desc: concat
    mode: request-unsupport
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, col2:string, col3:int64, col4:int16
        index: index2:col1:std_ts
        data: |
          1, 1, hello_world, 1234567890, 12
          2, 2, abcdefghig, 9876543210, -12
    sql: |
      select col1 as id, concat(col2, col3, col4) as concatstr from t1;
    expect:
      schema: id:int32, concatstr:string
      order: id
      rows:
        - [1, "hello_world123456789012"]
        - [2, "abcdefghig9876543210-12"]
  - id: 12
    desc: concat_ws
    mode: request-unsupport
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, col2:string, col3:int64, col4:int16
        index: index2:col1:std_ts
        data: |
          1, 1, hello_world, 1234567890, 12
          2, 2, abcdefghig, 9876543210, -12
    sql: |
      select col1 as id, concat_ws("#", col2, col3, col4) as concatstr from t1;
    expect:
      schema: id:int32, concatstr:string
      order: id
      rows:
        - [1, "hello_world#1234567890#12"]
        - [2, "abcdefghig#9876543210#-12"]

  - id: like_udf_1
    desc: precent character
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    dataProvider:
      - ["like_match", "ilike_match"]
      - ["M%", "m%"]
    sql: |
      select d[0](col2, 'd[1]', '\\')  as col2 from t1;
    expect:
      columns: ["col2:bool"]
    expectProvider:
      0:
        0:
          rows:
            - [true]
        1:
          rows:
            - [false]
      1:
        0:
          rows:
            - [true]
        1:
          rows:
            - [true]
  - id: like_udf_2
    desc: underscore character, 2 pararmeter version
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    dataProvider:
      - ["like_match", "ilike_match"]
      - ["M_ke", "m_ke"]
    sql: |
      select d[0](col2, 'd[1]')  as col2 from t1;
    expect:
      columns: ["col2:bool"]
    expectProvider:
      0:
        0:
          rows:
            - [true]
        1:
          rows:
            - [false]
      1:
        0:
          rows:
            - [true]
        1:
          rows:
            - [true]
  - id: like_udf_3
    desc: escape is '' or null
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    dataProvider:
      - ["like_match", "ilike_match"]
      - ["''"]
    sql: |
      select d[0](col2, 'm_ke', d[1])  as col2 from t1;
    expect:
      columns: ["col2:bool"]
    expectProvider:
      0:
        0:
          rows:
            - [false]
        # 1:
        #   rows:
        #     - [null]
      1:
        0:
          rows:
            - [true]
        # 1:
        #   rows:
        #     - [null]

  - id: like_udf_4
    desc: nullable rules
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
          - [2, 1590115420001, null]
    dataProvider:
      - ["like_match", "ilike_match"]
    sql: |
      select col1, d[0](col2, 'm_ke', '\\')  as col2 from t1;
    expect:
      columns: ["col1:int", "col2:bool"]
      order: col1
    expectProvider:
      0:
        rows:
          - [1, false]
          - [2, null]
      1:
        rows:
          - [1, true]
          - [2, null]
  - id: like_udf_5
    desc: escape character
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "M_ke"]
    dataProvider:
      - ["like_match", "ilike_match"]
    sql: |
      select d[0](col2, 'm&_ke', '&')  as col2 from t1;
    expect:
      columns: ["col2:bool"]
    expectProvider:
      0:
        rows:
          - [false]
      1:
        rows:
          - [true]

  - id: like_udf_const_null_string
    desc: like match null(string)
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    sql: |
      select col1,
      like_match(col2, 'M_\\ke')  as defalt_escape,
      like_match(col2, 'M_\\ke', "\\")  as back_slash_escape,
      like_match(col2, 'M_\\ke', "")  as empty_escape,
      like_match(col2, 'M_\\ke', string(null)) as null_escape,
      like_match(col2, string(null), '%') as null_pattern,
      like_match(string(null), 'm_k', '%')  as null_target from t1;
    expect:
      columns: [ "col1:int", "defalt_escape:bool", "back_slash_escape:bool", "empty_escape:bool", "null_escape:bool",
                 "null_pattern:bool", "null_target:bool" ]
      order: col1
      rows:
        - [1, true, true, false, null, null, null]
  - id: ilike_udf_const_null_string
    desc: ilike match null(string)
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    sql: |
      select col1,
      ilike_match(col2, 'm_\\ke')  as defalt_escape,
      ilike_match(col2, 'm_\\ke', "\\")  as back_slash_escape,
      ilike_match(col2, 'm_\\ke', "")  as empty_escape,
      ilike_match(col2, 'm_\\ke', string(null)) as null_escape,
      ilike_match(col2, string(null), '%') as null_pattern,
      ilike_match(string(null), 'm_k', '%')  as null_target from t1;
    expect:
      columns: [ "col1:int", "defalt_escape:bool", "back_slash_escape:bool", "empty_escape:bool", "null_escape:bool",
                 "null_pattern:bool", "null_target:bool" ]
      order: col1
      rows:
        - [1, true, true, false, null, null, null]

  - id: udf_replace
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "ABCabcabc"]
          - [2, 1590115420001, "ABC"]
          - [3, 1590115420001, NULL]
    sql: |
      select col1,
      replace(col2, "abc", "ABC") as rp1,
      replace(col2, "abca", "A") as rp2,
      replace(col2, "abc", "") as rp3,
      replace(col2, "abc", string(null)) as rp4,
      replace(col2, string(null), "abc") as rp5,
      replace(col2, "abc") as rp6,
      replace(string(NULL), "abc", "abc") as rp7,
      from t1;
    expect:
      columns:
        - col1 int32
        - rp1 string
        - rp2 string
        - rp3 string
        - rp4 string
        - rp5 string
        - rp6 string
        - rp7 string
      order: col1
      data: |
        1, ABCABCABC, ABCAbc, ABC,  NULL, NULL, ABC,  NULL
        2, ABC,       ABC,    ABC,  NULL, NULL, ABC,  NULL
        3, NULL,      NULL,   NULL, NULL, NULL, NULL, NULL

  - id: array_contains
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "ABCabcabc"]
    sql: |
      select
        array_contains([2,2], 2) as c0,
        array_contains([1,2, NULL], 2) as c1,
        array_contains(ARRAY<INT64>[NULL, 1, 2], cast(3 as INT64)) as c2,
        array_contains(ARRAY<double>[], 3.0) as c3,
        array_contains(ARRAY<float>[3.0], cast(3 as float)) as c4,
        array_contains(["a", "b"], "c") as c5,
        array_contains(Array<string>["a", NULL, "b"], "b") as c6,
        array_contains([timestamp(1), NULL, timestamp(1000)], timestamp(100)) as c7,
        array_contains([date('2022-04-04'), NULL, date('2020-10-20')], date('2020-10-20')) as c8,
        array_contains([2,2], cast(NULL as INT)) as c9,
        array_contains(ARRAY<INT16>[2, NULL, 2], cast(NULL as INT16)) as c10,
    expect:
      columns:
        - c0 bool
        - c1 bool
        - c2 bool
        - c3 bool
        - c4 bool
        - c5 bool
        - c6 bool
        - c7 bool
        - c8 bool
        - c9 bool
        - c10 bool
      data: |
        true, true, false, false, true, false, true, false, true, false, true

  - id: isin
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "ABCabcabc"]
    sql: |
      select
        isin(2, [2,2]) as c0,
        isin(cast(3 as int64), ARRAY<INT64>[NULL, 1, 2]) as c1
    expect:
      columns:
        - c0 bool
        - c1 bool
      data: |
        true, false

  - id: array_split
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "ABCabcabc"]
    sql: |
      select
        array_contains(split_array("1,2", ","), '2') as c0,
        array_contains(split_array("1,2", ","), '3') as c1,
    expect:
      columns:
        - c0 bool
        - c1 bool
      data: |
        true, false
  - id: array_join
    mode: request-unsupport
    sql: |
      select
        array_join(["1", "2"], ",") c1,
        array_join(["1", "2"], "") c2,
        array_join(["1", "2"], cast(null as string)) c3,
        array_join(["1", NULL, "4", "5", NULL], "-") c4,
        array_join(array<string>[], ",") as c5
    expect:
      columns:
        - c1 string
        - c2 string
        - c3 string
        - c4 string
        - c5 string
      rows:
        - ["1,2", "12", "12", "1-4-5", ""]
  - id: array_combine
    mode: request-unsupport
    sql: |
      select
        array_join(array_combine("-", ["1", "2"], ["3", "4"]), ",") c0,
    expect:
      columns:
        - c0 string
      rows:
        - ["1-3,1-4,2-3,2-4"]

  - id: array_combine_2
    desc: array_combine casting array to array<string> first
    mode: request-unsupport
    sql: |
      select
        array_join(array_combine("-", [1, 2], [3, 4]), ",") c0,
        array_join(array_combine("-", [1, 2], array<int64>[3], ["5", "6"]), ",") c1,
        array_join(array_combine("|", ["1"], [timestamp(1717171200000), timestamp("2024-06-02 12:00:00")]), ",") c2,
        array_join(array_combine("|", ["1"]), ",") c3,
    expect:
      columns:
        - c0 string
        - c1 string
        - c2 string
        - c3 string
      rows:
        - ["1-3,1-4,2-3,2-4", "1-3-5,1-3-6,2-3-5,2-3-6", "1|2024-06-01 00:00:00,1|2024-06-02 12:00:00", "1"]
  - id: array_combine_3
    desc: null values skipped
    mode: request-unsupport
    sql: |
      select
        array_join(array_combine("-", [1, NULL], [3, 4]), ",") c0,
        array_join(array_combine("-", ARRAY<INT>[NULL], ["9", "8"]), ",") c1,
        array_join(array_combine(string(NULL), ARRAY<INT>[1], ["9", "8"]), ",") c2,
    expect:
      columns:
        - c0 string
        - c1 string
        - c2 string
      rows:
        - ["1-3,1-4", "", "19,18"]
  - id: array_combine_4
    desc: construct array from table
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "foo"]
          - [2, 1590115420001, "bar"]
    sql: |
      select
        col1,
        array_join(array_combine("-", [col1, 10], [col2, "c2"]), ",") c0,
      from t1
    expect:
      columns:
        - col1 int32
        - c0 string
      rows:
        - [1, "1-foo,1-c2,10-foo,10-c2"]
        - [2, "2-bar,2-c2,10-bar,10-c2"]
  - id: array_combine_err1
    mode: request-unsupport
    sql: |
      select
        array_join(array_combine("-"), ",") c0,
    expect:
      success: false
      msg: |
        Fail to resolve expression: array_join(array_combine(-), ,)

  # ================================================================
  # Map data type
  # FIXME: request mode tests disabled, because TestRequestEngineForLastRow cause SEG FAULT
  # ================================================================
  - id: 13
    mode: request-unsupport
    sql: |
      select
        map(1, "2")[1] as e1,
        map("abc", 100)["abc"] as e2,
        map(1, "2", 3, "4")[5] as e3,
        map("c", 99, "d", 101)["d"] as e4,
        map(date("2012-12-12"), "e", date("2013-11-11"), "f", date("2014-10-10"), "g")[date("2013-11-11")] as e5,
        map(timestamp(88), timestamp(1000), timestamp(99), timestamp(2000)) [timestamp(99)] as e6,
        map('1', 2, '3', 4, '5', 6, '7', 8, '9', 10, '11', 12)['9'] as e7,
        map('1', 2, '3', 4, '5', 6, '7', 8, '9', 10, '11', 12)['10'] as e8,
        # first match on duplicate keys
        map('1', 2, '1', 4, '1', 6, '7', 8, '9', 10, '11', 12)['1'] as e9,
        map("c", 99, "d", NULL)["d"] as e10,
    expect:
      columns: ["e1 string", "e2 int", "e3 string", "e4 int", "e5 string", "e6 timestamp", "e7 int", "e8 int", "e9 int", "e10 int"]
      data: |
        2, 100, NULL, 101, f, 2000, 10, NULL, 2, NULL
  - id: 14
    mode: request-unsupport
    sql: |
      select
        array_contains(map_keys(map(1, '2', 3, '4')), 1) as e1,
        array_contains(map_keys(map('1', 2, '3', 4)), '2') as e2,
        array_contains(map_keys(map(timestamp(88), timestamp(1000), timestamp(99), timestamp(2000))) , timestamp(99)) as e3,
    expect:
      columns: ["e1 bool", "e2 bool", "e3 bool"]
      data: |
        true, false, true

  - id: 15
    mode: request-unsupport
    sql: |
      select map(1, 2, 3, 4) as c1

  - id: 16
    mode: request-unsupport
    # this covers basic codec for map data type
    sql: |
      select
        c1[3] as o1, c2[1] as o2, c3['6'] as o3, c4[timestamp(8000)] as o4,
        c5[int64(12)] as o5
      from (select
          map(1, 2, 3, 4) as c1,
          map(1, '2', 3, '4') as c2,
          map('5', timestamp(8000), '6', timestamp(9000)) as c3,
          map(timestamp(8000), date("2012-12-12"), timestamp(9000), date("2014-11-11")) as c4,
          map(int64(10), int16(11), int64(12), int16(13)) as c5
        )
    expect:
      columns: ["o1 int", "o2 string", "o3 timestamp", "o4 date", "o5 int16"]
      data: |
        4, 2, 9000, 2012-12-12, 13

  - id: 17
    mode: request-unsupport
    sql: |
      select c1 + 8 from (select 9 as c1)

  - id: 18
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["col1 int32", "std_ts timestamp", "col2 map<int,string>"]
        indexs: ["index1:col1:std_ts"]
        # insert map values by insert stmts only
        inserts:
          - "insert into t1 values (1, timestamp(1000), map(12, 'abc'))"
          - "insert into t1 values (2, timestamp(1000), map(13, 'abc'))"
    sql: |
      select col1, col2[12] as out from t1;
    expect:
      order: col1
      columns: ["col1 int", "out string"]
      data: |
        1, abc
        2, null

  - id: 19
    mode: request-unsupport
    desc: empty or null map
    sql: |
      select cast (null as map<int, string>)[0] as o1,
        cast (null as map<string, int>) ["12"] as o2,
        cast (map() as map<string, int64>) ["12"] as o3,
        cast (map() as map<int, timestamp>) [7] as o4,
        cast (map(7, "9") as map<int, string>) [7] as o5,
        cast (map() as map<date, timestamp>) [date("2012-12-12")] as o6,
    expect:
      columns: ["o1 string", "o2 int", "o3 int64", "o4 timestamp", "o5 string", "o6 timestamp"]
      data: |
        NULL, NULL, NULL, NULL, 9, NULL
