# last join over where subquery

cases:
  # =========================================================================== #
  # last join (subquery(filter))
  # where subquery is simple project or rename
  # =========================================================================== #
  - id: 0
    desc: LASTJOIN(FILTER<optimized>)
    deployable: true
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1 as c21
      FROM t1 last join (select * from t2 where c1 = 'aa') t2
      on t2.c1 = t1.c1;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, t2.c1 -> c21))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(t1.c1), right_keys=(t2.c1), index_keys=)
          DATA_PROVIDER(request=t1)
          RENAME(name=t2)
            FILTER_BY(condition=, left_keys=(), right_keys=(), index_keys=(aa))
              DATA_PROVIDER(type=Partition, table=t2, index=index1)
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, t2.c1 -> c21))
        REQUEST_JOIN(type=kJoinTypeConcat)
          DATA_PROVIDER(request=t1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, condition=, left_keys=(#5), right_keys=(#9), index_keys=)
            SIMPLE_PROJECT(sources=(#5 -> t1.c1))
              DATA_PROVIDER(request=t1)
            RENAME(name=t2)
              FILTER_BY(condition=, left_keys=(), right_keys=(), index_keys=(aa))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
      order: c1
      data: |
        aa, 2, aa
        bb, 21, NULL
        cc, 41, NULL

  - id: 1
    desc: LASTJOIN(SimpleOPS(FILTER<optimized>))
    deployable: true
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1a as c21
      FROM t1 last join (select c1 as c1a, c2, c4, c4 from t2 where c1 = 'aa') t2
      on t2.c1a = t1.c1;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, t2.c1a -> c21))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(t1.c1), right_keys=(t2.c1a), index_keys=)
          DATA_PROVIDER(request=t1)
          RENAME(name=t2)
            SIMPLE_PROJECT(sources=(c1 -> c1a, c2, c4, c4))
              FILTER_BY(condition=, left_keys=(), right_keys=(), index_keys=(aa))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
      order: c1
      data: |
        aa, 2, aa
        bb, 21, NULL
        cc, 41, NULL

  - id: 2
    desc: LASTJOIN(FILTER<not optimized>)
    # unoptimized filter node should fine in batch request
    deployable: true
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1 as c21
      FROM t1 last join (select * from t2 where c1 != 'aa') t2
      on t2.c1 = t1.c1;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, t2.c1 -> c21))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(request=t1)
          RENAME(name=t2)
            FILTER_BY(condition=c1 != aa, left_keys=, right_keys=, index_keys=)
              DATA_PROVIDER(type=Partition, table=t2, index=index1)
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
      order: c1
      data: |
        aa, 2, NULL
        bb, 21, bb
        cc, 41, NULL

  - id: 3
    desc: LASTJOIN(FILTER<partial optimzied>)
    deployable: true
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1 as c21
      FROM t1 last join (select * from t2 where c1 == 'aa' AND c2 > 0) t2
      on t2.c1 = t1.c1;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, t2.c1 -> c21))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(t1.c1), right_keys=(t2.c1), index_keys=)
          DATA_PROVIDER(request=t1)
          RENAME(name=t2)
            FILTER_BY(condition=c2 > 0, left_keys=(), right_keys=(), index_keys=(aa))
              DATA_PROVIDER(type=Partition, table=t2, index=index1)
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
      order: c1
      data: |
        aa, 2, aa
        bb, 21, NULL
        cc, 41, NULL

  - id: 4
    desc: LASTJOIN(SimpleOps(FILTER<not optimized>))
    # unoptimized filter node should fine in batch request
    deployable: true
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1r as c21
      FROM t1 last join (select c1 as c1r, c2, c3, c4 from t2 where c1 != 'aa') t2
      on t2.c1r = t1.c1;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, t2.c1r -> c21))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(request=t1)
          RENAME(name=t2)
            SIMPLE_PROJECT(sources=(c1 -> c1r, c2, c3, c4))
              FILTER_BY(condition=c1 != aa, left_keys=, right_keys=, index_keys=)
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
      order: c1
      data: |
        aa, 2, NULL
        bb, 21, bb
        cc, 41, NULL

  - id: 5
    desc: |
      LASTJOIN(SimpleOps(FILTER<optimized>)), different index with join, fine to
      online if there is no order by of last join
    deployable: true
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1r as c21,
        t2.c3 as c32
      FROM t1 last join (select c1 as c1r, c2 as c2r, c3, c4 from t2 where c1 == 'aa') t2
      on t1.c2 = t2.c2r;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4", "index2:c2:c4"]
        rows:
          - ["aa",2,8,1590738989000]
          - ["aa",10,12,1590738989100]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, t2.c1r -> c21, t2.c3 -> c32))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(t1.c2), right_keys=(t2.c2r), index_keys=)
          DATA_PROVIDER(request=t1)
          RENAME(name=t2)
            SIMPLE_PROJECT(sources=(c1 -> c1r, c2 -> c2r, c3, c4))
              FILTER_BY(condition=, left_keys=(), right_keys=(), index_keys=(aa))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
        - c32 int64
      order: c1
      data: |
        aa, 2, aa, 8
        bb, 21, NULL, NULL
        cc, 41, NULL, NULL


  - id: 6
    mode: batch-request-unsupport,request-unsupport
    desc: |
      LASTJOIN(SimpleOps(FILTER<optimized>)) hit differnt index with order by,
      can not online because join & filter use different indexs
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1r as c21,
        t2.c3 as c32
      FROM t1 last join (select c1 as c1r, c2 as c2r, c3, c4 as c4r from t2 where c1 == 'aa') t2 order by c4r
      on t1.c2 = t2.c2r;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4", "index2:c2:c4"]
        rows:
          - ["aa",2,8,1590738989000]
          - ["aa",10,12,1590738989100]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
        - c32 int64
      order: c1
      data: |
        aa, 2, aa, 8
        bb, 21, NULL, NULL
        cc, 41, NULL, NULL

  - id: 7
    desc: LASTJOIN(SimpleOps(FILTER<optimized>)) hit same index with order by
    deployable: true
    sql: |
      SELECT
        t1.c1,
        t1.c2,
        t2.c1r as c21,
        t2.c3 as c32
      FROM t1 last join (select c1 as c1r, c2 as c2r, c3, c4 as c4r from t2 where c1 == 'aa') t2 order by c4r
      on t1.c1 = t2.c1r;
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4", "index2:c2:c4"]
        rows:
          - ["aa",2,8,1590738989000]
          - ["aa",2,12,1590738989100]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    request_plan: |
    expect:
      columns:
        - c1 string
        - c2 int
        - c21 string
        - c32 int64
      order: c1
      data: |
        aa, 2, aa, 12
        bb, 21, NULL, NULL
        cc, 41, NULL, NULL

