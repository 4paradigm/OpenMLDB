# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 0
    desc: SELECT ALL
    mode: request
    db: db1
    sql: select * from t1;
    standard_sql: true
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
    expect:
      schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string, std_ts:timestamp
      order: col1
      data: |
        0, 1, 5, 1.1, 11.1, 1, 1, 1590115420000
        0, 2, 5, 2.2, 22.2, 2, 22, 1590115421000
        1, 3, 55, 3.3, 33.3, 1, 333, 1590115422000
        1, 4, 55, 4.4, 44.4, 2, 4444, 1590115423000
        2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000

  - id: 1
    desc: SELECT所有列
    mode: request
    db: db1
    sql: select col0, col1 as id, col2, col3, col4, col5, col6, std_ts from t1;
    standard_sql: true
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
    expect:
      schema: col0:string, id:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string, std_ts:timestamp
      order: id
      data: |
        0, 1, 5, 1.1, 11.1, 1, 1, 1590115420000
        0, 2, 5, 2.2, 22.2, 2, 22, 1590115421000
        1, 3, 55, 3.3, 33.3, 1, 333, 1590115422000
        1, 4, 55, 4.4, 44.4, 2, 4444, 1590115423000
        2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, 1590115424000

  - id: 2
    desc: SELECT简单表达式
    mode: request
    db: db1
    sql: select id, col0, col1+1 as f1, col2*2 as f2 from t1;
    standard_sql: true
    inputs:
      - name: t1
        index: index1:col2
        schema: id:int32, col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        data: |
          1, 0, 3, 55, 3.3, 33.3, 1, 333
          2, 0, 1, 5, 1.1, 11.1, 1, 1
    expect:
      schema: id:int32, col0:string, f1:int32, f2:int32
      data: |
        1, 0, 4, 110
        2, 0, 2, 10
  - id: 3
    desc: SELECT SIMPLE UDF
    mode: request
    db: db1
    sql: |
      SELECT col1 as id, col0, abs(col1) as test_col1, col2 , col6 FROM t1;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1.yaml
    expect:
      schema: id:int32, col0:string, test_col1:int32, col2:int16, col6:string
      order: id
      data: |
        1, 0, 1, 5, 1
        2, 0, 2, 5, 22
        3, 1, 3, 55, 333
        4, 1, 4, 55, 4444
        5, 2, 5, 55, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
  - id: 4-1
    desc: SELECT简单timestamp加减表达式
    mode: request
    db: db1
    sql: |
      select col1 as id, std_ts, std_ts+1000 as inc_sec_ts,
      (1 + std_ts) > cast(1590115422000 as timestamp) as flag from t1;
    standard_sql: false
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
    expect:
      schema: id:int32, std_ts:timestamp, inc_sec_ts:timestamp, flag:bool
      order: id
      data: |
        1, 1590115420000, 1590115421000, false
        2, 1590115421000, 1590115422000, false
        3, 1590115422000, 1590115423000, true
        4, 1590115423000, 1590115424000, true
        5, 1590115424000, 1590115425000, true
  - id: 4-2
    desc: SELECT timestampadd函数
    tags: ["TODO", "@chenjing, support timestampadd"]
    mode: request
    db: db1
    sql: |
      select col1 as id, std_ts, timestampaddd(SECOND, std_ts) as inc_sec_ts,
      timestamp_add(SECOND, 1, std_ts) > timestamp(1590115422000) as flag from t1;
    standard_sql: false
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
    expect:
      schema: id:int32, std_ts:timestamp, inc_sec_ts:timestamp, flag:bool
      order: id
      data: |
        1, 1590115420000, 1590115421000, false
        2, 1590115421000, 1590115422000, false
        3, 1590115422000, 1590115423000, true
        4, 1590115423000, 1590115424000, true
        5, 1590115424000, 1590115425000, true
  - id: 5
    desc: SELECT date列
    mode: request
    db: db1
    sql: select col1 as id, std_ts, std_date from t1;
    standard_sql: true
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1
        data: |
          1, 1590115420001, 2020-05-20
          2, 1590115421001, 2020-05-21
          3, 1590115422001, 2020-05-22

    expect:
      schema: id:int32, std_ts:timestamp, std_date:date
      order: id
      data: |
        1, 1590115420001, 2020-05-20
        2, 1590115421001, 2020-05-21
        3, 1590115422001, 2020-05-22

  - id: 6
    desc: SELECT null列, ts列包含null
    mode: rtidb-unsupport
    db: db1
    sql: select `int16`, `int32`, `int64`, `float`, `double`, `ts`, dt, `string`, id + 1 as newid from t1;
    standard_sql: true
    inputs:
      - name: t1
        schema: id:int32, int16:int16, int32:int32, int64:int64, float:float, double:double,
          ts:timestamp, dt:date, string:string
        indexs: ["index:id"]
        data: |
          1, NULL, NULL, NULL, 1.0, 1.0, 1590115420001, 2020-05-20, x
          2, 1, 1, 1, NULL, NULL, 1590115420002, 2020-05-21, y
          3, 2, 2, 2, 2.0, 2.0, NULL, NULL, z
          4, 3, 3, 3, 3.0, 3.0, 1590115420003, 2020-05-22, NULL
    expect:
      schema: int16:int16, int32:int32, int64:int64, float:float, double:double,
        ts:timestamp, dt:date, string:string, newid:int32
      order: newid
      data: |
        NULL, NULL, NULL, 1.0, 1.0, 1590115420001, 2020-05-20, x, 2
        1, 1, 1, NULL, NULL, 1590115420002, 2020-05-21, y, 3
        2, 2, 2, 2.0, 2.0, NULL, NULL, z, 4
        3, 3, 3, 3.0, 3.0, 1590115420003, 2020-05-22, NULL, 5

  - id: 7
    desc: SELECT多个string列
    db: db1
    sql: |
      SELECT c1, c2, c3, c4, c5, c6, c7, c8, id FROM t1;
    standard_sql: true
    inputs:
      - name: t1
        schema: c1:string, std_ts:int64, c2:string, c3:string, c4:string, id:int32,
          c5:string, c6:string, c7:string, c8:string
        index: index1:id
        data: |
          1, 1, x, y, z, 0, r, s, t, u
          2, 2, NULL, yy, NULL, 1, rr, NULL, NULL, uu
          3, 3, NULL, NULL, NULL, 2, NULL, NULL, NULL, NULL
          4, 4, xx, NULL, zz, 3, NULL, ss, tt, NULL
    expect:
      schema: c1:string, c2:string, c3:string, c4:string,
        c5:string, c6:string, c7:string, c8:string, id:int32
      order: c1
      data: |
        1, x, y, z, r, s, t, u, 0
        2, NULL, yy, NULL, rr, NULL, NULL, uu, 1
        3, NULL, NULL, NULL, NULL, NULL, NULL, NULL, 2
        4, xx, NULL, zz, NULL, ss, tt, NULL, 3

  - id: 8
    desc: SELECT null列
    mode: request
    db: db1
    sql: select `int16`, `int32`, `int64`, `float`, `double`, `ts`, dt, `string`, id + 1 as newid from t1;
    standard_sql: true
    inputs:
      - name: t1
        schema: id:int32, int16:int16, int32:int32, int64:int64, float:float, double:double,
          ts:timestamp, dt:date, string:string
        index: index:id
        data: |
          1, NULL, NULL, NULL, 1.0, 1.0, 1590115420001, 2020-05-20, x
          2, 1, 1, 1, NULL, NULL, 1590115420002, 2020-05-21, y
          3, 2, 2, 2, 2.0, 2.0, 1590115420003, NULL, z
          4, 3, 3, 3, 3.0, 3.0, 1590115420003, 2020-05-22, NULL
    expect:
      schema: int16:int16, int32:int32, int64:int64, float:float, double:double,
        ts:timestamp, dt:date, string:string, newid:int32
      order: newid
      data: |
        NULL, NULL, NULL, 1.0, 1.0, 1590115420001, 2020-05-20, x, 2
        1, 1, 1, NULL, NULL, 1590115420002, 2020-05-21, y, 3
        2, 2, 2, 2.0, 2.0, 1590115420003, NULL, z, 4
        3, 3, 3, 3.0, 3.0, 1590115420003, 2020-05-22, NULL, 5
  - id: between_predicate_1
    desc: between predicate, return true
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1
        data: |
          1, 1590115420001, 2020-05-20
    sql: |
      select 10 between 0 and 20 as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [true]
  - id: between_predicate_2
    desc: between predicate, return false
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1
        data: |
          1, 1590115420001, 2020-05-20
    sql: |
      select 10 between 15 and 20 as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [false]
  - id: between_predicate_3
    desc: between (not) predicate, return true
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1
        data: |
          1, 1590115420001, 2020-05-20
    sql: |
      select 10 not between 0 and 9 as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [true]
  - id: between_predicate_4
    desc: between (not) predicate, return false
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1
        data: |
          1, 1590115420001, 2020-05-20
    sql: |
      select 10 not between 0 and 20 as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [false]
  - id: between_predicate_5
    desc: between predicate where expr1 is NULL, return NULL
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index1:col1:std_ts
        data: |
          1, 1590115420001, 2020-05-20
    sql: |
      select NULL between 0 and 20 as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [NULL]
  - id: between_predicate_6
    desc: between predicate where expr2 is NULL, return NULL
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1
        data: |
          1, 1590115420001, 2020-05-20
    sql: |
      select 10 between NULL and 20 as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [NULL]
  - id: between_predicate_7
    desc: between (not) predicate where expr3 is NULL, return NULL
    inputs:
      - name: t1
        schema: col1:int32, std_ts:timestamp, std_date:date
        index: index2:col1
        data: |
          1, 1590115420001, 2020-05-20
    sql: |
      select 10 not between 0 and NULL as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [NULL]
  - id: in_predicate_normal
    desc: normal in predicate test
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select d[0] d[1] (1, 10) as col1 from t1;
    dataProvider:
      - ["1", "2", "NULL"]
      - ["IN", "NOT IN"]
    expect:
      columns: ["col1:bool"]
    expectProvider:
      0:
        0:
          rows:
            - [true]
        1:
          rows:
            - [false]
      1:
        0:
          rows:
            - [false]
        1:
          rows:
            - [true]
      2:
        0:
          rows:
            - [NULL]
        1:
          rows:
            - [NULL]
  - id: in_predicate_v_null_true
    desc: in_list has NULL but one of the comparison is true, return true
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select 1 in (1, NULL) as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [true]
  - id: in_predicate_v_null_null
    desc: in predicate in_list has NULL and none of the comparisons is true, return NULL
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select 1 in (2, NULL) as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [NULL]
  - id: in_predicate_null_null_null
    desc: in use normal equal operator, NULL in (NULL, ..) is NULL
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select NULL in (1, NULL) as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [NULL]
  - id: in_predicate_type_cast_1
    desc: type conversion, string converted into number
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select 1 in ('1', '2') as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [true]
  - id: in_predicate_type_cast_2
    desc: type conversion, decimal converted into float/double
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select 1 in (1.0, 2.0) as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [true]
  - id: in_predicate_type_cast_3
    desc: type conversion, string not converted into float/double
    tags: ["need-discussion"]
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select '1' in (1.0, 2.0) as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [true]
  - id: in_predicate_type_cast_4
    desc: in_list should be same type
    tags: ["need-discussion"]
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "std_date:date"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, 2020-05-20]
    sql: |
      select 1 in (1.0, '2') as col1 from t1;
    expect:
      columns: ["col1:bool"]
      rows:
        - [true]

  # LIKE Operator
  - id: like_predicate_1
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    sql: |
      select col2 LIKE 'M%' as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [true]
  - id: like_predicate_2
    desc: undercursor(_) match any one character
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    sql: |
      select col2 LIKE 'M_ke' as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [true]
  - id: like_predicate_3
    desc: like is case sensitive
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    sql: |
      select col2 LIKE 'm_ke' as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [false]
  - id: like_predicate_4
    desc: (%) and (_) together
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    sql: |
      select col2 LIKE 'M%_e' as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [true]
  - id: like_predicate_5
    desc: like is exact match
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, "Mike"]
    sql: |
      select col2 LIKE 'Mik' as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [false]
  - id: like_predicate_6
    desc: nullable1, MC:null -> null
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, null]
    sql: |
      select col2 LIKE 'Mike' as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [null]
  - id: like_predicate_7
    desc: nullable2, PC:null -> null
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string", "col3:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, Mike, null]
    sql: |
      select col2 LIKE col3 as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [null]
  - id: like_predicate_8
    desc: like escape, specify the default escape manully
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, Mike]
          - [2, 1590115420001, Mi_e ]
          - [3, 1590115420001, Mi&_e ]
    sql: |
      select col1, col2 LIKE 'Mi_e' ESCAPE '\\' as col2 from t1;
    expect:
      columns: ["col1:int", "col2:bool"]
      order: col1
      rows:
        - [1, true]
        - [2, true]
        - [3, false]
  - id: like_predicate_9
    desc: like escape with &
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, Ace ]
          - [2, 1590115420001, A_e ]
          - [3, 1590115420001, A&_e ]
    sql: |
      select col1, col2 not LIKE 'A&_e' ESCAPE '&' as col2 from t1;
    expect:
      columns: ["col1:int", "col2:bool"]
      order: col1
      rows:
        - [1, true]
        - [2, false]
        - [3, true]
  - id: like_predicate_10
    desc: empty escape disable escaping
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, A_e ]
          - [2, 1590115420001, A&ke ]
          - [3, 1590115420001, A&_e ]
    sql: |
      select col1, col2 LIKE 'A&_e' ESCAPE '' as col2 from t1;
    expect:
      order: col1
      columns: ["col1:int", "col2:bool"]
      rows:
        - [1, false]
        - [2, true]
        - [3, true]
  - id: like_predicate_11
    desc: pattern refer to a column
    inputs:
      - name: t1
        columns: ["col1:int32", "std_ts:timestamp", "col2:string"]
        indexs: ["index1:col1:std_ts"]
        rows:
          - [1, 1590115420001, Mi_e]
    sql: |
      select "Mike" LIKE col2 as col2 from t1;
    expect:
      columns: ["col2:bool"]
      rows:
        - [true]

  - id: combined_index_query_1
    # #1356
    desc: combined index query order
    mode: request-unsupport, batch-request-unsupport
    inputs:
      - columns: ["a string", "b string", "c string"]
        name: t1
        indexs: ["idx:b|a"]
        data: |
          aaa, bbb, ccc
    sql: |
      select * from t1 where a = 'aaa' and b = 'bbb'
    expect:
      columns: ["a string", "b string", "c string"]
      data: |
        aaa, bbb, ccc
  - id: combined_index_query_2
    desc: combined index query order, filter with same order
    mode: request-unsupport, batch-request-unsupport
    inputs:
      - columns: ["a string", "b string", "c string"]
        name: t1
        indexs: ["idx:b|a"]
        data: |
          aaa, bbb, ccc
    sql: |
      select * from t1 where b = 'bbb' and a = 'aaa';
    expect:
      columns: ["a string", "b string", "c string"]
      data: |
        aaa, bbb, ccc
  - id: combined_index_query_3
    desc: combined index query order, fail to optimize because only one of index key matches
    mode: request-unsupport, batch-request-unsupport
    inputs:
      - columns: ["a string", "b string", "c string"]
        name: t1
        indexs: ["idx:b|a"]
        data: |
          aaa, bbb, ccc
    sql: |
      select * from t1 where a = 'aaa' and c = 'ccc'
    expect:
      columns: ["a string", "b string", "c string"]
      data: |
        aaa, bbb, ccc
  - id: combined_index_query_4
    desc: combined index query order, fail to optimize because only one of index key matches
    mode: request-unsupport, batch-request-unsupport
    inputs:
      - columns: ["a string", "b string", "c string"]
        name: t1
        indexs: ["idx:b|a"]
        data: |
          aaa, bbb, ccc
    sql: |
      select * from t1 where a = 'aaa'
    expect:
      columns: ["a string", "b string", "c string"]
      data: |
        aaa, bbb, ccc

  - id: combined_index_query_5
    desc: |
      combined index query order, optimized three key index
    mode: request-unsupport, batch-request-unsupport
    inputs:
      - columns: ["a string", "b string", "c string"]
        name: t1
        indexs: ["idx:b|a|c"]
        data: |
          aaa, bbb, ccc
    sql: |
      select * from t1 where a = 'aaa' and c = 'ccc' and b = 'bbb';
    expect:
      columns: ["a string", "b string", "c string"]
      data: |
        aaa, bbb, ccc

  # =============================================================#
  # 100-105: Output schema correctness for SQL query that contains All('*')
  #   refer issue https://github.com/4paradigm/OpenMLDB/issues/2505
  # =============================================================
  - id: 100
    desc: |
      simple select(*) + agg project
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx:id:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
    sql: |
      select *, count(id) over w as cnt
      from t1
      window w as (
        partition by id order by ts rows between 2 preceding and current row);
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.id, t1.b, t1.ts, cnt))
        REQUEST_JOIN(type=kJoinTypeConcat)
          DATA_PROVIDER(request=t1)
          PROJECT(type=Aggregation)
            REQUEST_UNION(partition_keys=(), orders=(ASC), rows=(ts, 2 PRECEDING, 0 CURRENT), index_keys=(id))
              DATA_PROVIDER(request=t1)
              DATA_PROVIDER(type=Partition, table=t1, index=idx)
    expect:
      columns: ["id int32", "b int32", "ts int64", "cnt int64"]
      order: id
      data: |
          1, 10, 1000, 1
          2, 30, 2000, 1

  - id: 101
    desc: |
      simple select(*) + column ref + agg project
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx:id:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
    sql: |
      select b, *, count(id) over w as cnt
      from t1
      window w as (
        partition by id order by ts rows between 2 preceding and current row);
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(b, t1.id, t1.b, t1.ts, cnt))
        REQUEST_JOIN(type=kJoinTypeConcat)
          SIMPLE_PROJECT(sources=(b, t1.id, t1.b, t1.ts))
            DATA_PROVIDER(request=t1)
          PROJECT(type=Aggregation)
            REQUEST_UNION(partition_keys=(), orders=(ASC), rows=(ts, 2 PRECEDING, 0 CURRENT), index_keys=(id))
              DATA_PROVIDER(request=t1)
              DATA_PROVIDER(type=Partition, table=t1, index=idx)
    expect:
      columns: ["b int32", "id int32", "b int32", "ts int64", "cnt int64"]
      order: id
      data: |
          10, 1, 10, 1000, 1
          30, 2, 30, 2000, 1

  - id: 102
    desc: |
      simple select(*) + agg project * multiple window
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
    sql: |
      select
        id, t1.*, b,
        count(id) over w1 as cnt1,
        count(id) over w2 as cnt2
      from t1
      window w1 as (
        partition by id order by ts rows between 2 preceding and current row),
      w2 as (
        partition by b order by ts rows_range between 2s preceding and current row);
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(id, t1.id, t1.b, t1.ts, b, cnt1, cnt2))
        REQUEST_JOIN(type=kJoinTypeConcat)
          REQUEST_JOIN(type=kJoinTypeConcat)
            SIMPLE_PROJECT(sources=(id, t1.id, t1.b, t1.ts, b))
              DATA_PROVIDER(request=t1)
            PROJECT(type=Aggregation)
              REQUEST_UNION(partition_keys=(), orders=(ASC), rows=(ts, 2 PRECEDING, 0 CURRENT), index_keys=(id))
                DATA_PROVIDER(request=t1)
                DATA_PROVIDER(type=Partition, table=t1, index=idx1)
          PROJECT(type=Aggregation)
            REQUEST_UNION(partition_keys=(), orders=(ASC), range=(ts, 2000 PRECEDING, 0 CURRENT), index_keys=(b))
              DATA_PROVIDER(request=t1)
              DATA_PROVIDER(type=Partition, table=t1, index=idx2)
    expect:
      columns: ["id int32", "id int32", "b int32", "ts int64", "b int32", "cnt1 int64", "cnt2 int64"]
      order: id
      data: |
          1, 1, 10, 1000, 10, 1, 1
          2, 2, 30, 2000, 30, 1, 1

  - id: 103
    desc: |
      simple select(*) + agg project * multiple window
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
    sql: |
      select
        count(id) over w1 as cnt1,
        id, *, b,
        count(id) over w2 as cnt2
      from t1
      window w1 as (
        partition by id order by ts rows between 2 preceding and current row),
      w2 as (
        partition by b order by ts rows_range between 2s preceding and current row);
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(cnt1, id, t1.id, t1.b, t1.ts, b, cnt2))
        REQUEST_JOIN(type=kJoinTypeConcat)
          REQUEST_JOIN(type=kJoinTypeConcat)
            SIMPLE_PROJECT(sources=(id, t1.id, t1.b, t1.ts, b))
              DATA_PROVIDER(request=t1)
            PROJECT(type=Aggregation)
              REQUEST_UNION(partition_keys=(), orders=(ASC), rows=(ts, 2 PRECEDING, 0 CURRENT), index_keys=(id))
                DATA_PROVIDER(request=t1)
                DATA_PROVIDER(type=Partition, table=t1, index=idx1)
          PROJECT(type=Aggregation)
            REQUEST_UNION(partition_keys=(), orders=(ASC), range=(ts, 2000 PRECEDING, 0 CURRENT), index_keys=(b))
              DATA_PROVIDER(request=t1)
              DATA_PROVIDER(type=Partition, table=t1, index=idx2)
    expect:
      columns: ["cnt1 int64", "id int32", "id int32", "b int32", "ts int64", "b int32", "cnt2 int64"]
      order: id
      data: |
          1, 1, 1, 10, 1000, 10, 1
          1, 2, 2, 30, 2000, 30, 1

  - id: 104
    desc: |
      simple select(*) + agg project * multiple window
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
    sql: |
      select
        count(id) over w1 as cnt1,
        id, *,
        count(id) over w2 as cnt2,
        b,
        count(id) over w3 as cnt3
      from t1
      window w1 as (
        partition by id order by ts rows between 2 preceding and current row),
      w2 as (
        partition by b order by ts rows_range between 2s preceding and current row),
      w3 as (
        partition by b order by ts rows_range between 2s preceding and current row exclude current_row);
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(cnt1, id, t1.id, t1.b, t1.ts, cnt2, b, cnt3))
        REQUEST_JOIN(type=kJoinTypeConcat)
          REQUEST_JOIN(type=kJoinTypeConcat)
            REQUEST_JOIN(type=kJoinTypeConcat)
              SIMPLE_PROJECT(sources=(id, t1.id, t1.b, t1.ts, b))
                DATA_PROVIDER(request=t1)
              PROJECT(type=Aggregation)
                REQUEST_UNION(partition_keys=(), orders=(ASC), rows=(ts, 2 PRECEDING, 0 CURRENT), index_keys=(id))
                  DATA_PROVIDER(request=t1)
                  DATA_PROVIDER(type=Partition, table=t1, index=idx1)
            PROJECT(type=Aggregation)
              REQUEST_UNION(partition_keys=(), orders=(ASC), range=(ts, 2000 PRECEDING, 0 CURRENT), index_keys=(b))
                DATA_PROVIDER(request=t1)
                DATA_PROVIDER(type=Partition, table=t1, index=idx2)
          PROJECT(type=Aggregation)
            REQUEST_UNION(EXCLUDE_CURRENT_ROW, partition_keys=(), orders=(ASC), range=(ts, 2000 PRECEDING, 0 CURRENT), index_keys=(b))
              DATA_PROVIDER(request=t1)
              DATA_PROVIDER(type=Partition, table=t1, index=idx2)
    expect:
      columns: ["cnt1 int64", "id int32", "id int32", "b int32", "ts int64",  "cnt2 int64", "b int32", "cnt3 int64"]
      order: id
      data: |
          1, 1, 1, 10, 1000, 1, 10, 0
          1, 2, 2, 30, 2000, 1, 30, 0
  - id: 105
    desc: |
      simple select(*) over last join (multiple input source)
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
      - name: t2
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          3, 10, 1000
          4, 30, 2000
    sql: |
      select * from t1 last join t2 on t1.b = t2.b;
    expect:
      columns: ["id int32", "b int32", "ts int64", "id int32", "b int32", "ts int64"]
      order: id
      data: |
        1, 10, 1000, 3, 10, 1000
        2, 30, 2000, 4, 30, 2000

  - id: 106
    desc: |
      select(t1.*) over last join (multiple input source)
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
      - name: t2
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          3, 10, 1000
          4, 30, 2000
    sql: |
      select t1.* from t1 last join t2 on t1.b = t2.b;
    expect:
      columns: ["id int32", "b int32", "ts int64"]
      order: id
      data: |
        1, 10, 1000
        2, 30, 2000

  - id: 107
    desc: |
      select(t1.*) over last join (multiple input source)
    inputs:
      - name: t1
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          1, 10, 1000
          2, 30, 2000
      - name: t2
        columns: ["id int32", "b int32", "ts int64"]
        indexs: ["idx1:id:ts", "idx2:b:ts"]
        data: |
          3, 10, 1000
          4, 30, 2000
    sql: |
      select t1.* from t1
      last join t2 on t1.b = t2.b
      last join t2 as t3 on t1.b = t3.b
    expect:
      columns: ["id int32", "b int32", "ts int64"]
      order: id
      data: |
        1, 10, 1000
        2, 30, 2000
