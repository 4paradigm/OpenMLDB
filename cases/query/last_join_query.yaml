# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

  ####################################################################################################
  #  LAST JOINs
  #  support modes:
  #  - online request (right source optimized)
  #  - batch request (right source optimized)
  #  - online preview (standalone)
  #  - offline mode
  #  unsupport:
  #  - online preview (in cluster)
  #  - online request (right source not optimized)
  #  - batch request (right source not optimized)
  #
  #  Right source is optimized case:
  #  1. Right source is ANYOP(T2): T2 optimized with a concret index
  #  2. Right source is ANYOP(JOIN(T2, T3)): both T2 and T3 optimized with concret indexs
  ####################################################################################################

cases:
  - id: 0
    desc: LAST JOIN 右表未命中索引
    mode: request-unsupport
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t1.col1 + t2.col1 + 1 as test_col1, t1.col2 as t1_col2, str1 FROM t1
      last join t2 order by t2.col5 on t1.col1=t2.col1 and t1.col5 = t2.col5;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t2
        schema: str0:string, str1:string, col3:float, col4:double, col2:int16, col1:int32, col5:int64
        index: index1:col2:col5
        data: |
          2, EEEEE, 5.5, 55.5, 550, 5, 3
          1, DDDD, 4.4, 44.4, 550, 4, 2
          1, CCC, 3.3, 33.3, 550, 3, 1
          0, BB, 2.2, 22.2, 50, 2, 2
          0, A, 1.1, 11.1, 50, 1, 1
    expect:
      schema: id:int32, t1_col0:string, test_col1:int32, t1_col2:int16, str1:string
      order: id
      data: |
        1, 0, 3, 5, A
        2, 0, 5, 5, BB
        3, 1, 7, 55, CCC
        4, 1, 9, 55, DDDD
        5, 2, 11, 55, EEEEE
  - id: 1
    desc: LAST JOIN 右表成功命中索引
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t1.col1 + t2.col1 + 1 as test_col1, t1.col2 as t1_col2, str1 FROM t1
      last join t2 order by t2.col5 on t1.col1=t2.col1 and t1.col5 = t2.col5;

    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t2
        schema: str0:string, str1:string, col3:float, col4:double, col2:int16, col1:int32, col5:int64
        index: index1:col1:col5
        data: |
          2, EEEEE, 5.5, 55.5, 550, 5, 3
          1, DDDD, 4.4, 44.4, 550, 4, 2
          1, CCC, 3.3, 33.3, 550, 3, 1
          0, BB, 2.2, 22.2, 50, 2, 2
          0, A, 1.1, 11.1, 50, 1, 1
    expect:
      schema: id:int32, t1_col0:string, test_col1:int32, t1_col2:int16, str1:string
      order: id
      data: |
        1, 0, 3, 5, A
        2, 0, 5, 5, BB
        3, 1, 7, 55, CCC
        4, 1, 9, 55, DDDD
        5, 2, 11, 55, EEEEE

  - id: 2
    desc: LAST JOIN 右表成功命中一个索引
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t1.col1 + t2.col1 + 1 as test_col1, t1.col2 as t1_col2, str1 FROM t1
      last join t2 order by t2.col5 on t1.col1=t2.col1 and t1.col5 >= t2.col5;

    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t2
        schema: str0:string, str1:string, col3:float, col4:double, col2:int16, col1:int32, col5:int64
        index: index1:col1:col5
        data: |
          2, EEEEE, 5.5, 55.5, 550, 5, 3
          1, DDDD, 4.4, 44.4, 550, 4, 2
          1, CCC, 3.3, 33.3, 550, 3, 1
          0, BB, 2.2, 22.2, 50, 2, 2
          0, A, 1.1, 11.1, 50, 1, 1
    expect:
      schema: id:int32, t1_col0:string, test_col1:int32, t1_col2:int16, str1:string
      order: id
      data: |
        1, 0, 3, 5, A
        2, 0, 5, 5, BB
        3, 1, 7, 55, CCC
        4, 1, 9, 55, DDDD
        5, 2, 11, 55, EEEEE
  - id: 3
    desc: LAST JOIN 拼表条件包含timestamp列
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t1.col2 as t1_col2, t1.std_ts as t1_std_ts, str1 FROM t1
      last join t2 order by t2.std_ts on t1.col1=t2.col1 and t1.std_ts = t2.std_ts;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
      - name: t2
        schema: str0:string, str1:string,col1:int32, std_ts:timestamp
        index: index1:col1:std_ts
        data: |
          2, EEEEE, 5, 1590115424000
          1, DDDD, 4, 1590115423000
          1, CCC, 3, 1590115422000
          0, BB, 2, 1590115421000
          0, A, 1, 1590115420000
    expect:
      schema: id:int32, t1_col0:string, t1_col2:int16, t1_std_ts:timestamp, str1:string
      order: id
      data: |
        1, 0, 5, 1590115420000, A
        2, 0, 5, 1590115421000, BB
        3, 1, 55, 1590115422000, CCC
        4, 1, 55, 1590115423000, DDDD
        5, 2, 55, 1590115424000, EEEEE
  - id: 4
    desc: LAST JOIN 多张表
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0, t2.c0, t3.column0 FROM t1
      last join t2 order by t2.c5 on t1.col1=t2.c1
      last join t3 order by t3.column5 on t1.col1 = t3.column1;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col5:bigint
        index: index2:col1:col5
        data: |
          A, 1, 1
          B, 2, 2
          C, 3, 3
      - name: t2
        schema: c0:string, c1:int32, c5:int64
        index: index1:c1:c5
        data: |
          O, 1, 1
          P, 2, 2
          Q, 3, 3
          R, 4, 4
          S, 5, 5
      - name: t3
        schema: column0:string, column1:int32, column5:int64
        index: index1:column1:column5
        data: |
          X, 1, 1
          Y, 2, 2
          Z, 3, 3
          U, 4, 4
          V, 5, 5
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.col1 -> id, t1.col0, t2.c0, t3.column0))
        REQUEST_JOIN(type=kJoinTypeConcat)
          REQUEST_JOIN(type=kJoinTypeConcat)
            DATA_PROVIDER(request=t1)
            REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(#5))
              SIMPLE_PROJECT(sources=(#5 -> t1.col1))
                DATA_PROVIDER(request=t1)
              DATA_PROVIDER(type=Partition, table=t2, index=index1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(#5))
            SIMPLE_PROJECT(sources=(#5 -> t1.col1))
              DATA_PROVIDER(request=t1)
            DATA_PROVIDER(type=Partition, table=t3, index=index1)
    expect:
      schema: id:int32, col0:string, c0:string, column0:string
      order: id
      data: |
        1, A, O, X
        2, B, P, Y
        3, C, Q, Z
  - id: 5
    desc: LAST JOIN 拼表条件包含date列
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t1.col2 as t1_col2, t1.std_date as t1_std_date, str1 FROM t1
      last join t2 order by t2.col5 on t1.col2 = t2.col2 and t1.std_date = t2.std_date;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_date.yaml
      - name: t2
        schema: str0:string, str1:string, col1:int32, col2:int16, col5:int64, std_date:date
        index: index1:col2:col5
        data: |
          2, EEEEE, 5, 55, 5, 2020-05-24
          1, DDDD, 4, 55, 4, 2020-05-23
          1, CCC, 3, 55, 3, 2020-05-22
          0, BB, 2, 5, 2, 2020-05-21
          0, A, 1, 5, 1, 2020-05-20
    expect:
      schema: id:int32, t1_col0:string, t1_col2:int16, t1_std_date:date, str1:string
      order: id
      data: |
        1, 0, 5, 2020-05-20, A
        2, 0, 5, 2020-05-21, BB
        3, 1, 55, 2020-05-22, CCC
        4, 1, 55, 2020-05-23, DDDD
        5, 2, 55, 2020-05-24, EEEEE
  - id: 6
    desc: LAST JOIN 命中多个Key取Last Order
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t1.col2 as t1_col2, t1.std_ts as t1_std_ts, t2.std_ts as t2_std_ts, str1 FROM t1
      last join t2 order by t2.std_ts on t1.col1=t2.col1 and t1.std_ts >= t2.std_ts;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
      - name: t2
        schema: str0:string, str1:string,col1:int32, std_ts:timestamp
        index: index1:col1:std_ts
        data: |
          2, GGGGGGG, 5, 1590115428000
          2, FFFFFF, 5, 1590115423900
          2, EEEEE, 5, 1590115427000
          1, DDDD, 4, 1590115423000
          1, CCC, 3, 1590115422000
          0, BB, 2, 1590115421000
          0, A, 1, 1590115420000
    expect:
      schema: id:int32, t1_col0:string, t1_col2:int16, t1_std_ts:timestamp, t2_std_ts:timestamp, str1:string
      order: id
      data: |
        1, 0, 5, 1590115420000, 1590115420000, A
        2, 0, 5, 1590115421000, 1590115421000, BB
        3, 1, 55, 1590115422000, 1590115422000, CCC
        4, 1, 55, 1590115423000, 1590115423000, DDDD
        5, 2, 55, 1590115424000, 1590115423900, FFFFFF

  - id: 7
    desc: LAST JOIN 命中多个Key取Last Order，使用asc order
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t2.std_ts as t2_std_ts FROM t1
      last join t2 order by t2.std_ts asc on t1.col0=t2.col1;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
      - name: t2

        schema: str0:string, str1:string, col1:string, std_ts:timestamp
        index: index1:col1:std_ts
        data: |
          2, GGGGGGG, 0, 1590115428000
          2, FFFFFF, 2, 1590115423900
          2, EEEEEE, 2, 1590115427000
          1, DDDD, 4, 1590115423000
          1, CCC, 3, 1590115422000
          0, BB, 5, 1590115421000
          0, A, 1, 1590115420000
    expect:
      schema: id:int32, t1_col0:string, t2_std_ts:timestamp
      order: id
      data: |
        1, 0, 1590115428000
        2, 0, 1590115428000
        3, 1, 1590115420000
        4, 1, 1590115420000
        5, 2, 1590115427000

  - id: 8
    desc: LAST JOIN拼到空行
    db: db1
    sql: |
      SELECT
        t1.col1 as id, t1.std_ts as t1_std_ts, t2.std_ts as t2_std_ts,
        col_short, col_int, col_long, col_float, col_double, col_date, col_str
      FROM t1
      last join t2 order by t2.std_ts on t1.col1=t2.col2 and t1.std_ts >= t2.std_ts;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
      - name: t2
        schema: col_short:int16, col_int:int32, col_long:int64,
                col_float:float, col_double:double, col_date:date, col_str:string,
                col2:int32, std_ts:timestamp
        index: index1:col2:std_ts
        data: |
          1, 1, 1, 1.0, 1.0, 2020-05-20, Y, 2, 1590115422000
          0, 0, 0, 0.0, 0.0, 2020-05-19, X, 1, 1590115420000
    expect:
      schema: id:int32, t1_std_ts:timestamp, t2_std_ts:timestamp, 
              col_short:int16, col_int:int32, col_long:int64,
              col_float:float, col_double:double, col_date:date, col_str:string
      order: id
      data: |
        1, 1590115420000, 1590115420000, 0, 0, 0, 0.0, 0.0, 2020-05-19, X
        2, 1590115421000, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
        3, 1590115422000, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
        4, 1590115423000, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
        5, 1590115424000, NULL, NULL, NULL, NULL, NULL, NULL, NULL, NULL
  - id: 9
    desc: LAST JOIN 命中多个Key取Last Order，使用desc order
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col0 as t1_col0, t2.std_ts as t2_std_ts FROM t1
      last join t2 order by t2.std_ts desc on t1.col0=t2.col1;
    inputs:
      - name: t1
        resource: cases/resource/simple_t1_ts.yaml
      - name: t2
        schema: str0:string, str1:string, col1:string, std_ts:timestamp
        index: index1:col1:std_ts
        data: |
          2, GGGGGGG, 0, 1590115428000
          2, FFFFFF, 2, 1590115423900
          2, EEEEEE, 2, 1590115427000
          1, DDDD, 4, 1590115423000
          1, CCC, 3, 1590115422000
          0, BB, 5, 1590115421000
          0, A, 1, 1590115420000
    expect:
      schema: id:int32, t1_col0:string, t2_std_ts:timestamp
      order: id
      data: |
        1, 0, 1590115428000
        2, 0, 1590115428000
        3, 1, 1590115420000
        4, 1, 1590115420000
        5, 2, 1590115423900

  - id: 10
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,3,1590738989000]
          - ["bb",21,31,1590738990000]
          - ["cc",41,51,1590738991000]
      - name: t2
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select {0}.c1,{0}.c2,{1}.c3,{1}.c4 from {0} last join {1} ORDER BY {1}.c4 on {0}.c1={1}.c1;
    expect:
      order: c1
      columns: ["c1 string", "c2 int", "c3 bigint", "c4 timestamp"]
      rows:
        - ["aa",2,13,1590738989000]
        - ["bb",21,131,1590738990000]
        - ["cc",41,null,null]

  ####################################################################################################
  #  LAZY LAST JOINs
  ####################################################################################################
  - id: 11
    # t1------>(t2------->t3)
    # │         └-(t3.c1)-┘
    # └-(t2.c1)-┘
    # Easiest path, t1 finally joins t2's column
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r
      from t1 last join (
        select t2.*, t3.c1 as c1r, t3.c2 as c2r
        from t2 last join t3 on t2.c1 = t3.c1
      ) tx
      on t1.c1 = tx.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(request=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
              REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        REQUEST_JOIN(type=kJoinTypeConcat)
          DATA_PROVIDER(request=t1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(#4))
            SIMPLE_PROJECT(sources=(#4 -> t1.c1))
              DATA_PROVIDER(request=t1)
            RENAME(name=tx)
              SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
                REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  DATA_PROVIDER(type=Partition, table=t3, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
      data: |
        aa, 2, aa, aa, 2
        bb, 3, bb, NULL, NULL
        cc, 4, NULL, NULL, NULL
  - id: 12
    # t1------>(t2------->t3)
    # │         └-(t3.c1)-┘
    # └--(t2.c1)----------┘
    desc: unsupport join on t3 in request and batch(clusterd)
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1x string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1x:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r
      from t1 last join (
        select t2.*, t3.c1x as c1r, t3.c2 as c2r
        from t2 last join t3 on t2.c1 = t3.c1x
      ) tx
      on t1.c1 = tx.c1r
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        JOIN(type=LastJoin, condition=, left_keys=(t1.c1), right_keys=(tx.c1r), index_keys=)
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1x -> c1r, t3.c2 -> c2r))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(table=t2)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
      data: |
        aa, 2, aa, aa, 2
        bb, 3, NULL, NULL, NULL
        cc, 4, NULL, NULL, NULL
  - id: 13
    # t1------>(t2------->t3)
    # │         └-(t3.c1)-┘
    # └-(t2.c1)-----------┘
    desc: t2 un-optimized, t2 & t3 has the same schema
    # the case checks if optimizer can distinct same column name from two tables
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r
      from t1 last join (
        select t2.*, t3.c1 as c1r, t3.c2 as c2r
        from t2 last join t3 on t2.c1 = t3.c1
      ) tx
      on t1.c1 = tx.c1r
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        JOIN(type=LastJoin, condition=, left_keys=(t1.c1), right_keys=(tx.c1r), index_keys=)
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(table=t2)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
      data: |
        aa, 2, aa, aa, 2
        bb, 3, NULL, NULL, NULL
        cc, 4, NULL, NULL, NULL
  - id: 14
    # t1------>(t2------->t3)
    # │         └-(t3.c1)-┘
    # └-(t2.c1)-┘
    desc: t2 un-optimized due to no equal expr
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r
      from t1 last join (
        select t2.*, t3.c1 as c1r, t3.c2 as c2r
        from t2 last join t3 on t2.c1 = t3.c1
      ) tx
      on t1.c1 != tx.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        JOIN(type=LastJoin, condition=t1.c1 != tx.c1, left_keys=, right_keys=, index_keys=)
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(table=t2)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
      data: |
        aa, 2, dd, dd, 41
        bb, 3, dd, dd, 41
        cc, 4, dd, dd, 41
  - id: 15
    # t1------>(t2------->t3)
    # │         └-(t3.c1)-┘
    # └-(t2.c1)-┘
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r
      from t1 last join (
        select t2.*, t3.c1 as c1r, t3.c2 as c2r
        from t2 last join t3 on t2.c1 = t3.c1
      ) tx
      order by tx.c4
      on t1.c1 = tx.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        JOIN(type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        REQUEST_JOIN(type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(request=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
              REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        REQUEST_JOIN(type=kJoinTypeConcat)
          DATA_PROVIDER(request=t1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(#4))
            SIMPLE_PROJECT(sources=(#4 -> t1.c1))
              DATA_PROVIDER(request=t1)
            RENAME(name=tx)
              SIMPLE_PROJECT(sources=(t2.c1, t2.c4, t3.c1 -> c1r, t3.c2 -> c2r))
                REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  DATA_PROVIDER(type=Partition, table=t3, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
      data: |
        aa, 2, aa, aa, 2
        bb, 3, bb, NULL, NULL
        cc, 4, NULL, NULL, NULL
  - id: 16
    # t1------>(t2------->t3)
    # │         └-(t3.c1)-┘
    # └-(t2.c1)-┘
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r
      from t1 last join (
        select t2.c1, t2.c4 as c4l, t3.c1 as c1r, t3.c2 as c2r
        from t2 last join t3 on t2.c1 = t3.c1
      ) tx
      order by tx.c4l
      on t1.c1 = tx.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        JOIN(type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        REQUEST_JOIN(type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(request=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r))
              REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                DATA_PROVIDER(type=Partition, table=t3, index=index1)
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r))
        REQUEST_JOIN(type=kJoinTypeConcat)
          DATA_PROVIDER(request=t1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(#4))
            SIMPLE_PROJECT(sources=(#4 -> t1.c1))
              DATA_PROVIDER(request=t1)
            RENAME(name=tx)
              SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r))
                REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  DATA_PROVIDER(type=Partition, table=t3, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
      data: |
        aa, 2, aa, aa, 2
        bb, 3, bb, NULL, NULL
        cc, 4, NULL, NULL, NULL
  - id: 17
    # t1------>(t2------->(t3-------t4)
    # │         │          └-(t4.c1)-┘
    # │         └-(t3.c1)--┘
    # └-(t2.c1)-┘
    desc: multiple lazy last join
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
      - name: t4
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r, c1rr
      from t1 last join (
        select t2.c1, t2.c4 as c4l, t3.c1 as c1r, t3.c2 as c2r, t3.c1rr
        from t2 last join (
          select t3.*, t4.c1 as c1rr
          from t3 last join t4
          on t3.c1 = t4.c1
        ) t3
        on t2.c1 = t3.c1
      ) tx
      order by tx.c4l
      on t1.c1 = tx.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, c1rr))
        JOIN(type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r, t3.c1rr))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                RENAME(name=t3)
                  SIMPLE_PROJECT(sources=(t3.c1, t3.c2, t3.c3, t3.c4, t4.c1 -> c1rr))
                    JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t3.c1))
                      DATA_PROVIDER(type=Partition, table=t3, index=index1)
                      DATA_PROVIDER(type=Partition, table=t4, index=index1)
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, c1rr))
        REQUEST_JOIN(type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(request=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r, t3.c1rr))
              REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                RENAME(name=t3)
                  SIMPLE_PROJECT(sources=(t3.c1, t3.c2, t3.c3, t3.c4, t4.c1 -> c1rr))
                    REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t3.c1))
                      DATA_PROVIDER(type=Partition, table=t3, index=index1)
                      DATA_PROVIDER(type=Partition, table=t4, index=index1)
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, c1rr))
        REQUEST_JOIN(type=kJoinTypeConcat)
          DATA_PROVIDER(request=t1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(#4))
            SIMPLE_PROJECT(sources=(#4 -> t1.c1))
              DATA_PROVIDER(request=t1)
            RENAME(name=tx)
              SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r, t3.c1rr))
                REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  RENAME(name=t3)
                    SIMPLE_PROJECT(sources=(t3.c1, t3.c2, t3.c3, t3.c4, t4.c1 -> c1rr))
                      REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t3.c1))
                        DATA_PROVIDER(type=Partition, table=t3, index=index1)
                        DATA_PROVIDER(type=Partition, table=t4, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
        - c1rr string
      data: |
        aa, 2, aa, aa, 2, aa
        bb, 3, bb, NULL, NULL, NULL
        cc, 4, NULL, NULL, NULL, NULL
  - id: 18
    # t1------>(t2------->(t3-------t4)
    # │         │          └-(t4.c1)-┘
    # │         └-(t3.c1)--┘
    # └-(t2.c1)-┘
    mode: request-unsupport
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
      - name: t4
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r, c1rr
      from t1 last join (
        select t2.c1, t2.c4 as c4l, t3.c1 as c1r, t3.c2 as c2r, t3.c1rr
        from t2 last join (
          select t3.*, t4.c1 as c1rr
          from t3 last join t4
          on t3.c1 = t4.c1
        ) t3
        on t2.c1 = t3.c1rr
      ) tx
      order by tx.c4l
      on t1.c1 = tx.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, c1rr))
        JOIN(type=LastJoin, right_sort=(ASC), condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r, t3.c1rr))
              JOIN(type=LastJoin, condition=, left_keys=(t2.c1), right_keys=(t3.c1rr), index_keys=)
                DATA_PROVIDER(type=Partition, table=t2, index=index1)
                RENAME(name=t3)
                  SIMPLE_PROJECT(sources=(t3.c1, t3.c2, t3.c3, t3.c4, t4.c1 -> c1rr))
                    JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t3.c1))
                      DATA_PROVIDER(table=t3)
                      DATA_PROVIDER(type=Partition, table=t4, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
        - c1rr string
      data: |
        aa, 2, aa, aa, 2, aa
        bb, 3, bb, NULL, NULL, NULL
        cc, 4, NULL, NULL, NULL, NULL
  - id: 19
    # t1------>(t2------->(t3-------t4)
    # │         └-(t3.c1)--┘        │
    # │             └--(t4.c1)------┘
    # └-(t2.c1)-┘
    desc: nested last join
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
      - name: t4
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["bb",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r, c1rr
      from t1 last join (
        select t2.c1, t2.c4 as c4l, t3.c1 as c1r, t3.c2 as c2r, t4.c1 as c1rr
        from t2 last join t3
        on t2.c1 = t3.c1
        last join t4
        on t2.c1 = t4.c1
      ) tx
      on t1.c1 = tx.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, c1rr))
        JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(table=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r, t4.c1 -> c1rr))
              JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  DATA_PROVIDER(type=Partition, table=t3, index=index1)
                DATA_PROVIDER(type=Partition, table=t4, index=index1)
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, c1rr))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
          DATA_PROVIDER(request=t1)
          RENAME(name=tx)
            SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r, t4.c1 -> c1rr))
              REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  DATA_PROVIDER(type=Partition, table=t3, index=index1)
                DATA_PROVIDER(type=Partition, table=t4, index=index1)
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, c1rr))
        REQUEST_JOIN(type=kJoinTypeConcat)
          DATA_PROVIDER(request=t1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(#4))
            SIMPLE_PROJECT(sources=(#4 -> t1.c1))
              DATA_PROVIDER(request=t1)
            RENAME(name=tx)
              SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r, t4.c1 -> c1rr))
                REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                    DATA_PROVIDER(type=Partition, table=t2, index=index1)
                    DATA_PROVIDER(type=Partition, table=t3, index=index1)
                  DATA_PROVIDER(type=Partition, table=t4, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
        - c1rr string
      data: |
        aa, 2, aa, aa, 2, aa
        bb, 3, bb, NULL, NULL, bb
        cc, 4, NULL, NULL, NULL, NULL
  - id: 20
    # t1------>(t2------->(t3-------t4)
    # │         └-(t3.c1)--┘        │
    # └-(t2.c1)----┘                │
    #     └-------------------------┘
    desc: nested last join
    inputs:
      - name: t1
        columns: ["c1 string","c2 int","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,1590738989000]
          - ["bb",3,1590738990000]
          - ["cc",4,1590738991000]
      - name: t2
        columns: ["c1 string","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",1590738989000]
          - ["bb",1590738990000]
          - ["dd",1590738991000]
      - name: t3
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
      - name: t4
        columns: ["c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: ["index1:c1:c4"]
        rows:
          - ["aa",2,13,1590738989000]
          - ["cc",21,131,1590738990000]
          - ["dd",41,151,1590738991000]
    sql: |
      select t1.c1, t1.c2, tx.c1 as c1l, c1r, c2r, t4.c1 as c1rr
      from t1 last join (
        select t2.c1, t2.c4 as c4l, t3.c1 as c1r, t3.c2 as c2r
        from t2 last join t3
        on t2.c1 = t3.c1
      ) tx
      on t1.c1 = tx.c1
      last join t4
      on tx.c1 = t4.c1
    batch_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, t4.c1 -> c1rr))
        JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(tx.c1))
          JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
            DATA_PROVIDER(table=t1)
            RENAME(name=tx)
              SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r))
                JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  DATA_PROVIDER(type=Partition, table=t3, index=index1)
          DATA_PROVIDER(type=Partition, table=t4, index=index1)
    request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, t4.c1 -> c1rr))
        REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(tx.c1))
          REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t1.c1))
            DATA_PROVIDER(request=t1)
            RENAME(name=tx)
              SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r))
                REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                  DATA_PROVIDER(type=Partition, table=t2, index=index1)
                  DATA_PROVIDER(type=Partition, table=t3, index=index1)
          DATA_PROVIDER(type=Partition, table=t4, index=index1)
    cluster_request_plan: |
      SIMPLE_PROJECT(sources=(t1.c1, t1.c2, tx.c1 -> c1l, c1r, c2r, t4.c1 -> c1rr))
        REQUEST_JOIN(type=kJoinTypeConcat)
          REQUEST_JOIN(type=kJoinTypeConcat)
            DATA_PROVIDER(request=t1)
            REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(#4))
              SIMPLE_PROJECT(sources=(#4 -> t1.c1))
                DATA_PROVIDER(request=t1)
              RENAME(name=tx)
                SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r))
                  REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                    DATA_PROVIDER(type=Partition, table=t2, index=index1)
                    DATA_PROVIDER(type=Partition, table=t3, index=index1)
          REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(#123))
            SIMPLE_PROJECT(sources=(#123 -> tx.c1))
              REQUEST_JOIN(OUTPUT_RIGHT_ONLY, type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(#4))
                SIMPLE_PROJECT(sources=(#4 -> t1.c1))
                  DATA_PROVIDER(request=t1)
                RENAME(name=tx)
                  SIMPLE_PROJECT(sources=(t2.c1, t2.c4 -> c4l, t3.c1 -> c1r, t3.c2 -> c2r))
                    REQUEST_JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t2.c1))
                      DATA_PROVIDER(type=Partition, table=t2, index=index1)
                      DATA_PROVIDER(type=Partition, table=t3, index=index1)
            DATA_PROVIDER(type=Partition, table=t4, index=index1)
    expect:
      order: c1
      columns:
        - c1 string
        - c2 int
        - c1l string
        - c1r string
        - c2r int
        - c1rr string
      data: |
        aa, 2, aa, aa, 2, aa
        bb, 3, bb, NULL, NULL, NULL
        cc, 4, NULL, NULL, NULL, NULL
