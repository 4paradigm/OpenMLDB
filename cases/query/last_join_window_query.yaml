# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 0
    desc: LAST JOIN Window, Join未命中索引
    mode: rtidb-unsupport
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col2 as t1_col2, t1.col5 as t1_col5,
      sum(t1.col1) OVER w1 as w1_col1_sum, sum(t1.col3) OVER w1 as w1_col3_sum,
      sum(t2.col4) OVER w1 as w1_t2_col4_sum, sum(t2.col2) OVER w1 as w1_t2_col2_sum,
      sum(t1.col5) OVER w1 as w1_col5_sum,
      str1 as t2_str1 FROM t1
      last join t2 order by t2.col5 on t1.col1=t2.col1 and t1.col5 = t2.col5
      WINDOW w1 AS (PARTITION BY t1.col2 ORDER BY t1.col5 ROWS_RANGE BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t2
        schema: str0:string, str1:string, col3:float, col4:double, col2:int16, col1:int32, col5:int64
        index: index1:col2:col5
        data: |
          2, EEEEE, 5.5, 550.5, 550, 5, 3
          1, DDDD, 4.4, 440.4, 550, 4, 2
          1, CCC, 3.3, 330.3, 550, 3, 1
          0, BB, 2.2, 220.2, 50, 2, 2
          0, A, 1.1, 110.1, 50, 1, 1
    expect:
      schema: id:int32, t1_col2:int16, t1_col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w1_t2_col4_sum:double, w1_t2_col2_sum:int16, w1_col5_sum:int64, t2_str1:string
      order: id
      data: |
        1, 5, 1, 1, 1.1, 110.1, 50, 1, A
        2, 5, 2, 3, 3.3, 330.3, 100, 3, BB
        3, 55, 1, 3, 3.3, 330.3, 550, 1, CCC
        4, 55, 2, 7, 7.7, 770.7, 1100, 3, DDDD
        5, 55, 3, 12, 13.2, 1321.2, 1650, 6, EEEEE
  - id: 1
    desc: LAST JOIN Window, Join成功命中索引
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col2 as t1_col2, t1.col5 as t1_col5,
      sum(t1.col1) OVER w1 as w1_col1_sum, sum(t1.col3) OVER w1 as w1_col3_sum,
      sum(t2.col4) OVER w1 as w1_t2_col4_sum, sum(t2.col2) OVER w1 as w1_t2_col2_sum,
      sum(t1.col5) OVER w1 as w1_col5_sum,
      str1 as t2_str1 FROM t1
      last join t2 order by t2.col5 on t1.col1=t2.col1 and t1.col5 = t2.col5
      WINDOW w1 AS (PARTITION BY t1.col2 ORDER BY t1.col5 ROWS_RANGE BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:int64, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t2
        schema: str0:string, str1:string, col3:float, col4:double, col2:int16, col1:int32, col5:int64
        index: index1:col1:col5
        data: |
          2, EEEEE, 5.5, 550.5, 550, 5, 3
          1, DDDD, 4.4, 440.4, 550, 4, 2
          1, CCC, 3.3, 330.3, 550, 3, 1
          0, BB, 2.2, 220.2, 50, 2, 2
          0, A, 1.1, 110.1, 50, 1, 1
    expect:
      schema: id:int32, t1_col2:int16, t1_col5:int64, w1_col1_sum:int32, w1_col3_sum:float, w1_t2_col4_sum:double, w1_t2_col2_sum:int16, w1_col5_sum:int64, t2_str1:string
      order: id
      data: |
        1, 5, 1, 1, 1.1, 110.1, 50, 1, A
        2, 5, 2, 3, 3.3, 330.3, 100, 3, BB
        3, 55, 1, 3, 3.3, 330.3, 550, 1, CCC
        4, 55, 2, 7, 7.7, 770.7, 1100, 3, DDDD
        5, 55, 3, 12, 13.2, 1321.2, 1650, 6, EEEEE
  - id: 2
    desc: LAST JOIN Window, Join成功命中索引, 索引为timestamp
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col2 as t1_col2, t1.col5 as t1_col5, sum(t1.col5) OVER w1 as w1_col5_sum
      FROM t1 last join t2 order by t2.col5 on t1.col1=t2.col1 and t1.col5 = t2.col5
      WINDOW w1 AS (PARTITION BY t1.col2 ORDER BY t1.col5 ROWS_RANGE BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:timestamp, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1, 1
          0, 2, 5, 2.2, 22.2, 2, 22
          1, 3, 55, 3.3, 33.3, 1, 333
          1, 4, 55, 4.4, 44.4, 2, 4444
          2, 5, 55, 5.5, 55.5, 3, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t2
        schema: str0:string, str1:string, col3:float, col4:double, col2:int16, col1:int32, col5:timestamp
        index: index1:col1:col5
        data: |
          2, EEEEE, 5.5, 550.5, 550, 5, 3
          1, DDDD, 4.4, 440.4, 550, 4, 2
          1, CCC, 3.3, 330.3, 550, 3, 1
          0, BB, 2.2, 220.2, 50, 2, 2
          0, A, 1.1, 110.1, 50, 1, 1
    expect:
      schema: id:int32, t1_col2:i16, t1_col5:timestamp, w1_col5_sum:timestamp
      order: id
      data: |
        1, 5, 1, 1
        2, 5, 2, 3
        3, 55, 1, 1
        4, 55, 2, 3
        5, 55, 3, 6
  - id: 3
    desc: LAST JOIN Window, Join成功命中索引, join条件匹配多行, 取Last Order
    db: db1
    sql: |
      SELECT t1.col1 as id, t1.col2 as t1_col2, t1.col5 as t1_col5, t2.col5 as t2_col5, str1, sum(t1.col1) OVER w1 as w1_col1_sum
      FROM t1 last join t2 order by t2.col5 on t1.col1=t2.col1 and t1.col5 >= t2.col5
      WINDOW w1 AS (PARTITION BY t1.col2 ORDER BY t1.col5 ROWS_RANGE BETWEEN 3 PRECEDING AND CURRENT ROW) limit 10;
    inputs:
      - name: t1
        schema: col0:string, col1:int32, col2:int16, col3:float, col4:double, col5:timestamp, col6:string
        index: index2:col2:col5
        data: |
          0, 1, 5, 1.1, 11.1, 1590115420001, 1
          0, 2, 5, 2.2, 22.2, 1590115420002, 22
          1, 3, 55, 3.3, 33.3, 1590115420001, 333
          1, 4, 55, 4.4, 44.4, 1590115420002, 4444
          2, 5, 55, 5.5, 55.5, 1590115420003, aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
      - name: t2
        schema: str0:string, str1:string, col3:float, col4:double, col2:int16, col1:int32, col5:timestamp
        index: index1:col1:col5
        data: |
          2, GGGGGGG, 5.5, 550.5, 550, 5, 1590115420004
          2, FFFFFF, 5.5, 550.5, 550, 5, 1590115420002
          2, EEEEE, 5.5, 550.5, 550, 5, 1590115420001
          1, DDDD, 4.4, 440.4, 550, 4, 1590115420002
          1, CCC, 3.3, 330.3, 550, 3, 1590115420001
          0, BB, 2.2, 220.2, 50, 2, 1590115420002
          0, A, 1.1, 110.1, 50, 1, 1590115420001
    expect:
      schema: id:int32, t1_col2:i16, t1_col5:timestamp, t2_col5:timestamp, str1:string, w1_col1_sum:int32
      order: id
      data: |
        1, 5, 1590115420001, 1590115420001, A, 1
        2, 5, 1590115420002, 1590115420002, BB, 3
        3, 55, 1590115420001, 1590115420001, CCC, 3
        4, 55, 1590115420002, 1590115420002, DDDD, 7
        5, 55, 1590115420003, 1590115420002, FFFFFF, 12

  - id: 4
    desc: |
      window with a last join subquery
    inputs:
      - name: actions
        columns:
          - userId int
          - itemId int
          - actionTime timestamp
        indexs:
          - index2:itemId:actionTime
        data: |
          1, 1, 1000
          2, 2, 2000
          3, 3, 3000
          4, 3, 4000

      - name: items
        columns:
          - id int
          - price float
          - tm timestamp
        indexs:
          - idx:id:tm
        data: |
          1, 99,  1000
          1, 599, 4000
          2, 199, 3000
          3, 399, 5000
    # userid, itemid, actionTime, id, price, tm
    #    1,     1,     1000,       1, 599,   4000
    #    2,     2,     2000,       2, 199,   3000
    #    3,     3,     3000,       3, 399,   5000
    #    4,     3,     4000,       3, 399,   5000
    sql: |
      select
       userId,
        itemId,
        count(itemId) over w1 as count_1,
        sum(price) over w1 as total,
        actionTime
      from (
        select * from actions
        last join items order by tm
        on actions.itemId = items.id and actionTime <= tm
      ) window w1 as (
        partition by itemId
        order by actionTime
        rows_range between 3000 preceding and current row
      );
    request_plan: |
      PROJECT(type=Aggregation)
        SIMPLE_PROJECT(sources=(actions.userId, actions.itemId, actions.actionTime, items.id, items.price, items.tm))
          JOIN(type=LastJoin, right_sort=(ASC), condition=actionTime <= tm, left_keys=(), right_keys=(), index_keys=(actions.itemId))
            REQUEST_UNION(partition_keys=(), orders=(ASC), range=(actionTime, 3000 PRECEDING, 0 CURRENT), index_keys=(itemId))
              DATA_PROVIDER(request=actions)
              DATA_PROVIDER(type=Partition, table=actions, index=index2)
            DATA_PROVIDER(type=Partition, table=items, index=idx)
    expect:
      order: userId
      columns:
        - userId int
        - itemId int
        - count_1 int64
        - total float
        - actionTime timestamp
      data: |
        1, 1, 1, 599, 1000
        2, 2, 1, 199, 2000
        3, 3, 1, 399, 3000
        4, 3, 2, 798, 4000

  - id: 5
    desc: window over subquery(t1 last join t2)
    inputs:
      -
        name: t0
        columns : ["id int","c1 string","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date"]
        indexs: ["index1:c1:c7"]
        rows:
          - [1,"aa",2,30,1.1,2.1,1590738990000,"2020-05-01"]
          - [2,"aa",2,30,1.1,2.1,1590738991000,"2020-05-01"]
          - [3,"bb",2,31,1.2,2.2,1590738991000,"2020-05-02"]
          - [4,"cc",2,32,1.3,2.3,1590738992000,"2020-05-03"]
      -
        name: t1
        columns: ["id int","c1 string","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date"]
        indexs: ["index1:c1:c7","index2:c3:c7"]
        rows:
          - [1,"aa",20,30,1.1,2.1,1606755660000,"2020-05-01"]
          - [2,"cc",21,32,1.1,2.1,1606755780000,"2020-05-01"]
    sql: |
      select
        idx, c1, c3l, c3r,
        sum(c3l) OVER w1 as suma,
        min(c3r) OVER w1 as sumb,
      from (
        select
          {0}.c3 as c3l,
          {0}.id as idx,
          {0}.c1 as c1,
          {1}.c3 as c3r,
          {0}.c7 as c7
        from t0 last join t1 on t0.c1=t1.c1
      )
      WINDOW w1 AS (
        PARTITION BY c1 ORDER BY c7 ROWS_RANGE BETWEEN 10s PRECEDING AND CURRENT ROW);
    request_plan: |
      PROJECT(type=Aggregation)
        SIMPLE_PROJECT(sources=(t0.c3 -> c3l, t0.id -> idx, t0.c1, t1.c3 -> c3r, t0.c7))
          JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t0.c1))
            REQUEST_UNION(partition_keys=(), orders=(ASC), range=(c7, 10000 PRECEDING, 0 CURRENT), index_keys=(c1))
              DATA_PROVIDER(request=t0)
              DATA_PROVIDER(type=Partition, table=t0, index=index1)
            DATA_PROVIDER(type=Partition, table=t1, index=index1)
    expect:
      order: idx
      columns:
        - idx int
        - c1 string
        - c3l int
        - c3r int
        - suma int
        - sumb int
      rows:
        - [1,"aa", 2, 20,   2, 20 ]
        - [2,"aa", 2, 20,   4, 20 ]
        - [3,"bb", 2, null, 2, NULL]
        - [4,"cc", 2, 21,   2, 21]

  - id: 6
    desc: window over subquery(t1 last join t2), aliasing window def as well
    inputs:
      -
        name: t0
        columns : ["id int","c1 string","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date"]
        indexs: ["index1:c1:c7"]
        rows:
          - [1,"aa",2,30,1.1,2.1,1590738990000,"2020-05-01"]
          - [2,"aa",2,30,1.1,2.1,1590738991000,"2020-05-01"]
          - [3,"bb",2,31,1.2,2.2,1590738991000,"2020-05-02"]
          - [4,"cc",2,32,1.3,2.3,1590738992000,"2020-05-03"]
      -
        name: t1
        columns: ["id int","c1 string","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date"]
        indexs: ["index1:c1:c7","index2:c3:c7"]
        rows:
          - [1,"aa",20,30,1.1,2.1,1606755660000,"2020-05-01"]
          - [2,"cc",21,32,1.1,2.1,1606755780000,"2020-05-01"]
    sql: |
      select
        idx, c1a as c1, c3l, c3r,
        sum(c3l) OVER w1 as suma,
        min(c3r) OVER w1 as sumb,
      from (
        select
          t0.c3 as c3l,
          t0.id as idx,
          t1.c3 as c3r,
          t0.c1 as c1a,
          t0.c7 as c7a
        from t0 last join t1 on t0.c1=t1.c1
      )
      WINDOW w1 AS (
        PARTITION BY c1a ORDER BY c7a ROWS_RANGE BETWEEN 10s PRECEDING AND CURRENT ROW);
    request_plan: |
      PROJECT(type=Aggregation)
        SIMPLE_PROJECT(sources=(t0.c3 -> c3l, t0.id -> idx, t1.c3 -> c3r, t0.c1 -> c1a, t0.c7 -> c7a))
          JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t0.c1))
            REQUEST_UNION(partition_keys=(), orders=(ASC), range=(c7, 10000 PRECEDING, 0 CURRENT), index_keys=(c1))
              DATA_PROVIDER(request=t0)
              DATA_PROVIDER(type=Partition, table=t0, index=index1)
            DATA_PROVIDER(type=Partition, table=t1, index=index1)
    expect:
      order: idx
      columns:
        - idx int
        - c1 string
        - c3l int
        - c3r int
        - suma int
        - sumb int
      rows:
        - [1,"aa", 2, 20,   2, 20 ]
        - [2,"aa", 2, 20,   4, 20 ]
        - [3,"bb", 2, null, 2, NULL]
        - [4,"cc", 2, 21,   2, 21]

  - id: 7
    desc: window over subquery(t1 last join t2), aliasing window def with multiple level renames
    inputs:
      -
        name: t0
        columns : ["id int","c1 string","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date"]
        indexs: ["index1:c1:c7"]
        rows:
          - [1,"aa",2,30,1.1,2.1,1590738990000,"2020-05-01"]
          - [2,"aa",2,30,1.1,2.1,1590738991000,"2020-05-01"]
          - [3,"bb",2,31,1.2,2.2,1590738991000,"2020-05-02"]
          - [4,"cc",2,32,1.3,2.3,1590738992000,"2020-05-03"]
      -
        name: t1
        columns: ["id int","c1 string","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date"]
        indexs: ["index1:c1:c7","index2:c3:c7"]
        rows:
          - [1,"aa",20,30,1.1,2.1,1606755660000,"2020-05-01"]
          - [2,"cc",21,32,1.1,2.1,1606755780000,"2020-05-01"]
    sql: |
      select
        idx2, c1a2, c3l2, c3r2,
        sum(c3l2) OVER w1 as suma,
        min(c3r2) OVER w1 as sumb,
      from (
        select
          c3l as c3l2,
          idx as idx2,
          c3r as c3r2,
          c1a as c1a2,
          c7a as c7a2
        from (
          select
            {0}.c3 as c3l,
            {0}.id as idx,
            {1}.c3 as c3r,
            {0}.c1 as c1a,
            {0}.c7 as c7a
          from t0 last join t1 on t0.c1=t1.c1
        )
      )
      WINDOW w1 AS (
        PARTITION BY c1a2 ORDER BY c7a2 ROWS_RANGE BETWEEN 10s PRECEDING AND CURRENT ROW);

    # consecutive simple projects will be optimized into single one
    request_plan: |
      PROJECT(type=Aggregation)
        SIMPLE_PROJECT(sources=(t0.c3 -> c3l2, t0.id -> idx2, t1.c3 -> c3r2, t0.c1 -> c1a2, t0.c7 -> c7a2))
          JOIN(type=LastJoin, condition=, left_keys=(), right_keys=(), index_keys=(t0.c1))
            REQUEST_UNION(partition_keys=(), orders=(ASC), range=(c7, 10000 PRECEDING, 0 CURRENT), index_keys=(c1))
              DATA_PROVIDER(request=t0)
              DATA_PROVIDER(type=Partition, table=t0, index=index1)
            DATA_PROVIDER(type=Partition, table=t1, index=index1)
    expect:
      order: idx2
      columns:
        - idx2 int
        - c1a2 string
        - c3l2 int
        - c3r2 int
        - suma int
        - sumb int
      rows:
        - [1,"aa", 2, 20,   2, 20 ]
        - [2,"aa", 2, 20,   4, 20 ]
        - [3,"bb", 2, null, 2, NULL]
        - [4,"cc", 2, 21,   2, 21]
