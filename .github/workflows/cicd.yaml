name: cicd

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    paths-ignore:
      - docs/
      - demo/
      - image/
      - release/
      - tools/
  workflow_dispatch:

env:
  GIT_SUBMODULE_STRATEGY: recursive
  NPROC: 2 # default Parallel build number for GitHub's Linux runner

jobs:
  build_and_cpp_ut:
    runs-on: self-hosted
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0
    env:
      OS: linux
      SQL_PYSDK_ENABLE: OFF
      SQL_JAVASDK_ENABLE: OFF
      TESTING_ENABLE: ON
      NPROC: 8
    steps:
      - uses: actions/checkout@v2

      - name: setup thirdparty
        run: |
          make thirdparty

      - name: prepare
        run: |
          VERSION="snapshot"
          if [[ ${{ github.ref }} == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=${VERSION#v}
            bash steps/prepare_release.sh "$VERSION"
          fi
          echo "OPENMLDB_PREFIX=openmldb-$VERSION" >> $GITHUB_ENV

      - name: configure
        run: |
          make configure CMAKE_INSTALL_PREFIX=${{ env.OPENMLDB_PREFIX }}

      - name: build
        run: |
          make build
          # GitHub runner disk space is limited
          # delete thirdparty build directory($ROOT/.deps/) to save disk space
          # make thirdpartybuild-clean

      - name: run cpp
        run: |
          make test

      - name: run sql_sdk_test
        run: |
          bash steps/ut.sh sql_sdk_test 0

      - name: run sql_cluster_test
        run: |
          bash steps/ut.sh sql_cluster_test 0

      - name: run sql_standalone_sdk_test
        run: |
          bash steps/ut.sh sql_standalone_sdk_test 0

      - name: upload unit test results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linux-ut-result-cpp-${{ github.sha }}
          path: |
            reports/*.xml

      - name: install
        if: ${{ github.event_name == 'push' }}
        run: |
          make install

      - name: package
        if: ${{ github.event_name == 'push' }}
        run: |
          tar czf ${{ env.OPENMLDB_PREFIX }}.tar.gz ${{ env.OPENMLDB_PREFIX }}/

      - name: upload artifacts
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          path: openmldb-*.tar.gz
          name: release-artifacts

  java-sdk:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0
    env:
      SQL_JAVASDK_ENABLE: ON
      OPENMLDB_BUILD_TARGET: 'sql_javasdk_package openmldb'
      MAVEN_OPTS: -Duser.home=/github/home
    steps:
      - uses: actions/checkout@v2

      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('java/**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: build jsdk and package
        run: |
          make build

      - name: run java modules smoke test
        run: |
          sh steps/ut_zookeeper.sh start
          cd onebox && sh start_onebox.sh && cd - || exit
          cd java
          mvn test
          cd -
          cd onebox && sh stop_all.sh && cd - || exit
          sh steps/ut_zookeeper.sh stop

      - name: upload java ut results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linux-ut-result-java-${{ github.sha }}
          path: |
            java/openmldb-jdbc/target/**/TEST-*.xml

  python-sdk:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0
    env:
      SQL_PYSDK_ENABLE: ON
      OPENMLDB_BUILD_TARGET: 'sqlalchemy_openmldb openmldb'
    steps:
      - uses: actions/checkout@v2

      - name: build pysdk and sqlalchemy

        run: |
          make build

      - name: test sqlalchemy
        run: |
          python3 -m easy_install nose pip
          yum install -y net-tools
          bash steps/test_python.sh

      - name: upload python ut results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linux-ut-result-python-${{ github.sha }}
          path: |
            python/test/nosetests.xml

      - name: upload pysdk and whl
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          path: |
            build/python/dist/openmldb*.whl
          name: python-artifacts

  publish-test-results:
    runs-on: ubuntu-latest
    needs: [ "build_and_cpp_ut", "java-sdk", "python-sdk" ]

    # the action will only run on 4paradigm/OpenMLDB's context, not for fork repo or dependabot
    if: >
      always() && github.event_name == 'push' || (
      github.event.pull_request.head.repo.full_name == github.repository &&
      github.event.sender.login != 'dependabot[bot]' )
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Publish Linux UT Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: linux-ut-result-*/**/*.xml
          check_name: Linux Test Report
          comment_title: Linux Test Report

  release:
    runs-on: ubuntu-latest
    # if test failed, shouldn't release
    needs: [ "build_and_cpp_ut", "java-sdk", "python-sdk" ]
    if: >
      success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-artifacts
      - name: Release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            openmldb-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # only tag deploy, only run on 4paradigm/OpenMLDB's context?
  java-sdk-deploy:
    runs-on: ubuntu-latest
    needs: [ "build_and_cpp_ut", "java-sdk", "python-sdk" ]
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0
    # java deploy is triggered with a push to main or a tag push
    # a 'vX.Y.Z' tag push will deploy a release version to maven central,
    # any other push will deploy a SNAPSHOT version.
    # see more in 'steps/package_openmldb_javasdk.sh'
    if: >
      success() && github.event_name == 'push'
    env:
      SQL_JAVASDK_ENABLE: ON
      # do not set user.home on macos
      MAVEN_OPTS: -Duser.home=/github/home
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: upload to maven
        run: |
          make thirdparty
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          ./steps/package_openmldb_javasdk.sh "$VERSION"
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  java-sdk-deploy-mac:
    runs-on: macos-latest
    # TODO(hw): needs ut on mac
    needs: [ "build_and_cpp_ut", "java-sdk", "python-sdk" ]
    # java deploy is triggered with a push to main or a tag push
    # a 'vX.Y.Z' tag push will deploy a release version to maven central,
    # any other push will deploy a SNAPSHOT version.
    # see more in 'steps/package_openmldb_javasdk.sh'
    if: >
      success() && github.event_name == 'push'
    env:
      SQL_JAVASDK_ENABLE: ON
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: upload to maven
        run: |
          make thirdparty
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=${VERSION#v}
          ./steps/package_openmldb_javasdk.sh "$VERSION"
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  python-sdk-deploy:
    runs-on: ubuntu-latest
    needs: [ "build_and_cpp_ut", "java-sdk", "python-sdk" ]
    if: >
      success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine
      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: python-artifacts
      # download only one file, so no dir, just openmldb-*.whl
      - name: upload to pypi
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
        run: |
          ls
          twine upload openmldb-*.whl
