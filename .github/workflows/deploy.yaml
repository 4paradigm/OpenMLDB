name: deploy

on:
  # the action will only run on workflows completed
  workflow_run:
#    workflows: [ "OpenMLDB Build and Test", "Cpp SDK Test", "Cpp SDK Cluster Test", "Java and Python SDK Test" ]
    workflows: ["OpenMLDB Build and Test"]
    types:
      - completed
env:
  GIT_SUBMODULE_STRATEGY: recursive
  HYBRIDSE_SOURCE: download

jobs:
  build-and-pack:
    if: >
      github.event.workflow_run.conclusion == 'success' && startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0
    env:
      OS: linux
    steps:
      - uses: actions/checkout@v1
      - name: build
        run: |
          echo "build and pack ...."
#          bash steps/init_env.sh ${{ env.HYBRIDSE_SOURCE }}
#          mkdir -p build
#          source /root/.bashrc && cd build && cmake -DSQL_PYSDK_ENABLE=ON -DSQL_JAVASDK_ENABLE=ON -DTESTING_ENABLE=OFF
#          .. && make -j$(nproc) && make -j$(nproc) sqlalchemy_openmldb && cd ../
#          rm -rf thirdparty
#
#      - name: pack OpenMLDB
#        if: ${{ github.event_name == 'push' }}
#        run: |
#          VERSION="snapshot"
#          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
#            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#            VERSION=$(echo $VERSION | sed -e 's/^v//')
#          fi
#          bash steps/package_openmldb.sh $VERSION ${{ env.OS }}
#
#      - name: upload release artifacts
#        if: ${{ github.event_name == 'push' }}
#        uses: actions/upload-artifact@v2
#        with:
#          path: openmldb-*.tar.gz
#          name: release-artifacts
#
#      - name: upload pysdk and whl
#        if: ${{ github.event_name == 'push' }}
#        uses: actions/upload-artifact@v2
#        with:
#          path: |
#            build/python/dist/openmldb*.whl
#          name: python-artifacts
#
#  release:
#    runs-on: ubuntu-latest
#    needs: [ "build-and-pack"]
#    if: >
#      success() && startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - name: Download Release Artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: release-artifacts
#      - name: Release
#        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
#        uses: softprops/action-gh-release@v1
#        with:
#          files: |
#            openmldb-*.tar.gz
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#
#  # only tag deploy, only run on 4paradigm/OpenMLDB's context?
#  java-sdk-deploy:
#    runs-on: ubuntu-latest
#    needs: [ "build-and-pack"]
#    container:
#      image: ghcr.io/4paradigm/hybridsql:0.4.0
#    if: >
#      success() && startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - uses: actions/checkout@v2
#
#      - uses: actions/setup-java@v2
#        with:
#          distribution: 'adopt'
#          java-version: '8'
#          server-id: ossrh
#          server-username: MAVEN_USERNAME
#          server-password: MAVEN_TOKEN
#          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase
#
#      - name: Import GPG key
#        id: import_gpg
#        uses: crazy-max/ghaction-import-gpg@v3
#        with:
#          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
#
#      - name: upload to maven
#        run: |
#          bash steps/init_env.sh ${{ env.HYBRIDSE_SOURCE }}
#          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
#          VERSION=$(echo $VERSION | sed -e 's/^v//')
#          sh steps/package_openmldb_javasdk.sh $VERSION
#        env:
#          MAVEN_OPTS: -Duser.home=/github/home
#          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
#          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
#          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
#
#  python-sdk-deploy:
#    runs-on: ubuntu-latest
#    needs: [ "build-and-pack"]
#    if: >
#      success() && startsWith(github.ref, 'refs/tags/v')
#    steps:
#      - uses: actions/checkout@v2
#      - name: Set up Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: '3.x'
#      - name: Install dependencies
#        run: |
#          python -m pip install --upgrade pip
#          pip install setuptools wheel twine
#      - name: Download Release Artifacts
#        uses: actions/download-artifact@v2
#        with:
#          name: python-artifacts
#      # download only one file, openmldb-*.whl
#      - name: upload to pypi
#        env:
#          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
#          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
#        run: |
#          ls
#          twine upload openmldb-*.whl
