name: HybridSE CI

on:
  push:
    branches:
      - main
    tags:
      - v*
  pull_request:
    paths:
      - .github/workflows/hybridse-ci.yml
      - cases/**/*
      - hybridse/**/*
  workflow_dispatch:

defaults:
  run:
    working-directory: hybridse

env:
  HYBRIDSE_PATH: hybridse

jobs:
  linux-build:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0
    env:
      OS: linux
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        if: ${{ github.event_name == 'push' }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Build Core
        run: |
          ./tools/hybridse_build.sh

      - name: Core Test
        run: |
          ./tools/hybridse_core_test.sh

      - name: Upload Cpp UT Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linux-ut-result-cpp-${{ github.sha }}
          path: |
            ${{ env.HYBRIDSE_PATH }}/build/*.xml

      - name: Java SDK Test
        run: |
          cd java/
          mvn -U clean compile test

      - name: Upload Java UT Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: linux-ut-result-java-${{ github.sha }}
          path: |
            ${{ env.HYBRIDSE_PATH }}/java/hybridse-sdk/target/**/TEST-*.xml

      - name: Upload jsdk
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.HYBRIDSE_PATH }}/build/src/sdk/libhybridse*.so
          name: lib-artifacts

      - name: Prepare Maven Release Deploy
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          ./java/prepare_release.sh $VERSION

      - name: Publish Java Library
        if: ${{ github.event_name == 'push' }}
        working-directory: ${{ env.HYBRIDSE_PATH }}/java
        run: |
          mvn --batch-mode deploy
        env:
          MAVEN_OPTS: -Duser.home=/github/home
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create Archive
        if: ${{ github.event_name == 'push' }}
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=$(echo $VERSION | sed -e 's/^v//')
            HYBRIDSE_VERSION=$VERSION ./tools/hybridse_deploy.sh
          else
            ./tools/hybridse_deploy.sh
          fi

      - name: Upload Artifacts
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.HYBRIDSE_PATH }}/hybridse-*-${{ env.OS }}-${{ env.ARCH }}.tar.gz
          name: release-artifacts

  macos-build:
    name: Build in MacOS
    runs-on: macos-latest
    env:
      OS: darwin
      ARCH: x86_64
    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        if: ${{ github.event_name == 'push' }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}
          # passphrase: ${{ secrets.GPG_PASSPHRASE }}

      - name: Install thirdparty
        run: |
          brew install coreutils

      - name: Build Core
        run: |
          ./tools/hybridse_build.sh

      - name: Core Test
        run: |
          ./tools/hybridse_core_test.sh

      - name: Upload Cpp UT Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: macos-ut-result-cpp-${{ github.sha }}
          path: |
            ${{ env.HYBRIDSE_PATH }}/build/*.xml

      - name: Java SDK Test
        run: |
          cd java/
          mvn -U clean compile test

      - name: Upload Java UT Results
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: macos-ut-result-java-${{ github.sha }}
          path: |
            ${{ env.HYBRIDSE_PATH }}/java/hybridse-sdk/target/**/TEST-*.xml

      - name: Upload jsdk
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.HYBRIDSE_PATH }}/build/src/sdk/libhybridse*.dylib
          name: lib-artifacts

      - name: Prepare Maven Release Deploy
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          ./java/prepare_release.sh $VERSION

      - name: Publish Java Library
        if: ${{ github.event_name == 'push' }}
        working-directory: ${{ env.HYBRIDSE_PATH }}/java
        run: |
          mvn --batch-mode -P macos clean install
          mvn --batch-mode -P macos -pl hybridse-native deploy
          mvn --batch-mode -P macos -pl hybridse-sdk deploy
        env:
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

      - name: Create Archive
        if: ${{ github.event_name == 'push' }}
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            VERSION=$(echo $VERSION | sed -e 's/^v//')
            HYBRIDSE_VERSION=$VERSION ./tools/hybridse_deploy.sh
          else
            ./tools/hybridse_deploy.sh
          fi

      - name: Upload Artifacts
        if: ${{ github.event_name == 'push' }}
        uses: actions/upload-artifact@v2
        with:
          path: ${{ env.HYBRIDSE_PATH }}/hybridse-*-${{ env.OS }}-${{ env.ARCH }}.tar.gz
          name: release-artifacts

  java-allinone-deploy:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0
    needs: ["macos-build"]
    if: >
      success() && github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Download Lib Artifacts
        uses: actions/download-artifact@v2
        with:
          name: lib-artifacts
          path: ${{ env.HYBRIDSE_PATH }}

      - uses: actions/setup-java@v2
        with:
          distribution: 'adopt'
          java-version: '8'
          server-id: ossrh
          server-username: MAVEN_USERNAME
          server-password: MAVEN_TOKEN
          gpg-passphrase: GPG_PASSPHRASE # env variable for GPG private key passphrase

      - name: Import GPG key
        if: ${{ github.event_name == 'push' }}
        id: import_gpg
        uses: crazy-max/ghaction-import-gpg@v3
        with:
          gpg-private-key: ${{ secrets.GPG_PRIVATE_KEY }}

      - name: Build Core
        run: |
          ./tools/hybridse_build.sh

      - name: Copy Dylib
        run: |
          cp libhybridse_*.dylib java/hybridse-native/src/main/resources/

      - name: Prepare Maven Release Deploy
        if: startsWith(github.ref, 'refs/tags/v')
        run: |
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          VERSION=$(echo $VERSION | sed -e 's/^v//')
          ./java/prepare_release.sh $VERSION

      - name: Publish Java Library
        working-directory: ${{ env.HYBRIDSE_PATH }}/java
        run: |
          mvn --batch-mode -P allinone clean install
          mvn --batch-mode -P allinone -pl hybridse-native deploy
          mvn --batch-mode -P allinone -pl hybridse-sdk deploy
        env:
          MAVEN_OPTS: -Duser.home=/github/home
          MAVEN_USERNAME: ${{ secrets.OSSRH_USERNAME }}
          MAVEN_TOKEN: ${{ secrets.OSSRH_TOKEN }}
          GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}

  release:
    runs-on: ubuntu-latest
    needs: ["linux-build", "macos-build"]
    if: >
      success() && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Download Release Artifacts
        uses: actions/download-artifact@v2
        with:
          name: release-artifacts

      - name: Release
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        uses: softprops/action-gh-release@v1
        with:
          files: |
            hybridse-*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-test-results:
    runs-on: ubuntu-latest
    needs: ["linux-build", "macos-build"]
    # the action will only run on 4paradigm/HybridSE's context, not for fork repo or dependabot
    if: >
      always() && github.event_name == 'push' || (
      github.event.pull_request.head.repo.full_name == github.repository &&
      github.event.sender.login != 'dependabot[bot]' )
    steps:
      - name: Download Artifacts
        uses: actions/download-artifact@v2

      - name: Publish Linux UT Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: linux-ut-result-*/**/*.xml
          check_name: HybridSE Linux Test Report
          comment_title: HybridSE Linux Test Report

      - name: Publish Mac UT Results
        uses: EnricoMi/publish-unit-test-result-action@v1
        with:
          files: macos-ut-result-*/**/*.xml
          check_name: HybridSE Mac Test Report
          comment_title: HybridSE Mac Test Report

  coverage:
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/4paradigm/hybridsql:0.4.0

    steps:
      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Build and Coverage
        run: |
          ./tools/compile_and_coverage.sh

      - name: Upload Coverage Report
        uses: codecov/codecov-action@v1
        with:
          files: ${{ env.HYBRIDSE_PATH }}/build/coverage.info,${{ env.HYBRIDSE_PATH }}/java/hybridse-sdk/target/site/jacoco/jacoco.xml
          name: coverage
          fail_ci_if_error: true
          verbose: true
