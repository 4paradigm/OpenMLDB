# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

db: test_zw
debugs: []
cases:
  - id: 0
    desc: abs-normal
    inputs:
      - columns: ["id int", "c0 smallint", "c1 int", "c2 bigint", "c3 float", "c4 double","c5 bool"]
        indexs: ["index1:c0:c2"]
        rows:
          - [1, -1, 2, 2, -0.2, -0.5,true]
          - [2, NULL, NULL, 2, NULL, NULL,false]
    sql: select id as id,
         abs(c0) as r0,
          abs(c1) as r1,
           abs(c2) as r2,
            abs(c3) as r3,
             abs(c4) as r4,
             abs(c5) as r5 from {0};
    expect:
      order: id
      columns: ["id int", "r0 int", "r1 int", "r2 bigint", "r3 double", "r4 double","r5 double"]
      rows:
        - [1, 1, 2, 2, 0.20000000298023224, 0.5,1.0]
        - [2, NULL, NULL, 2, NULL , NULL,0.0]
  - id: 1
    desc: 三角函数
    tags: ["暂时不支持bool类型列"]
    inputs:
      - columns: ["id int", "c0 smallint", "c1 int", "c2 bigint", "c3 float", "c4 double","c5 bool"]
        indexs: ["index1:c0:c2"]
        rows:
          - [1, 0, 1, 1, 1.0, 0.0,true]
          - [2, NULL, NULL, 1, NULL, NULL,false]
    sql: select id as id,
        cos(c0) as r0,
        cot(c1) as r1,
        sin(c2) as r2,
        tan(c3) as r3,
        tan(c4) as r4 from {0};
    expect:
      order: id
      columns: ["id int", "r0 double", "r1 double", "r2 double", "r3 float","r4 double"]
      rows:
        - [1, 1, 0.6420926159343306, 0.8414709848078965, 1.5574077,0.0]
        - [2, NULL, NULL, 0.8414709848078965, NULL,NULL]
  - id: 2
    desc: 反三角函数
    inputs:
      - columns: ["id int", "c0 smallint", "c1 int", "c2 bigint", "c3 float", "c4 double","c5 bool"]
        indexs: ["index1:c0:c2"]
        rows:
          - [1, 1, 2, 2, 0.2, 0.5,true]
          - [2, NULL, NULL, 2, NULL, NULL,false]
    sql: select id as id,
        acos(c4) as r0,
        asin(c3) as r1,
        atan(c1) as r2,
        atan2(c1, c2) as r3,
        asin(c4) as r4
        from {0};
    expect:
      order: id
      columns: ["id int", "r0 double", "r1 float", "r2 double", "r3 double","r4 double"]
      rows:
        - [1, 1.0471975511965979, 0.2013579207903308, 1.1071487177940904, 0.78539816339744828,0.5235987755982989]
        - [2, NULL, NULL, NULL, NULL,NULL]
  - id: 3
    desc: 反三角函数-三角函数-常量
    inputs:
      - columns: ["id int", "c0 smallint", "c1 int", "c2 bigint", "c3 float", "c4 double","c5 bool"]
        indexs: ["index1:c0:c2"]
        rows:
          - [1, 1, 2, 2, 0.2, 0.5,true]
    sql: select id as id,
        cos(1) as r0,
        cot(2) as r1,
        sin(1.1) as r2,
        tan(1) as r3,
        acos(0) as r4,
        asin(2.0) as r5,
        atan(2.2) as r6,
        atan2(1, 2) as r7,
        asin(2) as r8
        from {0};
    expect:
      order: id
      columns: ["id int", "r0 double", "r1 double", "r2 double", "r3 double","r4 double", "r5 double", "r6 double", "r7 double", "r8 double"]
      rows:
        - [1,0.5403023058681398,-0.45765755436028577,0.8912073600614354,1.5574077246549023,1.5707963267948966,NaN,1.1441688336680205,0.4636476090008061,NaN]
  - id: 4
    desc: 对数函数
    inputs:
      - columns: ["id int", "c0 smallint", "c1 int", "c2 bigint", "c3 float", "c4 double","c5 bool"]
        indexs: ["index1:c0:c2"]
        rows:
          - [1, 1, 1, 3, 1, 1,true]
          - [2, NULL, NULL, 3, NULL, NULL,false]
    sql: select id as id,
        log(c0) as r0,
        log(c2, c1) as r1,
        log2(c3) as r2,
        log10(c4) as r3,
        ln(c1) as r4,
        log(c5) as r5 from {0};
    expect:
      order: id
      columns: ["id int", "r0 double", "r1 double", "r2 float", "r3 double", "r4 double","r5 double"]
      rows:
        - [1, 0, 0, 0, 0, 0,0.0]
        - [2, NULL, NULL, NULL, NULL, NULL,-Infinity]

  - id: 5
    desc: 数值位数函数
    inputs:
      - columns: ["id int", "c0 smallint", "c1 int", "c2 bigint", "c3 float", "c4 double","c5 bool"]
        indexs: ["index1:c0:c2"]
        rows:
          - [1, 1, 2, 2, 0.5, 0.7,true]
          - [2, NULL, NULL, 2, NULL, NULL,false]
    sql: select id as id,
         ceil(c0) as r0,
         ceiling(c1) as r1,
         floor(c2) as r2,
         round(c3) as r3,
         truncate(c4) as r4,
         floor(c5) as r5 from {0};
    expect:
      order: id
      columns: ["id int", "r0 bigint", "r1 bigint", "r2 bigint", "r3 double", "r4 double","r5 double"]
      rows:
        - [1, 1, 2, 2, 1.000000, 0.000000,1.0]
        - [2, NULL, NULL, 2, NULL, NULL,0.0]

  - id: 6
    desc: 数值幂函数
    inputs:
      - columns: ["id int", "c0 smallint", "c1 int", "c2 bigint", "c3 float", "c4 double","c5 bool"]
        indexs: ["index1:c0:c2"]
        rows:
          - [1, 0, 2, 10, 1, 100,true]
          - [2, NULL, NULL, 10, NULL, NULL,false]
    sql: select id as id,
        exp(c0) as r0,
        pow(c1, c2) as r1,
        power(c2, c3) as r2,
        sqrt(c4) as r3,
        pow(c5,c1) as r4
        from {0};
    expect:
      order: id
      columns: ["id int", "r0 double", "r1 double", "r2 double", "r3 double","r4 double"]
      rows:
        - [1, 1, 1024.000000, 10.000000, 10.000000,1.0]
        - [2, NULL, NULL, NULL, NULL,NULL]
  - id: 7
    desc: "计算函数-单参数-fail"
    level: 5
    inputs:
      -
        columns : ["id bigint","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date","c9 bool"]
        indexs: ["index1:id:c7"]
        rows:
          - [1,"aa",30,-30,30,30.0,30.0,1590738989000,"2020-05-01",true]
    sql: select d[0](d[1]) from {0};
    dataProvider:
      - ["abs","cos","cot","sin","tan","acos","asin","atan","log","log2","log10","ln","ceil","ceiling","floor","round","truncate","exp","sqrt"]
      - ["{0}.c1","{0}.c7","{0}.c8"]
    expect:
      success: false
  - id: 8
    desc: "计算函数-单参数-bool-fail"
    level: 5
    inputs:
      -
        columns : ["id bigint","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date","c9 bool"]
        indexs: ["index1:id:c7"]
        rows:
          - [1,"aa",30,-30,30,30.0,30.0,1590738989000,"2020-05-01",true]
    sql: select d[0](d[1]) from {0};
    dataProvider:
      - ["cos","cot","sin","tan","acos","asin","atan","sqrt"]
      - ["{0}.c9"]
    expect:
      success: false
  - id: 9
    desc: "计算函数-两参数-fail"
    level: 5
    inputs:
      -
        columns : ["id bigint","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date","c9 bool"]
        indexs: ["index1:id:c7"]
        rows:
          - [1,"aa",30,-30,30,30.0,30.0,1590738989000,"2020-05-01",true]
    sql: select d[0](d[1],d[1]) from {0};
    dataProvider:
      - ["log","pow","power","atan2"]
      - ["{0}.c1","{0}.c7","{0}.c8"]
    expect:
      success: false
  - id: 10
    desc: "mod()_整型_正确"
    tags: ["TODO","暂时不支持mod()"]
    inputs:
      -
        columns : ["id bigint","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date","c9 bool"]
        indexs: ["index1:id:c7"]
        rows:
          - [1,"aa",30,30,30,30.0,30.0,1590738989000,"2020-05-01",false]
      -
        columns : ["id bigint","c1 string","c2 smallint","c3 int","c4 bigint","c5 float","c6 double","c7 timestamp","c8 date","c9 bool"]
        indexs: ["index1:id:c7"]
        rows:
          - [1,"bb",0,20,30,11.1,12.1,1590738989001,"2020-05-02",true]
    dataProvider:
      - ["{0}.c2","{0}.c3","{0}.c4","{0}.c5","{0}.c6"]
    sql: select mod(d[0],{1}.c2) as b2,mod(d[0],{1}.c3) as b3,mod(d[0],{1}.c4) as b4,mod(d[0],{1}.c5) as b5,mod(d[0],{1}.c6) as b6,mod(d[0],{1}.c9) as b9 from {0} last join {1} ORDER BY {1}.c7 on {0}.id={1}.id;
    expect:
      columns: ["b2 smallint","b3 int","b4 bigint","b5 float","b6 double","b9 smallint"]
    expectProvider:
      0:
        rows:
          - [0,10,0,7.8,5.8,0]
      1:
        rows:
          - [0,10,0,7.8,5.8,0]
      2:
        rows:
          - [0,600,900,333,363,30]
      3:
        rows:
          - [30,50,60,41.1,42.1,31]
      4:
        rows:
          - [30,10,0,18.9,17.9,29]
      5:
        columns: ["b2 double","b3 double","b4 double","b5 double","b6 double","b9 double"]
        rows:
          - [Infinity,1.5,1.0,2.7027026098198896,2.479338842975207,30.0]
