# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

cases:
  - id: 1
    desc: 简单CREATE
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 smallint NOT NULL,
          column3 float NOT NULL,
          column4 double NOT NULL,
          column5 bigint NOT NULL,
          std_ts timestamp NOT NULL,
          std_date date NOT NULL,
          index(key=(column2), ts=std_ts)
      );
  - id: 2
    desc: 简单CREATE NOT EXIST
    sql: |
      create table IF NOT EXISTS test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL
      );
  - id: 3
    desc: CREATE with 索引
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=(column4, column3), ts=column5)
      );
  - id: 4
    desc: Create with索引和TTL
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=(column4, column3), ts=column2, ttl=60d)
      );
  - id: 5
    desc: Create 带索引和version
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=(column4, column3), version=(column5, 3), ts=column2, ttl=60d)
      );
  - id: 6
    desc: Create with索引和TTL和TTL_TYPE
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=(column4, column3), ts=column2, ttl=60d, ttl_type=absolute)
      );
  - id: 7
    desc: Create with索引和TTL和TTL_TYPE
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=(column4, column3), ts=column2, ttl=1000, ttl_type=latest)
      );
  - id: 8
    desc: Create 指定副本数
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=column1, ts=column2)) OPTIONS (replicanum=2);
  - id: 9
    desc: Create 指定副本数与节点分布
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=column1, ts=column2))
          OPTIONS (
            replicanum=2,
            distribution = [
              ("127.0.0.1:9927", ["127.0.0.1:9926"])
              ]
          );
  - id: 10
    desc: create procedure
    sql: |
        create procedure sp1(const c1 string, const c3 int, c4 bigint, c5 float, c6 double, c7 timestamp, c8 date)
        begin
            SELECT c1, c3, sum(c4) OVER w1 as w1_c4_sum
                FROM trans
                WINDOW w1 AS (PARTITION BY trans.c1 ORDER BY trans.c7 ROWS BETWEEN 2 PRECEDING AND CURRENT ROW);
        end;
  - id: 11
    desc: Create with ttl_type absorlat
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=column1, ts=column2, ttl=(10d,100), ttl_type=absorlat));
  - id: 12
    desc: Create with ttl_type absandlat
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 timestamp NOT NULL,
          column3 int NOT NULL,
          column4 string NOT NULL,
          column5 int NOT NULL,
          index(key=column1, ts=column2, ttl=(10d,100), ttl_type=absandlat));
  - id: 13
    desc: Create table statement (typical 1)
    sql: |
        create table t1 (a int, b string, index(key=(a, b), dump='12', ts=column2, ttl=1d, ttl_type=absolute, version=(column5, 3)))
        options (replicanum = 3, partitionnum = 3, ignored_option = 'abc',
            distribution = [ ('leader1', ['fo1', 'fo2']) ]
        );
    expect:
      node_tree_str: |
        +-node[CREATE]
          +-table: t1
          +-IF NOT EXIST: 0
          +-column_desc_list[list]:
          |  +-0:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: a
          |  |    +-column_type: int32
          |  |    +-NOT NULL: 0
          |  +-1:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: b
          |  |    +-column_type: string
          |  |    +-NOT NULL: 0
          |  +-2:
          |    +-node[kColumnIndex]
          |      +-keys: [a, b]
          |      +-ts_col: column2
          |      +-abs_ttl: 86400000
          |      +-lat_ttl: -2
          |      +-ttl_type: absolute
          |      +-version_column: column5
          |      +-version_count: 3
          +-replica_num: 3
          +-partition_num: 3
          +-distribution_list[list]:
            +-0:
            |  +-node[kPartitionMeta]
            |    +-endpoint: leader1
            |    +-role_type: leader
            +-1:
            |  +-node[kPartitionMeta]
            |    +-endpoint: fo1
            |    +-role_type: follower
            +-2:
              +-node[kPartitionMeta]
                +-endpoint: fo2
                +-role_type: follower
  - id: 14
    desc: Create table statement (typical 2)
    sql: |
        create table if not exists t2 (a i16, b float32, index(key=a, ignored_key='seb', ts=b, ttl=(1h, 1800),
        ttl_type=latest, version=a ) ) options (replicanum = 2, partitionnum = 5, ignored_option = 'abc',
        distribution = [ ('leader1', ['fo1', 'fo2'])] )
    expect:
      node_tree_str: |
        +-node[CREATE]
          +-table: t2
          +-IF NOT EXIST: 1
          +-column_desc_list[list]:
          |  +-0:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: a
          |  |    +-column_type: int16
          |  |    +-NOT NULL: 0
          |  +-1:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: b
          |  |    +-column_type: float
          |  |    +-NOT NULL: 0
          |  +-2:
          |    +-node[kColumnIndex]
          |      +-keys: [a]
          |      +-ts_col: b
          |      +-abs_ttl: 3600000
          |      +-lat_ttl: 1800
          |      +-ttl_type: latest
          |      +-version_column: a
          |      +-version_count: 1
          +-replica_num: 2
          +-partition_num: 5
          +-distribution_list[list]:
            +-0:
            |  +-node[kPartitionMeta]
            |    +-endpoint: leader1
            |    +-role_type: leader
            +-1:
            |  +-node[kPartitionMeta]
            |    +-endpoint: fo1
            |    +-role_type: follower
            +-2:
              +-node[kPartitionMeta]
                +-endpoint: fo2
                +-role_type: follower

  - id: 15
    desc: Create table statement (typical 3)
    sql: |
      create table if not exists t3 (a int32, b timestamp, index(key=a, ignored_key='seb', ts=b, ttl=1800,
      ttl_type=absorlat, version=a ) ) options (replicanum = 4, partitionnum = 5, ignored_option = 'abc',
      distribution = [ ('leader1', ['fo1', 'fo2'])])
    expect:
      node_tree_str: |
        +-node[CREATE]
          +-table: t3
          +-IF NOT EXIST: 1
          +-column_desc_list[list]:
          |  +-0:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: a
          |  |    +-column_type: int32
          |  |    +-NOT NULL: 0
          |  +-1:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: b
          |  |    +-column_type: timestamp
          |  |    +-NOT NULL: 0
          |  +-2:
          |    +-node[kColumnIndex]
          |      +-keys: [a]
          |      +-ts_col: b
          |      +-abs_ttl: -2
          |      +-lat_ttl: 1800
          |      +-ttl_type: absorlat
          |      +-version_column: a
          |      +-version_count: 1
          +-replica_num: 4
          +-partition_num: 5
          +-distribution_list[list]:
            +-0:
            |  +-node[kPartitionMeta]
            |    +-endpoint: leader1
            |    +-role_type: leader
            +-1:
            |  +-node[kPartitionMeta]
            |    +-endpoint: fo1
            |    +-role_type: follower
            +-2:
              +-node[kPartitionMeta]
                +-endpoint: fo2
                +-role_type: follower

  - id: 16
    desc: empty create table statement
    sql: |
        create table t4
    expect:
      node_tree_str: |
        +-node[CREATE]
          +-table: t4
          +-IF NOT EXIST: 0
          +-column_desc_list: []
          +-replica_num: 1
          +-partition_num: 1
          +-distribution_list: []

  - id: 17_create_procedure
    desc: create procedure, everything empty
    sql: |
        CREATE OR REPLACE TEMP PROCEDURE IF NOT EXISTS procedure_name()
        OPTIONS()
        BEGIN
        END;
    expect:
      node_tree_str: |
        +-node[kCreateSpStmt]
          +-sp_name: procedure_name
          +-input_parameter_list: []
          +-inner_node_list: []

  - id: 18_create_procedure
    desc: create procedure, multiple parameters
    sql: |
      CREATE PROCEDURE procedure_name(
        param_a string,
        const param_b int32
        )
      BEGIN
      END;
    expect:
      node_tree_str: |
        +-node[kCreateSpStmt]
          +-sp_name: procedure_name
          +-input_parameter_list[list]:
          |  +-0:
          |  |  +-node[kInputParameter]
          |  |    +-column_name: param_a
          |  |    +-column_type: string
          |  |    +-is_constant: 0
          |  +-1:
          |    +-node[kInputParameter]
          |      +-column_name: param_b
          |      +-column_type: int32
          |      +-is_constant: 1
          +-inner_node_list: []

  - id: 19_create_procedure
    desc: create procedure, select query body
    sql: |
        CREATE PROCEDURE procedure_name()
        BEGIN
          SELECT 1;
        END;
    expect:
      node_tree_str: |
        +-node[kCreateSpStmt]
          +-sp_name: procedure_name
          +-input_parameter_list: []
          +-inner_node_list[list]:
            +-0:
              +-node[kQuery]: kQuerySelect
                +-distinct_opt: false
                +-where_expr: null
                +-group_expr_list: null
                +-having_expr: null
                +-order_expr_list: null
                +-limit: null
                +-select_list[list]:
                |  +-0:
                |    +-node[kResTarget]
                |      +-val:
                |      |  +-expr[primary]
                |      |    +-value: 1
                |      |    +-type: int32
                |      +-name: <nil>
                +-tableref_list: []
                +-window_list: []

  - id: 20_create_procedure
    desc: create procedure, parameters and union all query
    sql: |
        CREATE PROCEDURE procedure_name(
            param_a i16,
            param_b timestamp,
            param_c date,
            param_d double
        )
        BEGIN
          SELECT 1 UNION ALL SELECT 2;
        END;
    expect:
      node_tree_str: |
        +-node[kCreateSpStmt]
          +-sp_name: procedure_name
          +-input_parameter_list[list]:
          |  +-0:
          |  |  +-node[kInputParameter]
          |  |    +-column_name: param_a
          |  |    +-column_type: int16
          |  |    +-is_constant: 0
          |  +-1:
          |  |  +-node[kInputParameter]
          |  |    +-column_name: param_b
          |  |    +-column_type: timestamp
          |  |    +-is_constant: 0
          |  +-2:
          |  |  +-node[kInputParameter]
          |  |    +-column_name: param_c
          |  |    +-column_type: date
          |  |    +-is_constant: 0
          |  +-3:
          |    +-node[kInputParameter]
          |      +-column_name: param_d
          |      +-column_type: double
          |      +-is_constant: 0
          +-inner_node_list[list]:
            +-0:
              +-node[kQuery]: kQueryUnion
                +-union_type: ALL UNION
                +-left:
                |  +-node[kQuery]: kQuerySelect
                |    +-distinct_opt: false
                |    +-where_expr: null
                |    +-group_expr_list: null
                |    +-having_expr: null
                |    +-order_expr_list: null
                |    +-limit: null
                |    +-select_list[list]:
                |    |  +-0:
                |    |    +-node[kResTarget]
                |    |      +-val:
                |    |      |  +-expr[primary]
                |    |      |    +-value: 1
                |    |      |    +-type: int32
                |    |      +-name: <nil>
                |    +-tableref_list: []
                |    +-window_list: []
                +-right:
                  +-node[kQuery]: kQuerySelect
                    +-distinct_opt: false
                    +-where_expr: null
                    +-group_expr_list: null
                    +-having_expr: null
                    +-order_expr_list: null
                    +-limit: null
                    +-select_list[list]:
                    |  +-0:
                    |    +-node[kResTarget]
                    |      +-val:
                    |      |  +-expr[primary]
                    |      |    +-value: 2
                    |      |    +-type: int32
                    |      +-name: <nil>
                    +-tableref_list: []
                    +-window_list: []

  - id: 21_create_procedure
    desc: create procedure, parameters and union distinct query
    sql: |
        CREATE PROCEDURE procedure_name(
            param_a i64,
            param_b timestamp,
            param_c smallint,
            param_d double
        )
        BEGIN
          SELECT 1 UNION DISTINCT SELECT 2 UNION DISTINCT SELECT 3;
        END;
    expect:
      node_tree_str: |
        +-node[kCreateSpStmt]
          +-sp_name: procedure_name
          +-input_parameter_list[list]:
          |  +-0:
          |  |  +-node[kInputParameter]
          |  |    +-column_name: param_a
          |  |    +-column_type: int64
          |  |    +-is_constant: 0
          |  +-1:
          |  |  +-node[kInputParameter]
          |  |    +-column_name: param_b
          |  |    +-column_type: timestamp
          |  |    +-is_constant: 0
          |  +-2:
          |  |  +-node[kInputParameter]
          |  |    +-column_name: param_c
          |  |    +-column_type: int16
          |  |    +-is_constant: 0
          |  +-3:
          |    +-node[kInputParameter]
          |      +-column_name: param_d
          |      +-column_type: double
          |      +-is_constant: 0
          +-inner_node_list[list]:
            +-0:
              +-node[kQuery]: kQueryUnion
                +-union_type: DISTINCT UNION
                +-left:
                |  +-node[kQuery]: kQueryUnion
                |    +-union_type: DISTINCT UNION
                |    +-left:
                |    |  +-node[kQuery]: kQuerySelect
                |    |    +-distinct_opt: false
                |    |    +-where_expr: null
                |    |    +-group_expr_list: null
                |    |    +-having_expr: null
                |    |    +-order_expr_list: null
                |    |    +-limit: null
                |    |    +-select_list[list]:
                |    |    |  +-0:
                |    |    |    +-node[kResTarget]
                |    |    |      +-val:
                |    |    |      |  +-expr[primary]
                |    |    |      |    +-value: 1
                |    |    |      |    +-type: int32
                |    |    |      +-name: <nil>
                |    |    +-tableref_list: []
                |    |    +-window_list: []
                |    +-right:
                |      +-node[kQuery]: kQuerySelect
                |        +-distinct_opt: false
                |        +-where_expr: null
                |        +-group_expr_list: null
                |        +-having_expr: null
                |        +-order_expr_list: null
                |        +-limit: null
                |        +-select_list[list]:
                |        |  +-0:
                |        |    +-node[kResTarget]
                |        |      +-val:
                |        |      |  +-expr[primary]
                |        |      |    +-value: 2
                |        |      |    +-type: int32
                |        |      +-name: <nil>
                |        +-tableref_list: []
                |        +-window_list: []
                +-right:
                  +-node[kQuery]: kQuerySelect
                    +-distinct_opt: false
                    +-where_expr: null
                    +-group_expr_list: null
                    +-having_expr: null
                    +-order_expr_list: null
                    +-limit: null
                    +-select_list[list]:
                    |  +-0:
                    |    +-node[kResTarget]
                    |      +-val:
                    |      |  +-expr[primary]
                    |      |    +-value: 3
                    |      |    +-type: int32
                    |      +-name: <nil>
                    +-tableref_list: []
                    +-window_list: []




  - id: 22
    desc: create index 1
    sql: |
      CREATE INDEX index1 ON t1 (col1, col2) OPTIONS (ts=col3, ttl=30d, ttl_type=absolute);
    expect:
      node_tree_str: |
        +-node[kCreateIndexStmt]
          +-index_name: index1
          +-table_name: t1
          +-index:
            +-node[kColumnIndex]
              +-keys: [col1, col2]
              +-ts_col: col3
              +-abs_ttl: 2592000000
              +-lat_ttl: -2
              +-ttl_type: absolute
              +-version_column: <nil>
              +-version_count: 0
  - id: 23
    desc: create index 2
    sql: |
      CREATE INDEX index1 ON t1 (col1, col2) OPTIONS (ts=col3, ttl=100, ttl_type=latest);
    expect:
      node_tree_str: |
        +-node[kCreateIndexStmt]
          +-index_name: index1
          +-table_name: t1
          +-index:
            +-node[kColumnIndex]
              +-keys: [col1, col2]
              +-ts_col: col3
              +-abs_ttl: -2
              +-lat_ttl: 100
              +-ttl_type: latest
              +-version_column: <nil>
              +-version_count: 0
  - id: 24
    desc: Create table statement (typical 4)
    tags: ["TODO"]
    sql: |
      create table if not exists t3 (a int32, b timestamp, INDEX index1 (a) OPTIONS (ignored_key='seb', ts=b, ttl=1800,
      ttl_type=absorlat, version=a ) ) options (replicanum = 4, partitionnum = 5, ignored_option = 'abc',
      distribution = [ ('leader1', ['fo1', 'fo2'])])
    expect:
      node_tree_str: |
        +-node[CREATE]
          +-table: t3
          +-IF NOT EXIST: 1
          +-column_desc_list[list]:
          |  +-0:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: a
          |  |    +-column_type: int32
          |  |    +-NOT NULL: 0
          |  +-1:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: b
          |  |    +-column_type: timestamp
          |  |    +-NOT NULL: 0
          |  +-2:
          |    +-node[kColumnIndex]
          |      +-keys: [a]
          |      +-ts_col: b
          |      +-abs_ttl: -2
          |      +-lat_ttl: 1800
          |      +-ttl_type: absorlat
          |      +-version_column: a
          |      +-version_count: 1
          +-replica_num: 4
          +-partition_num: 5
          +-distribution_list[list]:
            +-0:
            |  +-node[kPartitionMeta]
            |    +-endpoint: leader1
            |    +-role_type: leader
            +-1:
            |  +-node[kPartitionMeta]
            |    +-endpoint: fo1
            |    +-role_type: follower
            +-2:
              +-node[kPartitionMeta]
                +-endpoint: fo2
                +-role_type: follower
  - id: 25
    desc: 简单CREATE with VARCHAR
    tags: ["v0.2.1", "support varchar", "@chenjing"]
    sql: |
      create table test(
          column1 int NOT NULL,
          column2 smallint NOT NULL,
          column5 VARCHAR NOT NULL,
          column6 VARCHAR(64) NOT NULL,
          std_ts timestamp NOT NULL,
          std_date date NOT NULL,
          index(key=(column2), ts=std_ts)
      );
    expect:
      node_tree_str: |
        +-node[CREATE]
          +-table: test
          +-IF NOT EXIST: 0
          +-column_desc_list[list]:
          |  +-0:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: column1
          |  |    +-column_type: int32
          |  |    +-NOT NULL: 1
          |  +-1:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: column2
          |  |    +-column_type: int16
          |  |    +-NOT NULL: 1
          |  +-2:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: column5
          |  |    +-column_type: string
          |  |    +-NOT NULL: 1
          |  +-3:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: column6
          |  |    +-column_type: string
          |  |    +-NOT NULL: 1
          |  +-4:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: std_ts
          |  |    +-column_type: timestamp
          |  |    +-NOT NULL: 1
          |  +-5:
          |  |  +-node[kColumnDesc]
          |  |    +-column_name: std_date
          |  |    +-column_type: date
          |  |    +-NOT NULL: 1
          |  +-6:
          |    +-node[kColumnIndex]
          |      +-keys: [column2]
          |      +-ts_col: std_ts
          |      +-abs_ttl: -2
          |      +-lat_ttl: -2
          |      +-ttl_type: <nil>
          |      +-version_column: <nil>
          |      +-version_count: 0
          +-replica_num: 1
          +-partition_num: 1
          +-distribution_list: []
