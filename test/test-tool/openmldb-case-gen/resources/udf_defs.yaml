# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

tan:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the tangent of expr.\n\n            @code{.sql}\n\n                SELECT TAN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return the tangent of expr.\n\n            @code{.sql}\n\n                SELECT TAN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return the tangent of expr.\n\n            @code{.sql}\n\n                SELECT TAN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return the tangent of expr.\n\n            @code{.sql}\n\n                SELECT TAN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
sin:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the sine of expr.\n\n            @code{.sql}\n\n                SELECT SIN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by sin() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return the sine of expr.\n\n            @code{.sql}\n\n                SELECT SIN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by sin() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return the sine of expr.\n\n            @code{.sql}\n\n                SELECT SIN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by sin() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return the sine of expr.\n\n            @code{.sql}\n\n                SELECT SIN(0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by sin() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
atan2:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: double
      - arg_types:
          - bool
          - int16
        return_type: double
      - arg_types:
          - bool
          - int32
        return_type: double
      - arg_types:
          - bool
          - int64
        return_type: double
      - arg_types:
          - bool
          - float
        return_type: double
      - arg_types:
          - bool
          - double
        return_type: double
      - arg_types:
          - int16
          - bool
        return_type: double
      - arg_types:
          - int16
          - int16
        return_type: double
      - arg_types:
          - int16
          - int32
        return_type: double
      - arg_types:
          - int16
          - int64
        return_type: double
      - arg_types:
          - int16
          - float
        return_type: double
      - arg_types:
          - int16
          - double
        return_type: double
      - arg_types:
          - int32
          - bool
        return_type: double
      - arg_types:
          - int32
          - int16
        return_type: double
      - arg_types:
          - int32
          - int32
        return_type: double
      - arg_types:
          - int32
          - int64
        return_type: double
      - arg_types:
          - int32
          - float
        return_type: double
      - arg_types:
          - int32
          - double
        return_type: double
      - arg_types:
          - int64
          - bool
        return_type: double
      - arg_types:
          - int64
          - int16
        return_type: double
      - arg_types:
          - int64
          - int32
        return_type: double
      - arg_types:
          - int64
          - int64
        return_type: double
      - arg_types:
          - int64
          - float
        return_type: double
      - arg_types:
          - int64
          - double
        return_type: double
      - arg_types:
          - float
          - bool
        return_type: double
      - arg_types:
          - float
          - int16
        return_type: double
      - arg_types:
          - float
          - int32
        return_type: double
      - arg_types:
          - float
          - int64
        return_type: double
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - float
          - double
        return_type: double
      - arg_types:
          - double
          - bool
        return_type: double
      - arg_types:
          - double
          - int16
        return_type: double
      - arg_types:
          - double
          - int32
        return_type: double
      - arg_types:
          - double
          - int64
        return_type: double
      - arg_types:
          - double
          - float
        return_type: double
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
          - int64
        return_type: double
    doc: "\n            atan2(Y, X)\n            Return the arc tangent of Y / X..\n\n            @code{.sql}\n\n                SELECT ATAN2(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
          - double
        return_type: double
    doc: "\n            atan2(Y, X)\n            Return the arc tangent of Y / X..\n\n            @code{.sql}\n\n                SELECT ATAN2(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
          - int16
        return_type: double
    doc: "\n            atan2(Y, X)\n            Return the arc tangent of Y / X..\n\n            @code{.sql}\n\n                SELECT ATAN2(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
          - int32
        return_type: double
    doc: "\n            atan2(Y, X)\n            Return the arc tangent of Y / X..\n\n            @code{.sql}\n\n                SELECT ATAN2(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
date_format:
  - signatures:
      - arg_types:
          - date
          - string
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
          - string
        return_type: string
    doc: ""
    is_variadic: false
strcmp:
  - signatures:
      - arg_types:
          - string
          - string
        return_type: int32
    doc: "\n            Returns 0 if the strings are the same, -1 if the first argument is smaller than the second according to the current sort order, and 1 otherwise.\n\n            example\n            @code{.sql}\n\n                select strcmp(\"text\", \"text1\");\n                -- output -1\n                select strcmp(\"text1\", \"text\");\n                -- output 1\n                select strcmp(\"text\", \"text\");\n                -- output 0\n\n            @endcode\n            @since 2.0.0.0\n        "
    is_variadic: false
substr:
  - signatures:
      - arg_types:
          - string
          - int32
          - int32
        return_type: string
    doc: "\n            Return a substring `len` characters long from string str, starting at position `pos`.\n\n            @code{.sql}\n\n                select substr(\"hello world\", 3, 6);\n                -- output \"llo wo\"\n\n            @endcode\n\n            @param str\n            @param pos: define the begining of the substring.\n\n             - If `pos` is positive, the begining of the substring is `pos` charactors from the start of string.\n             - If `pos` is negative, the beginning of the substring is `pos` characters from the end of the string, rather than the beginning.\n\n            @param len length of substring. If len is less than 1, the result is the empty string.\n\n            @since 2.0.0.0\n        "
    is_variadic: false
  - signatures:
      - arg_types:
          - string
          - int32
        return_type: string
    doc: "\n            Return a substring from string `str` starting at position `pos `.\n\n            example:\n            @code{.sql}\n\n                select substr(\"hello world\", 2);\n                -- output \"llo world\"\n\n            @endcode\n\n            @param str\n            @param pos define the begining of the substring.\n\n            - If `pos` is positive, the begining of the substring is `pos` charactors from the start of string.\n            - If `pos` is negative, the beginning of the substring is `pos` characters from the end of the string, rather than the beginning.\n\n            @since 2.0.0.0\n            "
    is_variadic: false
truncate:
  - signatures:
      - arg_types:
          - int32
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: int32
      - arg_types:
          - int32
        return_type: int32
      - arg_types:
          - int64
        return_type: int64
      - arg_types:
          - float
        return_type: double
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int64
    doc: "\n            Return the nearest integer that is not greater in magnitude than the expr.\n\n            @code{.sql}\n\n                SELECT TRUNCATE(1.23);\n                -- output 1.0\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the nearest integer that is not greater in magnitude than the expr.\n\n            @code{.sql}\n\n                SELECT TRUNCATE(1.23);\n                -- output 1.0\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
round:
  - signatures:
      - arg_types:
          - int32
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: int32
      - arg_types:
          - int32
        return_type: int32
      - arg_types:
          - int64
        return_type: int64
      - arg_types:
          - float
        return_type: double
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int64
    doc: "\n            Return the nearest integer value to expr (in floating-point format), \n            rounding halfway cases away from zero, regardless of the current rounding mode.\n\n            @code{.sql}\n\n                SELECT ROUND(1.23);\n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the nearest integer value to expr (in floating-point format), \n            rounding halfway cases away from zero, regardless of the current rounding mode.\n\n            @code{.sql}\n\n                SELECT ROUND(1.23);\n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
power:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: double
      - arg_types:
          - bool
          - int16
        return_type: double
      - arg_types:
          - bool
          - int32
        return_type: double
      - arg_types:
          - bool
          - int64
        return_type: double
      - arg_types:
          - bool
          - float
        return_type: double
      - arg_types:
          - bool
          - double
        return_type: double
      - arg_types:
          - int16
          - bool
        return_type: double
      - arg_types:
          - int16
          - int16
        return_type: double
      - arg_types:
          - int16
          - int32
        return_type: double
      - arg_types:
          - int16
          - int64
        return_type: double
      - arg_types:
          - int16
          - float
        return_type: double
      - arg_types:
          - int16
          - double
        return_type: double
      - arg_types:
          - int32
          - bool
        return_type: double
      - arg_types:
          - int32
          - int16
        return_type: double
      - arg_types:
          - int32
          - int32
        return_type: double
      - arg_types:
          - int32
          - int64
        return_type: double
      - arg_types:
          - int32
          - float
        return_type: double
      - arg_types:
          - int32
          - double
        return_type: double
      - arg_types:
          - int64
          - bool
        return_type: double
      - arg_types:
          - int64
          - int16
        return_type: double
      - arg_types:
          - int64
          - int32
        return_type: double
      - arg_types:
          - int64
          - int64
        return_type: double
      - arg_types:
          - int64
          - float
        return_type: double
      - arg_types:
          - int64
          - double
        return_type: double
      - arg_types:
          - float
          - bool
        return_type: double
      - arg_types:
          - float
          - int16
        return_type: double
      - arg_types:
          - float
          - int32
        return_type: double
      - arg_types:
          - float
          - int64
        return_type: double
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - float
          - double
        return_type: double
      - arg_types:
          - double
          - bool
        return_type: double
      - arg_types:
          - double
          - int16
        return_type: double
      - arg_types:
          - double
          - int32
        return_type: double
      - arg_types:
          - double
          - int64
        return_type: double
      - arg_types:
          - double
          - float
        return_type: double
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
          - int64
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
          - double
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
          - int16
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
          - int32
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
pow:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: double
      - arg_types:
          - bool
          - int16
        return_type: double
      - arg_types:
          - bool
          - int32
        return_type: double
      - arg_types:
          - bool
          - int64
        return_type: double
      - arg_types:
          - bool
          - float
        return_type: double
      - arg_types:
          - bool
          - double
        return_type: double
      - arg_types:
          - int16
          - bool
        return_type: double
      - arg_types:
          - int16
          - int16
        return_type: double
      - arg_types:
          - int16
          - int32
        return_type: double
      - arg_types:
          - int16
          - int64
        return_type: double
      - arg_types:
          - int16
          - float
        return_type: double
      - arg_types:
          - int16
          - double
        return_type: double
      - arg_types:
          - int32
          - bool
        return_type: double
      - arg_types:
          - int32
          - int16
        return_type: double
      - arg_types:
          - int32
          - int32
        return_type: double
      - arg_types:
          - int32
          - int64
        return_type: double
      - arg_types:
          - int32
          - float
        return_type: double
      - arg_types:
          - int32
          - double
        return_type: double
      - arg_types:
          - int64
          - bool
        return_type: double
      - arg_types:
          - int64
          - int16
        return_type: double
      - arg_types:
          - int64
          - int32
        return_type: double
      - arg_types:
          - int64
          - int64
        return_type: double
      - arg_types:
          - int64
          - float
        return_type: double
      - arg_types:
          - int64
          - double
        return_type: double
      - arg_types:
          - float
          - bool
        return_type: double
      - arg_types:
          - float
          - int16
        return_type: double
      - arg_types:
          - float
          - int32
        return_type: double
      - arg_types:
          - float
          - int64
        return_type: double
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - float
          - double
        return_type: double
      - arg_types:
          - double
          - bool
        return_type: double
      - arg_types:
          - double
          - int16
        return_type: double
      - arg_types:
          - double
          - int32
        return_type: double
      - arg_types:
          - double
          - int64
        return_type: double
      - arg_types:
          - double
          - float
        return_type: double
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
          - int64
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
          - double
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
          - int16
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
          - int32
        return_type: double
    doc: "\n            pow(expr1, expr2)\n            Return the value of expr1 to the power of expr2.\n\n            @code{.sql}\n\n                SELECT POW(2, 10);\n                -- output 1024.000000\n\n            @endcode\n\n            @param expr1\n            @param expr2\n\n            @since 2.0.0.0"
    is_variadic: false
exp:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the value of e (the base of natural logarithms) raised to the power of expr.\n\n            @code{.sql}\n\n                SELECT EXP(0);  \n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return the value of e (the base of natural logarithms) raised to the power of expr.\n\n            @code{.sql}\n\n                SELECT EXP(0);  \n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return the value of e (the base of natural logarithms) raised to the power of expr.\n\n            @code{.sql}\n\n                SELECT EXP(0);  \n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return the value of e (the base of natural logarithms) raised to the power of expr.\n\n            @code{.sql}\n\n                SELECT EXP(0);  \n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
ceil:
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: int64
      - arg_types:
          - int32
        return_type: int64
      - arg_types:
          - int64
        return_type: int64
      - arg_types:
          - float
        return_type: double
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int64
    doc: "\n            Return the smallest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT CEIL(1.23);\n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: int64
    doc: "\n            Return the smallest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT CEIL(1.23);\n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: int64
    doc: "\n            Return the smallest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT CEIL(1.23);\n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
abs:
  - signatures:
      - arg_types:
          - int32
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: int32
      - arg_types:
          - int32
        return_type: int32
      - arg_types:
          - int64
        return_type: int64
      - arg_types:
          - float
        return_type: double
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int64
    doc: "\n            Return the absolute value of expr.\n\n            @code{.sql}\n\n                SELECT ABS(-32);\n                -- output 32\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the absolute value of expr.\n\n            @code{.sql}\n\n                SELECT ABS(-32);\n                -- output 32\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
atan:
  - signatures:
      - arg_types:
          - float
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
          - int64
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            atan(Y, X)\n            If called with one parameter, this function returns the arc tangent of expr.\n            If called with two parameters X and Y, this function returns the arc tangent of Y / X.\n\n            @code{.sql}\n\n                SELECT ATAN(-0.0);  \n                -- output -0.000000\n\n                SELECT ATAN(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            atan(Y, X)\n            If called with one parameter, this function returns the arc tangent of expr.\n            If called with two parameters X and Y, this function returns the arc tangent of Y / X.\n\n            @code{.sql}\n\n                SELECT ATAN(-0.0);  \n                -- output -0.000000\n\n                SELECT ATAN(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            atan(Y, X)\n            If called with one parameter, this function returns the arc tangent of expr.\n            If called with two parameters X and Y, this function returns the arc tangent of Y / X.\n\n            @code{.sql}\n\n                SELECT ATAN(-0.0);  \n                -- output -0.000000\n\n                SELECT ATAN(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
          - int32
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: double
      - arg_types:
          - bool
          - int16
        return_type: double
      - arg_types:
          - bool
          - int32
        return_type: double
      - arg_types:
          - bool
          - int64
        return_type: double
      - arg_types:
          - bool
          - float
        return_type: double
      - arg_types:
          - bool
          - double
        return_type: double
      - arg_types:
          - int16
          - bool
        return_type: double
      - arg_types:
          - int16
          - int16
        return_type: double
      - arg_types:
          - int16
          - int32
        return_type: double
      - arg_types:
          - int16
          - int64
        return_type: double
      - arg_types:
          - int16
          - float
        return_type: double
      - arg_types:
          - int16
          - double
        return_type: double
      - arg_types:
          - int32
          - bool
        return_type: double
      - arg_types:
          - int32
          - int16
        return_type: double
      - arg_types:
          - int32
          - int32
        return_type: double
      - arg_types:
          - int32
          - int64
        return_type: double
      - arg_types:
          - int32
          - float
        return_type: double
      - arg_types:
          - int32
          - double
        return_type: double
      - arg_types:
          - int64
          - bool
        return_type: double
      - arg_types:
          - int64
          - int16
        return_type: double
      - arg_types:
          - int64
          - int32
        return_type: double
      - arg_types:
          - int64
          - int64
        return_type: double
      - arg_types:
          - int64
          - float
        return_type: double
      - arg_types:
          - int64
          - double
        return_type: double
      - arg_types:
          - float
          - bool
        return_type: double
      - arg_types:
          - float
          - int16
        return_type: double
      - arg_types:
          - float
          - int32
        return_type: double
      - arg_types:
          - float
          - int64
        return_type: double
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - float
          - double
        return_type: double
      - arg_types:
          - double
          - bool
        return_type: double
      - arg_types:
          - double
          - int16
        return_type: double
      - arg_types:
          - double
          - int32
        return_type: double
      - arg_types:
          - double
          - int64
        return_type: double
      - arg_types:
          - double
          - float
        return_type: double
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            atan(Y, X)\n            If called with one parameter, this function returns the arc tangent of expr.\n            If called with two parameters X and Y, this function returns the arc tangent of Y / X.\n\n            @code{.sql}\n\n                SELECT ATAN(-0.0);  \n                -- output -0.000000\n\n                SELECT ATAN(0, -0);\n                -- output 3.141593\n\n            @endcode\n\n            @param X\n            @param Y\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
          - int16
        return_type: double
    doc: ""
    is_variadic: false
log2:
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: double
      - arg_types:
          - int32
        return_type: double
      - arg_types:
          - int64
        return_type: double
      - arg_types:
          - float
        return_type: float
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: "\n            Return the base-2 logarithm of expr.\n\n            @code{.sql}\n\n                SELECT LOG2(65536);  \n                -- output 16\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the base-2 logarithm of expr.\n\n            @code{.sql}\n\n                SELECT LOG2(65536);  \n                -- output 16\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
log:
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: double
      - arg_types:
          - int32
        return_type: double
      - arg_types:
          - int64
        return_type: double
      - arg_types:
          - float
        return_type: float
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: double
      - arg_types:
          - bool
          - date
        return_type: double
      - arg_types:
          - bool
          - timestamp
        return_type: double
      - arg_types:
          - bool
          - string
        return_type: double
      - arg_types:
          - bool
          - int16
        return_type: double
      - arg_types:
          - bool
          - int32
        return_type: double
      - arg_types:
          - bool
          - int64
        return_type: double
      - arg_types:
          - bool
          - float
        return_type: double
      - arg_types:
          - bool
          - double
        return_type: double
      - arg_types:
          - int16
          - bool
        return_type: double
      - arg_types:
          - int16
          - date
        return_type: double
      - arg_types:
          - int16
          - timestamp
        return_type: double
      - arg_types:
          - int16
          - string
        return_type: double
      - arg_types:
          - int16
          - int16
        return_type: double
      - arg_types:
          - int16
          - int32
        return_type: double
      - arg_types:
          - int16
          - int64
        return_type: double
      - arg_types:
          - int16
          - float
        return_type: double
      - arg_types:
          - int16
          - double
        return_type: double
      - arg_types:
          - int32
          - bool
        return_type: double
      - arg_types:
          - int32
          - date
        return_type: double
      - arg_types:
          - int32
          - timestamp
        return_type: double
      - arg_types:
          - int32
          - string
        return_type: double
      - arg_types:
          - int32
          - int16
        return_type: double
      - arg_types:
          - int32
          - int32
        return_type: double
      - arg_types:
          - int32
          - int64
        return_type: double
      - arg_types:
          - int32
          - float
        return_type: double
      - arg_types:
          - int32
          - double
        return_type: double
      - arg_types:
          - int64
          - bool
        return_type: double
      - arg_types:
          - int64
          - date
        return_type: double
      - arg_types:
          - int64
          - timestamp
        return_type: double
      - arg_types:
          - int64
          - string
        return_type: double
      - arg_types:
          - int64
          - int16
        return_type: double
      - arg_types:
          - int64
          - int32
        return_type: double
      - arg_types:
          - int64
          - int64
        return_type: double
      - arg_types:
          - int64
          - float
        return_type: double
      - arg_types:
          - int64
          - double
        return_type: double
      - arg_types:
          - float
          - bool
        return_type: double
      - arg_types:
          - float
          - date
        return_type: double
      - arg_types:
          - float
          - timestamp
        return_type: double
      - arg_types:
          - float
          - string
        return_type: double
      - arg_types:
          - float
          - int16
        return_type: double
      - arg_types:
          - float
          - int32
        return_type: double
      - arg_types:
          - float
          - int64
        return_type: double
      - arg_types:
          - float
          - float
        return_type: double
      - arg_types:
          - float
          - double
        return_type: double
      - arg_types:
          - double
          - bool
        return_type: double
      - arg_types:
          - double
          - date
        return_type: double
      - arg_types:
          - double
          - timestamp
        return_type: double
      - arg_types:
          - double
          - string
        return_type: double
      - arg_types:
          - double
          - int16
        return_type: double
      - arg_types:
          - double
          - int32
        return_type: double
      - arg_types:
          - double
          - int64
        return_type: double
      - arg_types:
          - double
          - float
        return_type: double
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: "\n            log(base, expr)\n            If called with one parameter, this function returns the natural logarithm of expr.\n            If called with two parameters, this function returns the logarithm of expr to the base.\n\n            @code{.sql}\n\n                SELECT LOG(1);  \n                -- output 0.000000\n\n                SELECT LOG(10,100);\n                -- output 2\n            @endcode\n\n            @param base\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            log(base, expr)\n            If called with one parameter, this function returns the natural logarithm of expr.\n            If called with two parameters, this function returns the logarithm of expr to the base.\n\n            @code{.sql}\n\n                SELECT LOG(1);  \n                -- output 0.000000\n\n                SELECT LOG(10,100);\n                -- output 2\n            @endcode\n\n            @param base\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
top_n_key_avg_cate_where:
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_avg_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
top_n_key_max_cate_where:
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n            5|true|z\n            6|false|z\n            @code{.sql}\n                SELECT top_n_key_max_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:3\"\n            @endcode\n            "
    is_variadic: false
ceiling:
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: int64
      - arg_types:
          - int32
        return_type: int64
      - arg_types:
          - int64
        return_type: int64
      - arg_types:
          - float
        return_type: double
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int64
    doc: "\n            Return the smallest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT CEIL(1.23);\n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: int64
    doc: "\n            Return the smallest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT CEIL(1.23);\n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: int64
    doc: "\n            Return the smallest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT CEIL(1.23);\n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
top_n_key_sum_cate_where:
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_sum_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:11,y:4\"\n            @endcode\n            "
    is_variadic: false
count_cate_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT count_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:1\"\n            @endcode\n            "
    is_variadic: false
asin:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the arc sine of expr.\n\n            @code{.sql}\n\n                SELECT ASIN(0.0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return the arc sine of expr.\n\n            @code{.sql}\n\n                SELECT ASIN(0.0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return the arc sine of expr.\n\n            @code{.sql}\n\n                SELECT ASIN(0.0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return the arc sine of expr.\n\n            @code{.sql}\n\n                SELECT ASIN(0.0);\n                -- output 0.000000\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
max_cate_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT max_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
sum_cate_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT sum_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
avg_cate:
  - signatures:
      - arg_types:
          - list_double
          - list_string
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_string
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_string
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_date
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_date
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_date
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_string
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int64
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_date
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int16
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int16
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_string
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int16
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int32
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int16
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int32
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int64
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int16
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_date
        return_type: string
    doc: "\n            Compute average of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT avg_cate(value, catagory) OVER w;\n                -- output \"x:2,y:2\"\n            @endcode\n            "
    is_variadic: false
max_cate:
  - signatures:
      - arg_types:
          - list_double
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_string
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_timestamp
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int32
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int16
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_date
        return_type: string
    doc: "\n            Compute maximum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT max_cate(value, catagory) OVER w;\n                -- output \"x:4,y:3\"\n            @endcode\n            "
    is_variadic: false
min_cate:
  - signatures:
      - arg_types:
          - list_double
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT min_cate(value, catagory) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
minute:
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
weekofyear:
  - signatures:
      - arg_types:
          - date
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
sum:
  - signatures:
      - arg_types:
          - list_float
        return_type: float
    doc: Compute sum of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
        return_type: int64
    doc: Compute sum of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
        return_type: double
    doc: Compute sum of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
        return_type: int16
    doc: Compute sum of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
        return_type: timestamp
    doc: Compute sum of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
        return_type: int32
    doc: Compute sum of values
    is_variadic: false
week:
  - signatures:
      - arg_types:
          - date
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
dayofweek:
  - signatures:
      - arg_types:
          - date
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
max_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
        return_type: float
    doc: Compute maximum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
        return_type: double
    doc: Compute maximum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
        return_type: int64
    doc: Compute maximum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
        return_type: int16
    doc: Compute maximum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
        return_type: int32
    doc: Compute maximum of values match specified condition
    is_variadic: false
string:
  - signatures:
      - arg_types:
          - date
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: string
    doc: ""
    is_variadic: false
sqrt:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return square root of expr.\n\n            @code{.sql}\n\n                SELECT SQRT(100);\n                -- output 10.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return square root of expr.\n\n            @code{.sql}\n\n                SELECT SQRT(100);\n                -- output 10.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return square root of expr.\n\n            @code{.sql}\n\n                SELECT SQRT(100);\n                -- output 10.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return square root of expr.\n\n            @code{.sql}\n\n                SELECT SQRT(100);\n                -- output 10.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            @since 2.0.0.0"
    is_variadic: false
day:
  - signatures:
      - arg_types:
          - date
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
avg_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
        return_type: double
    doc: Compute average of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
        return_type: double
    doc: Compute average of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
        return_type: double
    doc: Compute average of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
        return_type: double
    doc: Compute average of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
        return_type: double
    doc: Compute average of values match specified condition
    is_variadic: false
dayofmonth:
  - signatures:
      - arg_types:
          - date
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
concat_ws:
  - signatures:
      - arg_types:
          - bool
        return_type: string
      - arg_types:
          - date
        return_type: string
      - arg_types:
          - timestamp
        return_type: string
      - arg_types:
          - string
        return_type: string
      - arg_types:
          - int16
        return_type: string
      - arg_types:
          - int32
        return_type: string
      - arg_types:
          - int64
        return_type: string
      - arg_types:
          - float
        return_type: string
      - arg_types:
          - double
        return_type: string
    doc: ""
    is_variadic: true
is_null:
  - signatures:
      - arg_types:
          - bool
        return_type: bool
      - arg_types:
          - date
        return_type: bool
      - arg_types:
          - timestamp
        return_type: bool
      - arg_types:
          - string
        return_type: bool
      - arg_types:
          - int16
        return_type: bool
      - arg_types:
          - int32
        return_type: bool
      - arg_types:
          - int64
        return_type: bool
      - arg_types:
          - float
        return_type: bool
      - arg_types:
          - double
        return_type: bool
    doc: "\n            Check if input value is null, return bool.\n            @param input  Input value"
    is_variadic: false
if_null:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: bool
      - arg_types:
          - date
          - date
        return_type: date
      - arg_types:
          - timestamp
          - timestamp
        return_type: timestamp
      - arg_types:
          - string
          - string
        return_type: string
      - arg_types:
          - int16
          - int16
        return_type: int16
      - arg_types:
          - int32
          - int32
        return_type: int32
      - arg_types:
          - int64
          - int64
        return_type: int64
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - double
          - double
        return_type: double
    doc: "\n            If input is not null, return input value; else return default value.\n            @code{.sql}\n                SELECT if_null(\"hello\", \"default\"), if_null(NULL, \"default\");\n                -- output [\"hello\", \"default\"]\n            @endcode\n\n            @param input    Input value\n            @param default  Default value if input is null"
    is_variadic: false
ln:
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: double
      - arg_types:
          - int32
        return_type: double
      - arg_types:
          - int64
        return_type: double
      - arg_types:
          - float
        return_type: float
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: "\n            Return the natural logarithm of expr.\n\n            @code{.sql}\n\n                SELECT LN(1);  \n                -- output 0.000000\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the natural logarithm of expr.\n\n            @code{.sql}\n\n                SELECT LN(1);  \n                -- output 0.000000\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
max:
  - signatures:
      - arg_types:
          - list_date
        return_type: date
    doc: Compute max of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
        return_type: int32
    doc: Compute max of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
        return_type: timestamp
    doc: Compute max of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_string
        return_type: string
    doc: Compute max of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
        return_type: int16
    doc: Compute max of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
        return_type: double
    doc: Compute max of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
        return_type: int64
    doc: Compute max of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
        return_type: float
    doc: Compute max of values
    is_variadic: false
substring:
  - signatures:
      - arg_types:
          - string
          - int32
          - int32
        return_type: string
    doc: "\n            Return a substring `len` characters long from string str, starting at position `pos`.\n\n            @code{.sql}\n\n                select substr(\"hello world\", 3, 6);\n                -- output \"llo wo\"\n\n            @endcode\n\n            @param str\n            @param pos: define the begining of the substring.\n\n             - If `pos` is positive, the begining of the substring is `pos` charactors from the start of string.\n             - If `pos` is negative, the beginning of the substring is `pos` characters from the end of the string, rather than the beginning.\n\n            @param len length of substring. If len is less than 1, the result is the empty string.\n\n            @since 2.0.0.0\n        "
    is_variadic: false
  - signatures:
      - arg_types:
          - string
          - int32
        return_type: string
    doc: "\n            Return a substring from string `str` starting at position `pos `.\n\n            example:\n            @code{.sql}\n\n                select substr(\"hello world\", 2);\n                -- output \"llo world\"\n\n            @endcode\n\n            @param str\n            @param pos define the begining of the substring.\n\n            - If `pos` is positive, the begining of the substring is `pos` charactors from the start of string.\n            - If `pos` is negative, the beginning of the substring is `pos` characters from the end of the string, rather than the beginning.\n\n            @since 2.0.0.0\n            "
    is_variadic: false
inc:
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int64
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: int16
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: int32
    doc: ""
    is_variadic: false
ifnull:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: bool
      - arg_types:
          - date
          - date
        return_type: date
      - arg_types:
          - timestamp
          - timestamp
        return_type: timestamp
      - arg_types:
          - string
          - string
        return_type: string
      - arg_types:
          - int16
          - int16
        return_type: int16
      - arg_types:
          - int32
          - int32
        return_type: int32
      - arg_types:
          - int64
          - int64
        return_type: int64
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - double
          - double
        return_type: double
    doc: "\n            If input is not null, return input value; else return default value.\n            @code{.sql}\n                SELECT if_null(\"hello\", \"default\"), if_null(NULL, \"default\");\n                -- output [\"hello\", \"default\"]\n            @endcode\n\n            @param input    Input value\n            @param default  Default value if input is null"
    is_variadic: false
top_n_key_count_cate_where:
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute count of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_count_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:2,y:2\"\n            @endcode\n            "
    is_variadic: false
at:
  - signatures:
      - arg_types:
          - list_string
          - int32
        return_type: string
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - int32
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
          - int32
        return_type: timestamp
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - int32
        return_type: int64
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - int32
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - list_date
          - int32
        return_type: date
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - int32
        return_type: int16
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - int32
        return_type: double
    doc: ""
    is_variadic: false
isnull:
  - signatures:
      - arg_types:
          - bool
        return_type: bool
      - arg_types:
          - date
        return_type: bool
      - arg_types:
          - timestamp
        return_type: bool
      - arg_types:
          - string
        return_type: bool
      - arg_types:
          - int16
        return_type: bool
      - arg_types:
          - int32
        return_type: bool
      - arg_types:
          - int64
        return_type: bool
      - arg_types:
          - float
        return_type: bool
      - arg_types:
          - double
        return_type: bool
    doc: "\n            Check if input value is null, return bool.\n            @param input  Input value"
    is_variadic: false
year:
  - signatures:
      - arg_types:
          - date
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
log10:
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: double
      - arg_types:
          - int32
        return_type: double
      - arg_types:
          - int64
        return_type: double
      - arg_types:
          - float
        return_type: float
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: "\n            Return the base-10 logarithm of expr.\n\n            @code{.sql}\n\n                SELECT LOG10(100);  \n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the base-10 logarithm of expr.\n\n            @code{.sql}\n\n                SELECT LOG10(100);  \n                -- output 2\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
min_cate_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            1|true|y\n            4|true|x\n            3|true|y\n\n            @code{.sql}\n                SELECT min_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:0,y:1\"\n            @endcode\n            "
    is_variadic: false
month:
  - signatures:
      - arg_types:
          - date
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
acos:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the arc cosine of expr.\n\n            @code{.sql}\n\n                SELECT ACOS(1);\n                -- output 0\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return the arc cosine of expr.\n\n            @code{.sql}\n\n                SELECT ACOS(1);\n                -- output 0\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return the arc cosine of expr.\n\n            @code{.sql}\n\n                SELECT ACOS(1);\n                -- output 0\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return the arc cosine of expr.\n\n            @code{.sql}\n\n                SELECT ACOS(1);\n                -- output 0\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
floor:
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - bool
        return_type: double
      - arg_types:
          - int16
        return_type: int64
      - arg_types:
          - int32
        return_type: int64
      - arg_types:
          - int64
        return_type: int64
      - arg_types:
          - float
        return_type: double
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int64
    doc: "\n            Return the largest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT FLOOR(1.23);\n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: int64
    doc: "\n            Return the largest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT FLOOR(1.23);\n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: int64
    doc: "\n            Return the largest integer value not less than the expr\n\n            @code{.sql}\n\n                SELECT FLOOR(1.23);\n                -- output 1\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
identity:
  - signatures:
      - arg_types:
          - bool
        return_type: bool
      - arg_types:
          - date
        return_type: date
      - arg_types:
          - timestamp
        return_type: timestamp
      - arg_types:
          - string
        return_type: string
      - arg_types:
          - int16
        return_type: int16
      - arg_types:
          - int32
        return_type: int32
      - arg_types:
          - int64
        return_type: int64
      - arg_types:
          - float
        return_type: float
      - arg_types:
          - double
        return_type: double
    doc: ""
    is_variadic: false
maximum:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: bool
      - arg_types:
          - date
          - date
        return_type: date
      - arg_types:
          - timestamp
          - timestamp
        return_type: timestamp
      - arg_types:
          - string
          - string
        return_type: string
      - arg_types:
          - int16
          - int16
        return_type: int16
      - arg_types:
          - int32
          - int32
        return_type: int32
      - arg_types:
          - int64
          - int64
        return_type: int64
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
add:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: bool
      - arg_types:
          - bool
          - timestamp
        return_type: timestamp
      - arg_types:
          - bool
          - int16
        return_type: int16
      - arg_types:
          - bool
          - int32
        return_type: int32
      - arg_types:
          - bool
          - int64
        return_type: int64
      - arg_types:
          - bool
          - float
        return_type: float
      - arg_types:
          - bool
          - double
        return_type: double
      - arg_types:
          - date
          - date
        return_type: date
      - arg_types:
          - timestamp
          - bool
        return_type: timestamp
      - arg_types:
          - timestamp
          - timestamp
        return_type: timestamp
      - arg_types:
          - timestamp
          - int16
        return_type: timestamp
      - arg_types:
          - timestamp
          - int32
        return_type: timestamp
      - arg_types:
          - timestamp
          - int64
        return_type: timestamp
      - arg_types:
          - string
          - string
        return_type: string
      - arg_types:
          - int16
          - bool
        return_type: int16
      - arg_types:
          - int16
          - timestamp
        return_type: timestamp
      - arg_types:
          - int16
          - int16
        return_type: int16
      - arg_types:
          - int16
          - int32
        return_type: int32
      - arg_types:
          - int16
          - int64
        return_type: int64
      - arg_types:
          - int16
          - float
        return_type: float
      - arg_types:
          - int16
          - double
        return_type: double
      - arg_types:
          - int32
          - bool
        return_type: int32
      - arg_types:
          - int32
          - timestamp
        return_type: timestamp
      - arg_types:
          - int32
          - int16
        return_type: int32
      - arg_types:
          - int32
          - int32
        return_type: int32
      - arg_types:
          - int32
          - int64
        return_type: int64
      - arg_types:
          - int32
          - float
        return_type: float
      - arg_types:
          - int32
          - double
        return_type: double
      - arg_types:
          - int64
          - bool
        return_type: int64
      - arg_types:
          - int64
          - timestamp
        return_type: timestamp
      - arg_types:
          - int64
          - int16
        return_type: int64
      - arg_types:
          - int64
          - int32
        return_type: int64
      - arg_types:
          - int64
          - int64
        return_type: int64
      - arg_types:
          - int64
          - float
        return_type: float
      - arg_types:
          - int64
          - double
        return_type: double
      - arg_types:
          - float
          - bool
        return_type: float
      - arg_types:
          - float
          - int16
        return_type: float
      - arg_types:
          - float
          - int32
        return_type: float
      - arg_types:
          - float
          - int64
        return_type: float
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - float
          - double
        return_type: double
      - arg_types:
          - double
          - bool
        return_type: double
      - arg_types:
          - double
          - int16
        return_type: double
      - arg_types:
          - double
          - int32
        return_type: double
      - arg_types:
          - double
          - int64
        return_type: double
      - arg_types:
          - double
          - float
        return_type: double
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
min:
  - signatures:
      - arg_types:
          - list_date
        return_type: date
    doc: Compute min of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
        return_type: int32
    doc: Compute min of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
        return_type: timestamp
    doc: Compute min of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_string
        return_type: string
    doc: Compute min of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
        return_type: int16
    doc: Compute min of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
        return_type: double
    doc: Compute min of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
        return_type: int64
    doc: Compute min of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
        return_type: float
    doc: Compute min of values
    is_variadic: false
cot:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the cotangent of expr.\n\n            @code{.sql}\n\n                SELECT COT(1);  \n                -- output 0.6420926159343306\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return the cotangent of expr.\n\n            @code{.sql}\n\n                SELECT COT(1);  \n                -- output 0.6420926159343306\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return the cotangent of expr.\n\n            @code{.sql}\n\n                SELECT COT(1);  \n                -- output 0.6420926159343306\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return the cotangent of expr.\n\n            @code{.sql}\n\n                SELECT COT(1);  \n                -- output 0.6420926159343306\n\n            @endcode\n\n            @param expr\n\n            @since 2.0.0.0"
    is_variadic: false
concat:
  - signatures:
      - arg_types:
          []
        return_type: string
    doc: ""
    is_variadic: true
count_cate:
  - signatures:
      - arg_types:
          - list_double
          - list_string
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_string
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_string
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_date
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_date
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_date
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_string
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int64
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_date
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int16
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int16
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_string
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int16
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int32
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_timestamp
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int16
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int32
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int64
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int16
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_date
        return_type: string
    doc: "\n            Compute count of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT count_cate(value, catagory) OVER w;\n                -- output \"x:3,y:2\"\n            @endcode\n            "
    is_variadic: false
cos:
  - signatures:
      - arg_types:
          - float
        return_type: float
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - double
        return_type: double
    doc: "\n            Return the cosine of expr.\n\n            @code{.sql}\n\n                SELECT COS(0);\n                -- output 1.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by cos() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: double
    doc: "\n            Return the cosine of expr.\n\n            @code{.sql}\n\n                SELECT COS(0);\n                -- output 1.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by cos() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int16
        return_type: double
    doc: "\n            Return the cosine of expr.\n\n            @code{.sql}\n\n                SELECT COS(0);\n                -- output 1.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by cos() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
  - signatures:
      - arg_types:
          - int32
        return_type: double
    doc: "\n            Return the cosine of expr.\n\n            @code{.sql}\n\n                SELECT COS(0);\n                -- output 1.000000\n\n            @endcode\n\n            @param expr: It is a single argument in radians.\n\n            - The value returned by cos() is always in the range: -1 to 1.\n\n            @since 2.0.0.0"
    is_variadic: false
count:
  - signatures:
      - arg_types:
          - list_row
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_date
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_string
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
        return_type: int64
    doc: Compute count of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
        return_type: int64
    doc: Compute count of values
    is_variadic: false
make_tuple:
  - signatures:
      - arg_types:
          []
        return_type: tuple
    doc: ""
    is_variadic: true
sum_cate:
  - signatures:
      - arg_types:
          - list_double
          - list_string
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_string
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_string
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_date
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_date
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_date
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_string
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_date
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_string
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_timestamp
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int32
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int16
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_date
        return_type: string
    doc: "\n            Compute sum of values grouped by category key and output string.\n            Each group is represented as 'K:V' and separated by comma in outputs\n            and are sorted by key in ascend order.\n\n            @param value  Specify value column to aggregate on.\n            @param catagory  Specify catagory column to group by.\n\n            Example:\n            value|catagory\n            --|--\n            0|x\n            1|y\n            2|x\n            3|y\n            4|x\n            @code{.sql}\n                SELECT sum_cate(value, catagory) OVER w;\n                -- output \"x:6,y:4\"\n            @endcode\n            "
    is_variadic: false
top_n_key_min_cate_where:
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int32
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
          - list_int64
        return_type: string
    doc: "\n            Compute minimum of values matching specified condition grouped by category key.\n            Output string for top N keys in descend order. Each group is represented as 'K:V'\n            and separated by comma.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n            @param n  Fetch top n keys.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|true|y\n            2|false|x\n            3|true|y\n            4|false|x\n            5|true|z\n            6|true|z\n            @code{.sql}\n                SELECT top_n_key_min_cate_where(value, condition, catagory, 2) OVER w;\n                -- output \"z:5,y:1\"\n            @endcode\n            "
    is_variadic: false
avg:
  - signatures:
      - arg_types:
          - list_float
        return_type: double
    doc: Compute average of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
        return_type: double
    doc: Compute average of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
        return_type: double
    doc: Compute average of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
        return_type: double
    doc: Compute average of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
        return_type: double
    doc: Compute average of values
    is_variadic: false
avg_cate_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_string
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_date
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int16
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int32
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
          - list_timestamp
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
          - list_int64
        return_type: string
    doc: "\n            Compute average of values matching specified condition grouped by category key\n            and output string. Each group is represented as 'K:V' and separated by comma in \n            outputs and are sorted by key in ascend order.\n\n            @param catagory  Specify catagory column to group by. \n            @param value  Specify value column to aggregate on.\n            @param condition  Specify condition column.\n\n            Example:\n            value|condition|catagory\n            --|--|--\n            0|true|x\n            1|false|y\n            2|false|x\n            3|true|y\n            4|true|x\n\n            @code{.sql}\n                SELECT avg_cate_where(catagory, value, condition) OVER w;\n                -- output \"x:2,y:3\"\n            @endcode\n            "
    is_variadic: false
hour:
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
minimum:
  - signatures:
      - arg_types:
          - bool
          - bool
        return_type: bool
      - arg_types:
          - date
          - date
        return_type: date
      - arg_types:
          - timestamp
          - timestamp
        return_type: timestamp
      - arg_types:
          - string
          - string
        return_type: string
      - arg_types:
          - int16
          - int16
        return_type: int16
      - arg_types:
          - int32
          - int32
        return_type: int32
      - arg_types:
          - int64
          - int64
        return_type: int64
      - arg_types:
          - float
          - float
        return_type: float
      - arg_types:
          - double
          - double
        return_type: double
    doc: ""
    is_variadic: false
sum_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
        return_type: float
    doc: Compute sum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
        return_type: double
    doc: Compute sum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
        return_type: int64
    doc: Compute sum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
        return_type: int16
    doc: Compute sum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
        return_type: int32
    doc: Compute sum of values match specified condition
    is_variadic: false
count_where:
  - signatures:
      - arg_types:
          - list_string
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_date
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
          - list_bool
        return_type: int64
    doc: Compute number of values match specified condition
    is_variadic: false
second:
  - signatures:
      - arg_types:
          - timestamp
        return_type: int32
    doc: ""
    is_variadic: false
  - signatures:
      - arg_types:
          - int64
        return_type: int32
    doc: ""
    is_variadic: false
min_where:
  - signatures:
      - arg_types:
          - list_float
          - list_bool
        return_type: float
    doc: Compute minimum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_bool
        return_type: double
    doc: Compute minimum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_bool
        return_type: int64
    doc: Compute minimum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_bool
        return_type: int16
    doc: Compute minimum of values match specified condition
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_bool
        return_type: int32
    doc: Compute minimum of values match specified condition
    is_variadic: false
distinct_count:
  - signatures:
      - arg_types:
          - list_date
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_string
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
        return_type: int64
    doc: Compute distinct number of values
    is_variadic: false
top:
  - signatures:
      - arg_types:
          - list_string
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_string
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_date
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_date
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_float
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_double
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int16
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_timestamp
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int32
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int64
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
  - signatures:
      - arg_types:
          - list_int64
          - list_int32
        return_type: string
    doc: Compute top k of values and output string separated by comma. The outputs are sorted in desc order
    is_variadic: false
