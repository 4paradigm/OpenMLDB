# Copyright 2021 4Paradigm
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

db: test_zw
debugs: [ ]
cases:
  - id: 0
    desc: window optimized one key one ts
    inputs:
      - columns: [ "c1 string","c3 int","c6 timestamp","c7 timestamp" ]
        indexs: ["index1:c1:c6" ]
        rows:
          - [ "aa",1, 1590738990000, 1590738990000 ]
          - [ "aa",2, 1590738991000, 1590738991000 ]
          - [ "aa",3, 1590738992000, 1590738992000 ]
          - [ "aa",4, 1590738993000, 1590738993000 ]
          - [ "aa",5, 1590739001000, 1590738994000 ]
          - [ "aa",6, 1590739002000, 1590738995000 ]
    sql: |
      SELECT c1, c3, c6, c7,
      count(c1) OVER w1 as w1_cnt
      FROM {0} WINDOW
      w1 AS (PARTITION BY {0}.c1 ORDER BY {0}.c6 ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW);
    request_plan: |
      PROJECT(type=Aggregation)
        REQUEST_UNION(partition_keys=(), orders=() ASC, range=(auto_t0.c6, -3000, 0), index_keys=(auto_t0.c1))
          DATA_PROVIDER(request=auto_t0)
          DATA_PROVIDER(type=Partition, table=auto_t0, index=index1)
    expect:
      order: c3
      columns: [ "c1 string", "c3 int", "c6 timestamp", "c7 timestamp",  "w1_cnt bigint"]
      rows:
        - [ "aa", 1, 1590738990000, 1590738990000, 1]
        - [ "aa", 2, 1590738991000, 1590738991000, 2]
        - [ "aa", 3, 1590738992000, 1590738992000, 3]
        - [ "aa", 4, 1590738993000, 1590738993000, 4]
        - [ "aa", 5, 1590739001000, 1590738994000, 1]
        - [ "aa", 6, 1590739002000, 1590738995000, 2]
  - id: 1
    desc: window optimized different key same ts
    inputs:
      - columns: [ "c1 string","c3 int","c6 timestamp","c7 timestamp" ]
        indexs: ["index0:c3:c6", "index1:c1:c6" ]
        rows:
          - [ "aa",1, 1590738990000, 1590738990000 ]
          - [ "aa",2, 1590738991000, 1590738991000 ]
          - [ "aa",3, 1590738992000, 1590738992000 ]
          - [ "aa",4, 1590738993000, 1590738993000 ]
          - [ "aa",5, 1590739001000, 1590738994000 ]
          - [ "aa",6, 1590739002000, 1590738995000 ]
    sql: |
      SELECT c1, c3, c6, c7,
      count(c1) OVER w1 as w1_cnt
      FROM {0} WINDOW
      w1 AS (PARTITION BY {0}.c1 ORDER BY {0}.c6 ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW);
    request_plan: |
      PROJECT(type=Aggregation)
        REQUEST_UNION(partition_keys=(), orders=() ASC, range=(auto_t0.c6, -3000, 0), index_keys=(auto_t0.c1))
          DATA_PROVIDER(request=auto_t0)
          DATA_PROVIDER(type=Partition, table=auto_t0, index=index1)
    expect:
      order: c3
      columns: [ "c1 string", "c3 int", "c6 timestamp", "c7 timestamp",  "w1_cnt bigint"]
      rows:
        - [ "aa", 1, 1590738990000, 1590738990000, 1]
        - [ "aa", 2, 1590738991000, 1590738991000, 2]
        - [ "aa", 3, 1590738992000, 1590738992000, 3]
        - [ "aa", 4, 1590738993000, 1590738993000, 4]
        - [ "aa", 5, 1590739001000, 1590738994000, 1]
        - [ "aa", 6, 1590739002000, 1590738995000, 2]
  - id: 2
    desc: window optimized same key different ts
    mode: rtidb-batch-unsupport
    inputs:
      - columns: [ "c1 string","c3 int","c6 timestamp","c7 timestamp" ]
        indexs: [ "index0:c3:c7", "index1:c3:c6", "index2:c1:c7", "index3:c1:c6" ]
        rows:
          - [ "aa",1, 1590738990000, 1590738990000 ]
          - [ "aa",2, 1590738991000, 1590738991000 ]
          - [ "aa",3, 1590738992000, 1590738992000 ]
          - [ "aa",4, 1590738993000, 1590738993000 ]
          - [ "aa",5, 1590739001000, 1590738994000 ]
          - [ "aa",6, 1590739002000, 1590738995000 ]
    sql: |
      SELECT c1, c3, c6, c7,
      count(c1) OVER w1 as w1_cnt,
      count(c1) OVER w2 as w2_cnt
      FROM {0} WINDOW
      w1 AS (PARTITION BY {0}.c1 ORDER BY {0}.c6 ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW),
      w2 AS (PARTITION BY {0}.c1 ORDER BY {0}.c7 ROWS_RANGE BETWEEN 3s PRECEDING AND CURRENT ROW);
    request_plan: |
      SIMPLE_PROJECT(sources=(c1, c3, c6, c7, w1_cnt, w2_cnt))
        REQUEST_JOIN(type=kJoinTypeConcat)
          PROJECT(type=Aggregation)
            REQUEST_UNION(partition_keys=(), orders=() ASC, range=(auto_t0.c6, -3000, 0), index_keys=(auto_t0.c1))
              DATA_PROVIDER(request=auto_t0)
              DATA_PROVIDER(type=Partition, table=auto_t0, index=index3)
          PROJECT(type=Aggregation)
            REQUEST_UNION(partition_keys=(), orders=() ASC, range=(auto_t0.c7, -3000, 0), index_keys=(auto_t0.c1))
              DATA_PROVIDER(request=auto_t0)
              DATA_PROVIDER(type=Partition, table=auto_t0, index=index2)
    expect:
      order: c3
      columns: [ "c1 string", "c3 int", "c6 timestamp", "c7 timestamp",  "w1_cnt bigint", "w2_cnt bigint" ]
      rows:
        - [ "aa", 1, 1590738990000, 1590738990000, 1, 1 ]
        - [ "aa", 2, 1590738991000, 1590738991000, 2, 2 ]
        - [ "aa", 3, 1590738992000, 1590738992000, 3, 3 ]
        - [ "aa", 4, 1590738993000, 1590738993000, 4, 4 ]
        - [ "aa", 5, 1590739001000, 1590738994000, 1, 4 ]
        - [ "aa", 6, 1590739002000, 1590738995000, 2, 4 ]
  - id: 3
    desc: LastJoin optimized one key one ts
    inputs:
      - columns: [ "c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: [ "index1:c1:c4" ]
        rows:
          - [ "aa",2,3,1590738989000 ]
          - [ "bb",21,31,1590738990000 ]
      - columns: [ "c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: [ "index1:c1:c3", "index2:c1:c4" ]
        rows:
          - [ "aa",2,13,1590738990000 ]
          - [ "aa",21,131,1590738989000 ]
          - [ "bb",41,151,1590738988000 ]
    sql: |
      select {0}.c1,{0}.c2, t1.c3 as t1_c3, t1.c4 as t1_c4 from {0}
      last join {1} as t1 ORDER BY t1.c3 on {0}.c1 = t1.c1;
    request_plan: |
      SIMPLE_PROJECT(sources=(auto_t0.c1, auto_t0.c2, t1.c3 -> t1_c3, t1.c4 -> t1_c4))
        REQUEST_JOIN(type=LastJoin, right_sort=() ASC, condition=, left_keys=(), right_keys=(), index_keys=(auto_t0.c1))
          DATA_PROVIDER(request=auto_t0)
          RENAME(name=t1)
            DATA_PROVIDER(type=Partition, table=auto_t1, index=index1)
    expect:
      order: c1
      columns: [ "c1 string","c2 int","t1_c3 bigint","t1_c4 timestamp" ]
      rows:
        - [ "aa",2, 131, 1590738989000]
        - [ "bb",21,151, 1590738988000]
  - id: 4
    desc: LastJoin optimized one key two ts
    inputs:
      - columns: [ "c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: [ "index1:c1:c4" ]
        rows:
          - [ "aa",2,3,1590738989000 ]
          - [ "bb",21,31,1590738990000 ]
      - columns: [ "c1 string","c2 int","c3 bigint","c4 timestamp"]
        indexs: [ "index0:c2:c3", "index1:c1:c3", "index2:c1:c4" ]
        rows:
          - [ "aa",2,13,1590738990000 ]
          - [ "aa",21,131,1590738989000 ]
          - [ "bb",41,151,1590738988000 ]
    sql: |
      select {0}.c1,{0}.c2, t1.c3 as t1_c3, t1.c4 as t1_c4, t2.c3 as t2_c3, t2.c4 as t2_c4 from {0}
      last join {1} as t1 ORDER BY t1.c3 on {0}.c1 = t1.c1
      last join {1} as t2 ORDER BY t2.c4 on {0}.c1 = t2.c1;
    request_plan: |
      SIMPLE_PROJECT(sources=(auto_t0.c1, auto_t0.c2, t1.c3 -> t1_c3, t1.c4 -> t1_c4, t2.c3 -> t2_c3, t2.c4 -> t2_c4))
        REQUEST_JOIN(type=LastJoin, right_sort=() ASC, condition=, left_keys=(), right_keys=(), index_keys=(auto_t0.c1))
          REQUEST_JOIN(type=LastJoin, right_sort=() ASC, condition=, left_keys=(), right_keys=(), index_keys=(auto_t0.c1))
            DATA_PROVIDER(request=auto_t0)
            RENAME(name=t1)
              DATA_PROVIDER(type=Partition, table=auto_t1, index=index1)
          RENAME(name=t2)
            DATA_PROVIDER(type=Partition, table=auto_t1, index=index2)
    expect:
      order: c1
      columns: [ "c1 string","c2 int","t1_c3 bigint","t1_c4 timestamp", "t2_c3 bigint","t2_c4 timestamp" ]
      rows:
        - [ "aa",2, 131, 1590738989000, 13, 1590738990000 ]
        - [ "bb",21,151, 1590738988000, 151,1590738988000 ]
