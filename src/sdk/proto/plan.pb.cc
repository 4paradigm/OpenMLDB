// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plan.proto

#include "plan.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fe_5ftype_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5ftype_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ColumnDef;
}  // namespace protobuf_fe_5ftype_2eproto
namespace protobuf_plan_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeDesc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plan_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_NodeValue;
}  // namespace protobuf_plan_2eproto
namespace hybridse {
namespace batch {
class NodeDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeDesc>
      _instance;
} _NodeDesc_default_instance_;
class NodeValueDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<NodeValue>
      _instance;
} _NodeValue_default_instance_;
class GraphDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GraphDesc>
      _instance;
} _GraphDesc_default_instance_;
class DataSourceDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataSource>
      _instance;
} _DataSource_default_instance_;
class DataSinkDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataSink>
      _instance;
} _DataSink_default_instance_;
class MapDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MapDesc>
      _instance;
} _MapDesc_default_instance_;
}  // namespace batch
}  // namespace hybridse
namespace protobuf_plan_2eproto {
static void InitDefaultsNodeDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_NodeDesc_default_instance_;
    new (ptr) ::hybridse::batch::NodeDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::NodeDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeDesc}, {}};

static void InitDefaultsNodeValue() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_NodeValue_default_instance_;
    new (ptr) ::hybridse::batch::NodeValue();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::NodeValue::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_NodeValue =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsNodeValue}, {}};

static void InitDefaultsGraphDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_GraphDesc_default_instance_;
    new (ptr) ::hybridse::batch::GraphDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::GraphDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GraphDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGraphDesc}, {
      &protobuf_plan_2eproto::scc_info_NodeDesc.base,
      &protobuf_plan_2eproto::scc_info_NodeValue.base,}};

static void InitDefaultsDataSource() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_DataSource_default_instance_;
    new (ptr) ::hybridse::batch::DataSource();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::DataSource::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataSource =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataSource}, {
      &protobuf_fe_5ftype_2eproto::scc_info_ColumnDef.base,}};

static void InitDefaultsDataSink() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_DataSink_default_instance_;
    new (ptr) ::hybridse::batch::DataSink();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::DataSink::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DataSink =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDataSink}, {}};

static void InitDefaultsMapDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_MapDesc_default_instance_;
    new (ptr) ::hybridse::batch::MapDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::MapDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_MapDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsMapDesc}, {
      &protobuf_fe_5ftype_2eproto::scc_info_ColumnDef.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_NodeDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_NodeValue.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GraphDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataSource.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DataSink.base);
  ::google::protobuf::internal::InitSCC(&scc_info_MapDesc.base);
}

::google::protobuf::Metadata file_level_metadata[6];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeDesc, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeDesc, op_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeDesc, inputs_),
  1,
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeValue, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeValue, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeValue, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeValue, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::NodeValue, value_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::GraphDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::GraphDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::GraphDesc, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::GraphDesc, nodes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::GraphDesc, values_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::GraphDesc, ir_),
  1,
  ~0u,
  ~0u,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSource, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSource, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSource, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSource, schema_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSink, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSink, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSink, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSink, name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::MapDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::MapDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::MapDesc, fn_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::MapDesc, output_schema_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::hybridse::batch::NodeDesc)},
  { 11, 19, sizeof(::hybridse::batch::NodeValue)},
  { 22, 31, sizeof(::hybridse::batch::GraphDesc)},
  { 35, 43, sizeof(::hybridse::batch::DataSource)},
  { 46, 53, sizeof(::hybridse::batch::DataSink)},
  { 55, 62, sizeof(::hybridse::batch::MapDesc)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_NodeDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_NodeValue_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_GraphDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_DataSource_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_DataSink_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_MapDesc_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "plan.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 6);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nplan.proto\022\016hybridse.batch\032\rfe_type.pr"
      "oto\032\017fe_common.proto\"2\n\010NodeDesc\022\n\n\002id\030\001"
      " \001(\r\022\n\n\002op\030\002 \001(\t\022\016\n\006inputs\030\003 \003(\r\"P\n\tNode"
      "Value\022\n\n\002id\030\001 \001(\r\022(\n\004type\030\002 \001(\0162\032.hybrid"
      "se.batch.PlanOpType\022\r\n\005value\030\003 \001(\014\"w\n\tGr"
      "aphDesc\022\n\n\002id\030\001 \001(\r\022\'\n\005nodes\030\002 \003(\0132\030.hyb"
      "ridse.batch.NodeDesc\022)\n\006values\030\003 \003(\0132\031.h"
      "ybridse.batch.NodeValue\022\n\n\002ir\030\004 \001(\t\"P\n\nD"
      "ataSource\022\n\n\002db\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022(\n\006s"
      "chema\030\003 \003(\0132\030.hybridse.type.ColumnDef\"$\n"
      "\010DataSink\022\n\n\002db\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\"I\n\007M"
      "apDesc\022\r\n\005fn_id\030\001 \001(\t\022/\n\routput_schema\030\002"
      " \003(\0132\030.hybridse.type.ColumnDef*J\n\nPlanOp"
      "Type\022\020\n\014kPartitionOp\020\001\022\n\n\006kMapOp\020\002\022\r\n\tkD"
      "ataSink\020\003\022\017\n\013kDataSource\020\004B\"\n\035com._4para"
      "digm.hybridse.batch\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 622);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "plan.proto", &protobuf_RegisterTypes);
  ::protobuf_fe_5ftype_2eproto::AddDescriptors();
  ::protobuf_fe_5fcommon_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_plan_2eproto
namespace hybridse {
namespace batch {
const ::google::protobuf::EnumDescriptor* PlanOpType_descriptor() {
  protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_plan_2eproto::file_level_enum_descriptors[0];
}
bool PlanOpType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void NodeDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeDesc::kIdFieldNumber;
const int NodeDesc::kOpFieldNumber;
const int NodeDesc::kInputsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeDesc::NodeDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plan_2eproto::scc_info_NodeDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.NodeDesc)
}
NodeDesc::NodeDesc(const NodeDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      inputs_(from.inputs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_op()) {
    op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.NodeDesc)
}

void NodeDesc::SharedCtor() {
  op_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

NodeDesc::~NodeDesc() {
  // @@protoc_insertion_point(destructor:hybridse.batch.NodeDesc)
  SharedDtor();
}

void NodeDesc::SharedDtor() {
  op_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeDesc::descriptor() {
  ::protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeDesc& NodeDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plan_2eproto::scc_info_NodeDesc.base);
  return *internal_default_instance();
}


void NodeDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.NodeDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  inputs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    op_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.NodeDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string op = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_op()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->op().data(), static_cast<int>(this->op().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.NodeDesc.op");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 inputs = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24u, input, this->mutable_inputs())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_inputs())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.NodeDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.NodeDesc)
  return false;
#undef DO_
}

void NodeDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.NodeDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional string op = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.NodeDesc.op");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->op(), output);
  }

  // repeated uint32 inputs = 3;
  for (int i = 0, n = this->inputs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->inputs(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.NodeDesc)
}

::google::protobuf::uint8* NodeDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.NodeDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional string op = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->op().data(), static_cast<int>(this->op().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.NodeDesc.op");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->op(), target);
  }

  // repeated uint32 inputs = 3;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt32ToArray(3, this->inputs_, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.NodeDesc)
  return target;
}

size_t NodeDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.NodeDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated uint32 inputs = 3;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->inputs_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->inputs_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->op());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.NodeDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.NodeDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.NodeDesc)
    MergeFrom(*source);
  }
}

void NodeDesc::MergeFrom(const NodeDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.NodeDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  inputs_.MergeFrom(from.inputs_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_op();
      op_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.op_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.NodeDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeDesc::CopyFrom(const NodeDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.NodeDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeDesc::IsInitialized() const {
  return true;
}

void NodeDesc::Swap(NodeDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeDesc::InternalSwap(NodeDesc* other) {
  using std::swap;
  inputs_.InternalSwap(&other->inputs_);
  op_.Swap(&other->op_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeDesc::GetMetadata() const {
  protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void NodeValue::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NodeValue::kIdFieldNumber;
const int NodeValue::kTypeFieldNumber;
const int NodeValue::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NodeValue::NodeValue()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plan_2eproto::scc_info_NodeValue.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.NodeValue)
}
NodeValue::NodeValue(const NodeValue& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.NodeValue)
}

void NodeValue::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
  type_ = 1;
}

NodeValue::~NodeValue() {
  // @@protoc_insertion_point(destructor:hybridse.batch.NodeValue)
  SharedDtor();
}

void NodeValue::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NodeValue::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* NodeValue::descriptor() {
  ::protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const NodeValue& NodeValue::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plan_2eproto::scc_info_NodeValue.base);
  return *internal_default_instance();
}


void NodeValue::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.NodeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    id_ = 0u;
    type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool NodeValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.NodeValue)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hybridse.batch.PlanOpType type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hybridse::batch::PlanOpType_IsValid(value)) {
            set_type(static_cast< ::hybridse::batch::PlanOpType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.NodeValue)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.NodeValue)
  return false;
#undef DO_
}

void NodeValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.NodeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // optional .hybridse.batch.PlanOpType type = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional bytes value = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.NodeValue)
}

::google::protobuf::uint8* NodeValue::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.NodeValue)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // optional .hybridse.batch.PlanOpType type = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional bytes value = 3;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.NodeValue)
  return target;
}

size_t NodeValue::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.NodeValue)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional bytes value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

    // optional .hybridse.batch.PlanOpType type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NodeValue::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.NodeValue)
  GOOGLE_DCHECK_NE(&from, this);
  const NodeValue* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const NodeValue>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.NodeValue)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.NodeValue)
    MergeFrom(*source);
  }
}

void NodeValue::MergeFrom(const NodeValue& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.NodeValue)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NodeValue::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.NodeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeValue::CopyFrom(const NodeValue& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.NodeValue)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeValue::IsInitialized() const {
  return true;
}

void NodeValue::Swap(NodeValue* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NodeValue::InternalSwap(NodeValue* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata NodeValue::GetMetadata() const {
  protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GraphDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GraphDesc::kIdFieldNumber;
const int GraphDesc::kNodesFieldNumber;
const int GraphDesc::kValuesFieldNumber;
const int GraphDesc::kIrFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GraphDesc::GraphDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plan_2eproto::scc_info_GraphDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.GraphDesc)
}
GraphDesc::GraphDesc(const GraphDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      nodes_(from.nodes_),
      values_(from.values_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ir()) {
    ir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ir_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.GraphDesc)
}

void GraphDesc::SharedCtor() {
  ir_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = 0u;
}

GraphDesc::~GraphDesc() {
  // @@protoc_insertion_point(destructor:hybridse.batch.GraphDesc)
  SharedDtor();
}

void GraphDesc::SharedDtor() {
  ir_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GraphDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GraphDesc::descriptor() {
  ::protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GraphDesc& GraphDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plan_2eproto::scc_info_GraphDesc.base);
  return *internal_default_instance();
}


void GraphDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.GraphDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nodes_.Clear();
  values_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ir_.ClearNonDefaultToEmptyNoArena();
  }
  id_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GraphDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.GraphDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hybridse.batch.NodeDesc nodes = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_nodes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hybridse.batch.NodeValue values = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_values()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ir = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ir().data(), static_cast<int>(this->ir().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.GraphDesc.ir");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.GraphDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.GraphDesc)
  return false;
#undef DO_
}

void GraphDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.GraphDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // repeated .hybridse.batch.NodeDesc nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->nodes(static_cast<int>(i)),
      output);
  }

  // repeated .hybridse.batch.NodeValue values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->values(static_cast<int>(i)),
      output);
  }

  // optional string ir = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ir().data(), static_cast<int>(this->ir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.GraphDesc.ir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ir(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.GraphDesc)
}

::google::protobuf::uint8* GraphDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.GraphDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // repeated .hybridse.batch.NodeDesc nodes = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->nodes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->nodes(static_cast<int>(i)), deterministic, target);
  }

  // repeated .hybridse.batch.NodeValue values = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->values_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->values(static_cast<int>(i)), deterministic, target);
  }

  // optional string ir = 4;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ir().data(), static_cast<int>(this->ir().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.GraphDesc.ir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ir(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.GraphDesc)
  return target;
}

size_t GraphDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.GraphDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .hybridse.batch.NodeDesc nodes = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->nodes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->nodes(static_cast<int>(i)));
    }
  }

  // repeated .hybridse.batch.NodeValue values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->values_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->values(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string ir = 4;
    if (has_ir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ir());
    }

    // optional uint32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->id());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GraphDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.GraphDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const GraphDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GraphDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.GraphDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.GraphDesc)
    MergeFrom(*source);
  }
}

void GraphDesc::MergeFrom(const GraphDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.GraphDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  nodes_.MergeFrom(from.nodes_);
  values_.MergeFrom(from.values_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_ir();
      ir_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ir_);
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GraphDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.GraphDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GraphDesc::CopyFrom(const GraphDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.GraphDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GraphDesc::IsInitialized() const {
  return true;
}

void GraphDesc::Swap(GraphDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GraphDesc::InternalSwap(GraphDesc* other) {
  using std::swap;
  CastToBase(&nodes_)->InternalSwap(CastToBase(&other->nodes_));
  CastToBase(&values_)->InternalSwap(CastToBase(&other->values_));
  ir_.Swap(&other->ir_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GraphDesc::GetMetadata() const {
  protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataSource::InitAsDefaultInstance() {
}
void DataSource::clear_schema() {
  schema_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSource::kDbFieldNumber;
const int DataSource::kNameFieldNumber;
const int DataSource::kSchemaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSource::DataSource()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plan_2eproto::scc_info_DataSource.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.DataSource)
}
DataSource::DataSource(const DataSource& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      schema_(from.schema_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db()) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.DataSource)
}

void DataSource::SharedCtor() {
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataSource::~DataSource() {
  // @@protoc_insertion_point(destructor:hybridse.batch.DataSource)
  SharedDtor();
}

void DataSource::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataSource::descriptor() {
  ::protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSource& DataSource::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plan_2eproto::scc_info_DataSource.base);
  return *internal_default_instance();
}


void DataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  schema_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      db_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.DataSource)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.DataSource.db");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.DataSource.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hybridse.type.ColumnDef schema = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.DataSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.DataSource)
  return false;
#undef DO_
}

void DataSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string db = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSource.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSource.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // repeated .hybridse.type.ColumnDef schema = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schema_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3,
      this->schema(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.DataSource)
}

::google::protobuf::uint8* DataSource::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.DataSource)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string db = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSource.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSource.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // repeated .hybridse.type.ColumnDef schema = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->schema_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->schema(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.DataSource)
  return target;
}

size_t DataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.DataSource)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .hybridse.type.ColumnDef schema = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->schema_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->schema(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string db = 1;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSource::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSource* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSource>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.DataSource)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.DataSource)
    MergeFrom(*source);
  }
}

void DataSource::MergeFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.DataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  schema_.MergeFrom(from.schema_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
}

void DataSource::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSource::CopyFrom(const DataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.DataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSource::IsInitialized() const {
  return true;
}

void DataSource::Swap(DataSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSource::InternalSwap(DataSource* other) {
  using std::swap;
  CastToBase(&schema_)->InternalSwap(CastToBase(&other->schema_));
  db_.Swap(&other->db_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataSource::GetMetadata() const {
  protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DataSink::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSink::kDbFieldNumber;
const int DataSink::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSink::DataSink()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plan_2eproto::scc_info_DataSink.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.DataSink)
}
DataSink::DataSink(const DataSink& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db()) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.DataSink)
}

void DataSink::SharedCtor() {
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DataSink::~DataSink() {
  // @@protoc_insertion_point(destructor:hybridse.batch.DataSink)
  SharedDtor();
}

void DataSink::SharedDtor() {
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DataSink::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataSink::descriptor() {
  ::protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSink& DataSink::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plan_2eproto::scc_info_DataSink.base);
  return *internal_default_instance();
}


void DataSink::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.DataSink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      db_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataSink::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.DataSink)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.DataSink.db");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.DataSink.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.DataSink)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.DataSink)
  return false;
#undef DO_
}

void DataSink::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.DataSink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string db = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSink.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db(), output);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSink.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.DataSink)
}

::google::protobuf::uint8* DataSink::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.DataSink)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string db = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSink.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db(), target);
  }

  // optional string name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSink.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.DataSink)
  return target;
}

size_t DataSink::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.DataSink)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string db = 1;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSink::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.DataSink)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSink* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSink>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.DataSink)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.DataSink)
    MergeFrom(*source);
  }
}

void DataSink::MergeFrom(const DataSink& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.DataSink)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
  }
}

void DataSink::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.DataSink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSink::CopyFrom(const DataSink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.DataSink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSink::IsInitialized() const {
  return true;
}

void DataSink::Swap(DataSink* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSink::InternalSwap(DataSink* other) {
  using std::swap;
  db_.Swap(&other->db_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataSink::GetMetadata() const {
  protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MapDesc::InitAsDefaultInstance() {
}
void MapDesc::clear_output_schema() {
  output_schema_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MapDesc::kFnIdFieldNumber;
const int MapDesc::kOutputSchemaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MapDesc::MapDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_plan_2eproto::scc_info_MapDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.MapDesc)
}
MapDesc::MapDesc(const MapDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      output_schema_(from.output_schema_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  fn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_fn_id()) {
    fn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fn_id_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.MapDesc)
}

void MapDesc::SharedCtor() {
  fn_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MapDesc::~MapDesc() {
  // @@protoc_insertion_point(destructor:hybridse.batch.MapDesc)
  SharedDtor();
}

void MapDesc::SharedDtor() {
  fn_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MapDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* MapDesc::descriptor() {
  ::protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MapDesc& MapDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_plan_2eproto::scc_info_MapDesc.base);
  return *internal_default_instance();
}


void MapDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.MapDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_schema_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    fn_id_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MapDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.MapDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string fn_id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fn_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fn_id().data(), static_cast<int>(this->fn_id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.MapDesc.fn_id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hybridse.type.ColumnDef output_schema = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_output_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.MapDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.MapDesc)
  return false;
#undef DO_
}

void MapDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.MapDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fn_id().data(), static_cast<int>(this->fn_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.MapDesc.fn_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->fn_id(), output);
  }

  // repeated .hybridse.type.ColumnDef output_schema = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_schema_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->output_schema(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.MapDesc)
}

::google::protobuf::uint8* MapDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.MapDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string fn_id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fn_id().data(), static_cast<int>(this->fn_id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.MapDesc.fn_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->fn_id(), target);
  }

  // repeated .hybridse.type.ColumnDef output_schema = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->output_schema_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->output_schema(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.MapDesc)
  return target;
}

size_t MapDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.MapDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .hybridse.type.ColumnDef output_schema = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->output_schema_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->output_schema(static_cast<int>(i)));
    }
  }

  // optional string fn_id = 1;
  if (has_fn_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->fn_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MapDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.MapDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const MapDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MapDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.MapDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.MapDesc)
    MergeFrom(*source);
  }
}

void MapDesc::MergeFrom(const MapDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.MapDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output_schema_.MergeFrom(from.output_schema_);
  if (from.has_fn_id()) {
    set_has_fn_id();
    fn_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.fn_id_);
  }
}

void MapDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.MapDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapDesc::CopyFrom(const MapDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.MapDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapDesc::IsInitialized() const {
  return true;
}

void MapDesc::Swap(MapDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MapDesc::InternalSwap(MapDesc* other) {
  using std::swap;
  CastToBase(&output_schema_)->InternalSwap(CastToBase(&other->output_schema_));
  fn_id_.Swap(&other->fn_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata MapDesc::GetMetadata() const {
  protobuf_plan_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_plan_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace batch
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::NodeDesc* Arena::CreateMaybeMessage< ::hybridse::batch::NodeDesc >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::NodeDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::NodeValue* Arena::CreateMaybeMessage< ::hybridse::batch::NodeValue >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::NodeValue >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::GraphDesc* Arena::CreateMaybeMessage< ::hybridse::batch::GraphDesc >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::GraphDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::DataSource* Arena::CreateMaybeMessage< ::hybridse::batch::DataSource >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::DataSource >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::DataSink* Arena::CreateMaybeMessage< ::hybridse::batch::DataSink >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::DataSink >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::MapDesc* Arena::CreateMaybeMessage< ::hybridse::batch::MapDesc >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::MapDesc >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
