// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: plan.proto

#ifndef PROTOBUF_INCLUDED_plan_2eproto
#define PROTOBUF_INCLUDED_plan_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "fe_type.pb.h"
#include "fe_common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_plan_2eproto 

namespace protobuf_plan_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_plan_2eproto
namespace hybridse {
namespace batch {
class DataSink;
class DataSinkDefaultTypeInternal;
extern DataSinkDefaultTypeInternal _DataSink_default_instance_;
class DataSource;
class DataSourceDefaultTypeInternal;
extern DataSourceDefaultTypeInternal _DataSource_default_instance_;
class GraphDesc;
class GraphDescDefaultTypeInternal;
extern GraphDescDefaultTypeInternal _GraphDesc_default_instance_;
class MapDesc;
class MapDescDefaultTypeInternal;
extern MapDescDefaultTypeInternal _MapDesc_default_instance_;
class NodeDesc;
class NodeDescDefaultTypeInternal;
extern NodeDescDefaultTypeInternal _NodeDesc_default_instance_;
class NodeValue;
class NodeValueDefaultTypeInternal;
extern NodeValueDefaultTypeInternal _NodeValue_default_instance_;
}  // namespace batch
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> ::hybridse::batch::DataSink* Arena::CreateMaybeMessage<::hybridse::batch::DataSink>(Arena*);
template<> ::hybridse::batch::DataSource* Arena::CreateMaybeMessage<::hybridse::batch::DataSource>(Arena*);
template<> ::hybridse::batch::GraphDesc* Arena::CreateMaybeMessage<::hybridse::batch::GraphDesc>(Arena*);
template<> ::hybridse::batch::MapDesc* Arena::CreateMaybeMessage<::hybridse::batch::MapDesc>(Arena*);
template<> ::hybridse::batch::NodeDesc* Arena::CreateMaybeMessage<::hybridse::batch::NodeDesc>(Arena*);
template<> ::hybridse::batch::NodeValue* Arena::CreateMaybeMessage<::hybridse::batch::NodeValue>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hybridse {
namespace batch {

enum PlanOpType {
  kPartitionOp = 1,
  kMapOp = 2,
  kDataSink = 3,
  kDataSource = 4
};
bool PlanOpType_IsValid(int value);
const PlanOpType PlanOpType_MIN = kPartitionOp;
const PlanOpType PlanOpType_MAX = kDataSource;
const int PlanOpType_ARRAYSIZE = PlanOpType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PlanOpType_descriptor();
inline const ::std::string& PlanOpType_Name(PlanOpType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PlanOpType_descriptor(), value);
}
inline bool PlanOpType_Parse(
    const ::std::string& name, PlanOpType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PlanOpType>(
    PlanOpType_descriptor(), name, value);
}
// ===================================================================

class NodeDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.NodeDesc) */ {
 public:
  NodeDesc();
  virtual ~NodeDesc();

  NodeDesc(const NodeDesc& from);

  inline NodeDesc& operator=(const NodeDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeDesc(NodeDesc&& from) noexcept
    : NodeDesc() {
    *this = ::std::move(from);
  }

  inline NodeDesc& operator=(NodeDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeDesc* internal_default_instance() {
    return reinterpret_cast<const NodeDesc*>(
               &_NodeDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(NodeDesc* other);
  friend void swap(NodeDesc& a, NodeDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeDesc* New() const final {
    return CreateMaybeMessage<NodeDesc>(NULL);
  }

  NodeDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeDesc& from);
  void MergeFrom(const NodeDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 inputs = 3;
  int inputs_size() const;
  void clear_inputs();
  static const int kInputsFieldNumber = 3;
  ::google::protobuf::uint32 inputs(int index) const;
  void set_inputs(int index, ::google::protobuf::uint32 value);
  void add_inputs(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      inputs() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_inputs();

  // optional string op = 2;
  bool has_op() const;
  void clear_op();
  static const int kOpFieldNumber = 2;
  const ::std::string& op() const;
  void set_op(const ::std::string& value);
  #if LANG_CXX11
  void set_op(::std::string&& value);
  #endif
  void set_op(const char* value);
  void set_op(const char* value, size_t size);
  ::std::string* mutable_op();
  ::std::string* release_op();
  void set_allocated_op(::std::string* op);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hybridse.batch.NodeDesc)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_op();
  void clear_has_op();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > inputs_;
  ::google::protobuf::internal::ArenaStringPtr op_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_plan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NodeValue : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.NodeValue) */ {
 public:
  NodeValue();
  virtual ~NodeValue();

  NodeValue(const NodeValue& from);

  inline NodeValue& operator=(const NodeValue& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  NodeValue(NodeValue&& from) noexcept
    : NodeValue() {
    *this = ::std::move(from);
  }

  inline NodeValue& operator=(NodeValue&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NodeValue& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NodeValue* internal_default_instance() {
    return reinterpret_cast<const NodeValue*>(
               &_NodeValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(NodeValue* other);
  friend void swap(NodeValue& a, NodeValue& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline NodeValue* New() const final {
    return CreateMaybeMessage<NodeValue>(NULL);
  }

  NodeValue* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<NodeValue>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const NodeValue& from);
  void MergeFrom(const NodeValue& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NodeValue* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes value = 3;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 3;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const void* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // optional .hybridse.batch.PlanOpType type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::hybridse::batch::PlanOpType type() const;
  void set_type(::hybridse::batch::PlanOpType value);

  // @@protoc_insertion_point(class_scope:hybridse.batch.NodeValue)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_type();
  void clear_has_type();
  void set_has_value();
  void clear_has_value();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  ::google::protobuf::uint32 id_;
  int type_;
  friend struct ::protobuf_plan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GraphDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.GraphDesc) */ {
 public:
  GraphDesc();
  virtual ~GraphDesc();

  GraphDesc(const GraphDesc& from);

  inline GraphDesc& operator=(const GraphDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GraphDesc(GraphDesc&& from) noexcept
    : GraphDesc() {
    *this = ::std::move(from);
  }

  inline GraphDesc& operator=(GraphDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GraphDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GraphDesc* internal_default_instance() {
    return reinterpret_cast<const GraphDesc*>(
               &_GraphDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(GraphDesc* other);
  friend void swap(GraphDesc& a, GraphDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GraphDesc* New() const final {
    return CreateMaybeMessage<GraphDesc>(NULL);
  }

  GraphDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GraphDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GraphDesc& from);
  void MergeFrom(const GraphDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GraphDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridse.batch.NodeDesc nodes = 2;
  int nodes_size() const;
  void clear_nodes();
  static const int kNodesFieldNumber = 2;
  ::hybridse::batch::NodeDesc* mutable_nodes(int index);
  ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeDesc >*
      mutable_nodes();
  const ::hybridse::batch::NodeDesc& nodes(int index) const;
  ::hybridse::batch::NodeDesc* add_nodes();
  const ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeDesc >&
      nodes() const;

  // repeated .hybridse.batch.NodeValue values = 3;
  int values_size() const;
  void clear_values();
  static const int kValuesFieldNumber = 3;
  ::hybridse::batch::NodeValue* mutable_values(int index);
  ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeValue >*
      mutable_values();
  const ::hybridse::batch::NodeValue& values(int index) const;
  ::hybridse::batch::NodeValue* add_values();
  const ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeValue >&
      values() const;

  // optional string ir = 4;
  bool has_ir() const;
  void clear_ir();
  static const int kIrFieldNumber = 4;
  const ::std::string& ir() const;
  void set_ir(const ::std::string& value);
  #if LANG_CXX11
  void set_ir(::std::string&& value);
  #endif
  void set_ir(const char* value);
  void set_ir(const char* value, size_t size);
  ::std::string* mutable_ir();
  ::std::string* release_ir();
  void set_allocated_ir(::std::string* ir);

  // optional uint32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::uint32 id() const;
  void set_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hybridse.batch.GraphDesc)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_ir();
  void clear_has_ir();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeDesc > nodes_;
  ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeValue > values_;
  ::google::protobuf::internal::ArenaStringPtr ir_;
  ::google::protobuf::uint32 id_;
  friend struct ::protobuf_plan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataSource : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.DataSource) */ {
 public:
  DataSource();
  virtual ~DataSource();

  DataSource(const DataSource& from);

  inline DataSource& operator=(const DataSource& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSource(DataSource&& from) noexcept
    : DataSource() {
    *this = ::std::move(from);
  }

  inline DataSource& operator=(DataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSource& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSource* internal_default_instance() {
    return reinterpret_cast<const DataSource*>(
               &_DataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(DataSource* other);
  friend void swap(DataSource& a, DataSource& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSource* New() const final {
    return CreateMaybeMessage<DataSource>(NULL);
  }

  DataSource* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSource>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataSource& from);
  void MergeFrom(const DataSource& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSource* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridse.type.ColumnDef schema = 3;
  int schema_size() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 3;
  ::hybridse::type::ColumnDef* mutable_schema(int index);
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
      mutable_schema();
  const ::hybridse::type::ColumnDef& schema(int index) const;
  ::hybridse::type::ColumnDef* add_schema();
  const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
      schema() const;

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:hybridse.batch.DataSource)
 private:
  void set_has_db();
  void clear_has_db();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef > schema_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_plan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DataSink : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.DataSink) */ {
 public:
  DataSink();
  virtual ~DataSink();

  DataSink(const DataSink& from);

  inline DataSink& operator=(const DataSink& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSink(DataSink&& from) noexcept
    : DataSink() {
    *this = ::std::move(from);
  }

  inline DataSink& operator=(DataSink&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSink& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSink* internal_default_instance() {
    return reinterpret_cast<const DataSink*>(
               &_DataSink_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DataSink* other);
  friend void swap(DataSink& a, DataSink& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSink* New() const final {
    return CreateMaybeMessage<DataSink>(NULL);
  }

  DataSink* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSink>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataSink& from);
  void MergeFrom(const DataSink& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSink* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:hybridse.batch.DataSink)
 private:
  void set_has_db();
  void clear_has_db();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_plan_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MapDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.MapDesc) */ {
 public:
  MapDesc();
  virtual ~MapDesc();

  MapDesc(const MapDesc& from);

  inline MapDesc& operator=(const MapDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MapDesc(MapDesc&& from) noexcept
    : MapDesc() {
    *this = ::std::move(from);
  }

  inline MapDesc& operator=(MapDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MapDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MapDesc* internal_default_instance() {
    return reinterpret_cast<const MapDesc*>(
               &_MapDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(MapDesc* other);
  friend void swap(MapDesc& a, MapDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MapDesc* New() const final {
    return CreateMaybeMessage<MapDesc>(NULL);
  }

  MapDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MapDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MapDesc& from);
  void MergeFrom(const MapDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MapDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridse.type.ColumnDef output_schema = 2;
  int output_schema_size() const;
  void clear_output_schema();
  static const int kOutputSchemaFieldNumber = 2;
  ::hybridse::type::ColumnDef* mutable_output_schema(int index);
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
      mutable_output_schema();
  const ::hybridse::type::ColumnDef& output_schema(int index) const;
  ::hybridse::type::ColumnDef* add_output_schema();
  const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
      output_schema() const;

  // optional string fn_id = 1;
  bool has_fn_id() const;
  void clear_fn_id();
  static const int kFnIdFieldNumber = 1;
  const ::std::string& fn_id() const;
  void set_fn_id(const ::std::string& value);
  #if LANG_CXX11
  void set_fn_id(::std::string&& value);
  #endif
  void set_fn_id(const char* value);
  void set_fn_id(const char* value, size_t size);
  ::std::string* mutable_fn_id();
  ::std::string* release_fn_id();
  void set_allocated_fn_id(::std::string* fn_id);

  // @@protoc_insertion_point(class_scope:hybridse.batch.MapDesc)
 private:
  void set_has_fn_id();
  void clear_has_fn_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef > output_schema_;
  ::google::protobuf::internal::ArenaStringPtr fn_id_;
  friend struct ::protobuf_plan_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NodeDesc

// optional uint32 id = 1;
inline bool NodeDesc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeDesc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeDesc::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NodeDesc::id() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.NodeDesc.id)
  return id_;
}
inline void NodeDesc::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:hybridse.batch.NodeDesc.id)
}

// optional string op = 2;
inline bool NodeDesc::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeDesc::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeDesc::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeDesc::clear_op() {
  op_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_op();
}
inline const ::std::string& NodeDesc::op() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.NodeDesc.op)
  return op_.GetNoArena();
}
inline void NodeDesc::set_op(const ::std::string& value) {
  set_has_op();
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.NodeDesc.op)
}
#if LANG_CXX11
inline void NodeDesc::set_op(::std::string&& value) {
  set_has_op();
  op_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.NodeDesc.op)
}
#endif
inline void NodeDesc::set_op(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_op();
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.NodeDesc.op)
}
inline void NodeDesc::set_op(const char* value, size_t size) {
  set_has_op();
  op_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.NodeDesc.op)
}
inline ::std::string* NodeDesc::mutable_op() {
  set_has_op();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.NodeDesc.op)
  return op_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeDesc::release_op() {
  // @@protoc_insertion_point(field_release:hybridse.batch.NodeDesc.op)
  if (!has_op()) {
    return NULL;
  }
  clear_has_op();
  return op_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeDesc::set_allocated_op(::std::string* op) {
  if (op != NULL) {
    set_has_op();
  } else {
    clear_has_op();
  }
  op_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.NodeDesc.op)
}

// repeated uint32 inputs = 3;
inline int NodeDesc::inputs_size() const {
  return inputs_.size();
}
inline void NodeDesc::clear_inputs() {
  inputs_.Clear();
}
inline ::google::protobuf::uint32 NodeDesc::inputs(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.batch.NodeDesc.inputs)
  return inputs_.Get(index);
}
inline void NodeDesc::set_inputs(int index, ::google::protobuf::uint32 value) {
  inputs_.Set(index, value);
  // @@protoc_insertion_point(field_set:hybridse.batch.NodeDesc.inputs)
}
inline void NodeDesc::add_inputs(::google::protobuf::uint32 value) {
  inputs_.Add(value);
  // @@protoc_insertion_point(field_add:hybridse.batch.NodeDesc.inputs)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
NodeDesc::inputs() const {
  // @@protoc_insertion_point(field_list:hybridse.batch.NodeDesc.inputs)
  return inputs_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
NodeDesc::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.batch.NodeDesc.inputs)
  return &inputs_;
}

// -------------------------------------------------------------------

// NodeValue

// optional uint32 id = 1;
inline bool NodeValue::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeValue::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeValue::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeValue::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 NodeValue::id() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.NodeValue.id)
  return id_;
}
inline void NodeValue::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:hybridse.batch.NodeValue.id)
}

// optional .hybridse.batch.PlanOpType type = 2;
inline bool NodeValue::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeValue::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeValue::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeValue::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::hybridse::batch::PlanOpType NodeValue::type() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.NodeValue.type)
  return static_cast< ::hybridse::batch::PlanOpType >(type_);
}
inline void NodeValue::set_type(::hybridse::batch::PlanOpType value) {
  assert(::hybridse::batch::PlanOpType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:hybridse.batch.NodeValue.type)
}

// optional bytes value = 3;
inline bool NodeValue::has_value() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeValue::set_has_value() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeValue::clear_has_value() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeValue::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& NodeValue::value() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.NodeValue.value)
  return value_.GetNoArena();
}
inline void NodeValue::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.NodeValue.value)
}
#if LANG_CXX11
inline void NodeValue::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.NodeValue.value)
}
#endif
inline void NodeValue::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.NodeValue.value)
}
inline void NodeValue::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.NodeValue.value)
}
inline ::std::string* NodeValue::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.NodeValue.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NodeValue::release_value() {
  // @@protoc_insertion_point(field_release:hybridse.batch.NodeValue.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NodeValue::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.NodeValue.value)
}

// -------------------------------------------------------------------

// GraphDesc

// optional uint32 id = 1;
inline bool GraphDesc::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GraphDesc::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GraphDesc::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GraphDesc::clear_id() {
  id_ = 0u;
  clear_has_id();
}
inline ::google::protobuf::uint32 GraphDesc::id() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.GraphDesc.id)
  return id_;
}
inline void GraphDesc::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:hybridse.batch.GraphDesc.id)
}

// repeated .hybridse.batch.NodeDesc nodes = 2;
inline int GraphDesc::nodes_size() const {
  return nodes_.size();
}
inline void GraphDesc::clear_nodes() {
  nodes_.Clear();
}
inline ::hybridse::batch::NodeDesc* GraphDesc::mutable_nodes(int index) {
  // @@protoc_insertion_point(field_mutable:hybridse.batch.GraphDesc.nodes)
  return nodes_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeDesc >*
GraphDesc::mutable_nodes() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.batch.GraphDesc.nodes)
  return &nodes_;
}
inline const ::hybridse::batch::NodeDesc& GraphDesc::nodes(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.batch.GraphDesc.nodes)
  return nodes_.Get(index);
}
inline ::hybridse::batch::NodeDesc* GraphDesc::add_nodes() {
  // @@protoc_insertion_point(field_add:hybridse.batch.GraphDesc.nodes)
  return nodes_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeDesc >&
GraphDesc::nodes() const {
  // @@protoc_insertion_point(field_list:hybridse.batch.GraphDesc.nodes)
  return nodes_;
}

// repeated .hybridse.batch.NodeValue values = 3;
inline int GraphDesc::values_size() const {
  return values_.size();
}
inline void GraphDesc::clear_values() {
  values_.Clear();
}
inline ::hybridse::batch::NodeValue* GraphDesc::mutable_values(int index) {
  // @@protoc_insertion_point(field_mutable:hybridse.batch.GraphDesc.values)
  return values_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeValue >*
GraphDesc::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.batch.GraphDesc.values)
  return &values_;
}
inline const ::hybridse::batch::NodeValue& GraphDesc::values(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.batch.GraphDesc.values)
  return values_.Get(index);
}
inline ::hybridse::batch::NodeValue* GraphDesc::add_values() {
  // @@protoc_insertion_point(field_add:hybridse.batch.GraphDesc.values)
  return values_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridse::batch::NodeValue >&
GraphDesc::values() const {
  // @@protoc_insertion_point(field_list:hybridse.batch.GraphDesc.values)
  return values_;
}

// optional string ir = 4;
inline bool GraphDesc::has_ir() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GraphDesc::set_has_ir() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GraphDesc::clear_has_ir() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GraphDesc::clear_ir() {
  ir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ir();
}
inline const ::std::string& GraphDesc::ir() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.GraphDesc.ir)
  return ir_.GetNoArena();
}
inline void GraphDesc::set_ir(const ::std::string& value) {
  set_has_ir();
  ir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.GraphDesc.ir)
}
#if LANG_CXX11
inline void GraphDesc::set_ir(::std::string&& value) {
  set_has_ir();
  ir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.GraphDesc.ir)
}
#endif
inline void GraphDesc::set_ir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ir();
  ir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.GraphDesc.ir)
}
inline void GraphDesc::set_ir(const char* value, size_t size) {
  set_has_ir();
  ir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.GraphDesc.ir)
}
inline ::std::string* GraphDesc::mutable_ir() {
  set_has_ir();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.GraphDesc.ir)
  return ir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GraphDesc::release_ir() {
  // @@protoc_insertion_point(field_release:hybridse.batch.GraphDesc.ir)
  if (!has_ir()) {
    return NULL;
  }
  clear_has_ir();
  return ir_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GraphDesc::set_allocated_ir(::std::string* ir) {
  if (ir != NULL) {
    set_has_ir();
  } else {
    clear_has_ir();
  }
  ir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ir);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.GraphDesc.ir)
}

// -------------------------------------------------------------------

// DataSource

// optional string db = 1;
inline bool DataSource::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSource::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataSource::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataSource::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& DataSource::db() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.DataSource.db)
  return db_.GetNoArena();
}
inline void DataSource::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.DataSource.db)
}
#if LANG_CXX11
inline void DataSource::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.DataSource.db)
}
#endif
inline void DataSource::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.DataSource.db)
}
inline void DataSource::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.DataSource.db)
}
inline ::std::string* DataSource::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.DataSource.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.batch.DataSource.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.DataSource.db)
}

// optional string name = 2;
inline bool DataSource::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSource::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataSource::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataSource::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DataSource::name() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.DataSource.name)
  return name_.GetNoArena();
}
inline void DataSource::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.DataSource.name)
}
#if LANG_CXX11
inline void DataSource::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.DataSource.name)
}
#endif
inline void DataSource::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.DataSource.name)
}
inline void DataSource::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.DataSource.name)
}
inline ::std::string* DataSource::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.DataSource.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSource::release_name() {
  // @@protoc_insertion_point(field_release:hybridse.batch.DataSource.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSource::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.DataSource.name)
}

// repeated .hybridse.type.ColumnDef schema = 3;
inline int DataSource::schema_size() const {
  return schema_.size();
}
inline ::hybridse::type::ColumnDef* DataSource::mutable_schema(int index) {
  // @@protoc_insertion_point(field_mutable:hybridse.batch.DataSource.schema)
  return schema_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
DataSource::mutable_schema() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.batch.DataSource.schema)
  return &schema_;
}
inline const ::hybridse::type::ColumnDef& DataSource::schema(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.batch.DataSource.schema)
  return schema_.Get(index);
}
inline ::hybridse::type::ColumnDef* DataSource::add_schema() {
  // @@protoc_insertion_point(field_add:hybridse.batch.DataSource.schema)
  return schema_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
DataSource::schema() const {
  // @@protoc_insertion_point(field_list:hybridse.batch.DataSource.schema)
  return schema_;
}

// -------------------------------------------------------------------

// DataSink

// optional string db = 1;
inline bool DataSink::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSink::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataSink::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataSink::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& DataSink::db() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.DataSink.db)
  return db_.GetNoArena();
}
inline void DataSink::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.DataSink.db)
}
#if LANG_CXX11
inline void DataSink::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.DataSink.db)
}
#endif
inline void DataSink::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.DataSink.db)
}
inline void DataSink::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.DataSink.db)
}
inline ::std::string* DataSink::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.DataSink.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSink::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.batch.DataSink.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSink::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.DataSink.db)
}

// optional string name = 2;
inline bool DataSink::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSink::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataSink::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DataSink::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DataSink::name() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.DataSink.name)
  return name_.GetNoArena();
}
inline void DataSink::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.DataSink.name)
}
#if LANG_CXX11
inline void DataSink::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.DataSink.name)
}
#endif
inline void DataSink::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.DataSink.name)
}
inline void DataSink::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.DataSink.name)
}
inline ::std::string* DataSink::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.DataSink.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSink::release_name() {
  // @@protoc_insertion_point(field_release:hybridse.batch.DataSink.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSink::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.DataSink.name)
}

// -------------------------------------------------------------------

// MapDesc

// optional string fn_id = 1;
inline bool MapDesc::has_fn_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapDesc::set_has_fn_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapDesc::clear_has_fn_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapDesc::clear_fn_id() {
  fn_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_fn_id();
}
inline const ::std::string& MapDesc::fn_id() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.MapDesc.fn_id)
  return fn_id_.GetNoArena();
}
inline void MapDesc::set_fn_id(const ::std::string& value) {
  set_has_fn_id();
  fn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.MapDesc.fn_id)
}
#if LANG_CXX11
inline void MapDesc::set_fn_id(::std::string&& value) {
  set_has_fn_id();
  fn_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.MapDesc.fn_id)
}
#endif
inline void MapDesc::set_fn_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_fn_id();
  fn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.MapDesc.fn_id)
}
inline void MapDesc::set_fn_id(const char* value, size_t size) {
  set_has_fn_id();
  fn_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.MapDesc.fn_id)
}
inline ::std::string* MapDesc::mutable_fn_id() {
  set_has_fn_id();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.MapDesc.fn_id)
  return fn_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MapDesc::release_fn_id() {
  // @@protoc_insertion_point(field_release:hybridse.batch.MapDesc.fn_id)
  if (!has_fn_id()) {
    return NULL;
  }
  clear_has_fn_id();
  return fn_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MapDesc::set_allocated_fn_id(::std::string* fn_id) {
  if (fn_id != NULL) {
    set_has_fn_id();
  } else {
    clear_has_fn_id();
  }
  fn_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), fn_id);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.MapDesc.fn_id)
}

// repeated .hybridse.type.ColumnDef output_schema = 2;
inline int MapDesc::output_schema_size() const {
  return output_schema_.size();
}
inline ::hybridse::type::ColumnDef* MapDesc::mutable_output_schema(int index) {
  // @@protoc_insertion_point(field_mutable:hybridse.batch.MapDesc.output_schema)
  return output_schema_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
MapDesc::mutable_output_schema() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.batch.MapDesc.output_schema)
  return &output_schema_;
}
inline const ::hybridse::type::ColumnDef& MapDesc::output_schema(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.batch.MapDesc.output_schema)
  return output_schema_.Get(index);
}
inline ::hybridse::type::ColumnDef* MapDesc::add_output_schema() {
  // @@protoc_insertion_point(field_add:hybridse.batch.MapDesc.output_schema)
  return output_schema_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
MapDesc::output_schema() const {
  // @@protoc_insertion_point(field_list:hybridse.batch.MapDesc.output_schema)
  return output_schema_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace batch
}  // namespace hybridse

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hybridse::batch::PlanOpType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hybridse::batch::PlanOpType>() {
  return ::hybridse::batch::PlanOpType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_plan_2eproto
