// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sql_procedure.proto

#ifndef PROTOBUF_INCLUDED_sql_5fprocedure_2eproto
#define PROTOBUF_INCLUDED_sql_5fprocedure_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "type.pb.h"
#include "common.pb.h"
#include <google/protobuf/type.pb.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_sql_5fprocedure_2eproto 

namespace protobuf_sql_5fprocedure_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_sql_5fprocedure_2eproto
namespace openmldb {
namespace api {
class CreateProcedureRequest;
class CreateProcedureRequestDefaultTypeInternal;
extern CreateProcedureRequestDefaultTypeInternal _CreateProcedureRequest_default_instance_;
class DropProcedureRequest;
class DropProcedureRequestDefaultTypeInternal;
extern DropProcedureRequestDefaultTypeInternal _DropProcedureRequest_default_instance_;
class ProcedureInfo;
class ProcedureInfoDefaultTypeInternal;
extern ProcedureInfoDefaultTypeInternal _ProcedureInfo_default_instance_;
class ShowProcedureRequest;
class ShowProcedureRequestDefaultTypeInternal;
extern ShowProcedureRequestDefaultTypeInternal _ShowProcedureRequest_default_instance_;
class ShowProcedureResponse;
class ShowProcedureResponseDefaultTypeInternal;
extern ShowProcedureResponseDefaultTypeInternal _ShowProcedureResponse_default_instance_;
}  // namespace api
}  // namespace openmldb
namespace google {
namespace protobuf {
template<> ::openmldb::api::CreateProcedureRequest* Arena::CreateMaybeMessage<::openmldb::api::CreateProcedureRequest>(Arena*);
template<> ::openmldb::api::DropProcedureRequest* Arena::CreateMaybeMessage<::openmldb::api::DropProcedureRequest>(Arena*);
template<> ::openmldb::api::ProcedureInfo* Arena::CreateMaybeMessage<::openmldb::api::ProcedureInfo>(Arena*);
template<> ::openmldb::api::ShowProcedureRequest* Arena::CreateMaybeMessage<::openmldb::api::ShowProcedureRequest>(Arena*);
template<> ::openmldb::api::ShowProcedureResponse* Arena::CreateMaybeMessage<::openmldb::api::ShowProcedureResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace openmldb {
namespace api {

// ===================================================================

class ProcedureInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.api.ProcedureInfo) */ {
 public:
  ProcedureInfo();
  virtual ~ProcedureInfo();

  ProcedureInfo(const ProcedureInfo& from);

  inline ProcedureInfo& operator=(const ProcedureInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ProcedureInfo(ProcedureInfo&& from) noexcept
    : ProcedureInfo() {
    *this = ::std::move(from);
  }

  inline ProcedureInfo& operator=(ProcedureInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ProcedureInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcedureInfo* internal_default_instance() {
    return reinterpret_cast<const ProcedureInfo*>(
               &_ProcedureInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(ProcedureInfo* other);
  friend void swap(ProcedureInfo& a, ProcedureInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ProcedureInfo* New() const final {
    return CreateMaybeMessage<ProcedureInfo>(NULL);
  }

  ProcedureInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ProcedureInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ProcedureInfo& from);
  void MergeFrom(const ProcedureInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcedureInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.common.ColumnDesc input_schema = 4;
  int input_schema_size() const;
  void clear_input_schema();
  static const int kInputSchemaFieldNumber = 4;
  ::openmldb::common::ColumnDesc* mutable_input_schema(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
      mutable_input_schema();
  const ::openmldb::common::ColumnDesc& input_schema(int index) const;
  ::openmldb::common::ColumnDesc* add_input_schema();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
      input_schema() const;

  // repeated .openmldb.common.ColumnDesc output_schema = 5;
  int output_schema_size() const;
  void clear_output_schema();
  static const int kOutputSchemaFieldNumber = 5;
  ::openmldb::common::ColumnDesc* mutable_output_schema(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
      mutable_output_schema();
  const ::openmldb::common::ColumnDesc& output_schema(int index) const;
  ::openmldb::common::ColumnDesc* add_output_schema();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
      output_schema() const;

  // repeated .openmldb.common.DbTableNamePair tables = 8;
  int tables_size() const;
  void clear_tables();
  static const int kTablesFieldNumber = 8;
  ::openmldb::common::DbTableNamePair* mutable_tables(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::DbTableNamePair >*
      mutable_tables();
  const ::openmldb::common::DbTableNamePair& tables(int index) const;
  ::openmldb::common::DbTableNamePair* add_tables();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::DbTableNamePair >&
      tables() const;

  // repeated .google.protobuf.Option options = 10;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 10;
  ::google::protobuf::Option* mutable_options(int index);
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >*
      mutable_options();
  const ::google::protobuf::Option& options(int index) const;
  ::google::protobuf::Option* add_options();
  const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >&
      options() const;

  // optional string db_name = 1;
  bool has_db_name() const;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // optional string sp_name = 2;
  bool has_sp_name() const;
  void clear_sp_name();
  static const int kSpNameFieldNumber = 2;
  const ::std::string& sp_name() const;
  void set_sp_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sp_name(::std::string&& value);
  #endif
  void set_sp_name(const char* value);
  void set_sp_name(const char* value, size_t size);
  ::std::string* mutable_sp_name();
  ::std::string* release_sp_name();
  void set_allocated_sp_name(::std::string* sp_name);

  // optional string sql = 3;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 3;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string main_table = 6;
  bool has_main_table() const;
  void clear_main_table();
  static const int kMainTableFieldNumber = 6;
  const ::std::string& main_table() const;
  void set_main_table(const ::std::string& value);
  #if LANG_CXX11
  void set_main_table(::std::string&& value);
  #endif
  void set_main_table(const char* value);
  void set_main_table(const char* value, size_t size);
  ::std::string* mutable_main_table();
  ::std::string* release_main_table();
  void set_allocated_main_table(::std::string* main_table);

  // optional string main_db = 7;
  bool has_main_db() const;
  void clear_main_db();
  static const int kMainDbFieldNumber = 7;
  const ::std::string& main_db() const;
  void set_main_db(const ::std::string& value);
  #if LANG_CXX11
  void set_main_db(::std::string&& value);
  #endif
  void set_main_db(const char* value);
  void set_main_db(const char* value, size_t size);
  ::std::string* mutable_main_db();
  ::std::string* release_main_db();
  void set_allocated_main_db(::std::string* main_db);

  // optional .openmldb.type.ProcedureType type = 9 [default = kReqProcedure];
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 9;
  ::openmldb::type::ProcedureType type() const;
  void set_type(::openmldb::type::ProcedureType value);

  // @@protoc_insertion_point(class_scope:openmldb.api.ProcedureInfo)
 private:
  void set_has_db_name();
  void clear_has_db_name();
  void set_has_sp_name();
  void clear_has_sp_name();
  void set_has_sql();
  void clear_has_sql();
  void set_has_main_table();
  void clear_has_main_table();
  void set_has_main_db();
  void clear_has_main_db();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc > input_schema_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc > output_schema_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::DbTableNamePair > tables_;
  ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option > options_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr sp_name_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr main_table_;
  ::google::protobuf::internal::ArenaStringPtr main_db_;
  int type_;
  friend struct ::protobuf_sql_5fprocedure_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateProcedureRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.api.CreateProcedureRequest) */ {
 public:
  CreateProcedureRequest();
  virtual ~CreateProcedureRequest();

  CreateProcedureRequest(const CreateProcedureRequest& from);

  inline CreateProcedureRequest& operator=(const CreateProcedureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateProcedureRequest(CreateProcedureRequest&& from) noexcept
    : CreateProcedureRequest() {
    *this = ::std::move(from);
  }

  inline CreateProcedureRequest& operator=(CreateProcedureRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateProcedureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateProcedureRequest* internal_default_instance() {
    return reinterpret_cast<const CreateProcedureRequest*>(
               &_CreateProcedureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(CreateProcedureRequest* other);
  friend void swap(CreateProcedureRequest& a, CreateProcedureRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateProcedureRequest* New() const final {
    return CreateMaybeMessage<CreateProcedureRequest>(NULL);
  }

  CreateProcedureRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateProcedureRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateProcedureRequest& from);
  void MergeFrom(const CreateProcedureRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateProcedureRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .openmldb.api.ProcedureInfo sp_info = 1;
  bool has_sp_info() const;
  void clear_sp_info();
  static const int kSpInfoFieldNumber = 1;
  private:
  const ::openmldb::api::ProcedureInfo& _internal_sp_info() const;
  public:
  const ::openmldb::api::ProcedureInfo& sp_info() const;
  ::openmldb::api::ProcedureInfo* release_sp_info();
  ::openmldb::api::ProcedureInfo* mutable_sp_info();
  void set_allocated_sp_info(::openmldb::api::ProcedureInfo* sp_info);

  // optional uint64 timeout_ms = 2;
  bool has_timeout_ms() const;
  void clear_timeout_ms();
  static const int kTimeoutMsFieldNumber = 2;
  ::google::protobuf::uint64 timeout_ms() const;
  void set_timeout_ms(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openmldb.api.CreateProcedureRequest)
 private:
  void set_has_sp_info();
  void clear_has_sp_info();
  void set_has_timeout_ms();
  void clear_has_timeout_ms();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::openmldb::api::ProcedureInfo* sp_info_;
  ::google::protobuf::uint64 timeout_ms_;
  friend struct ::protobuf_sql_5fprocedure_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropProcedureRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.api.DropProcedureRequest) */ {
 public:
  DropProcedureRequest();
  virtual ~DropProcedureRequest();

  DropProcedureRequest(const DropProcedureRequest& from);

  inline DropProcedureRequest& operator=(const DropProcedureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropProcedureRequest(DropProcedureRequest&& from) noexcept
    : DropProcedureRequest() {
    *this = ::std::move(from);
  }

  inline DropProcedureRequest& operator=(DropProcedureRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropProcedureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropProcedureRequest* internal_default_instance() {
    return reinterpret_cast<const DropProcedureRequest*>(
               &_DropProcedureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(DropProcedureRequest* other);
  friend void swap(DropProcedureRequest& a, DropProcedureRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropProcedureRequest* New() const final {
    return CreateMaybeMessage<DropProcedureRequest>(NULL);
  }

  DropProcedureRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropProcedureRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropProcedureRequest& from);
  void MergeFrom(const DropProcedureRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropProcedureRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db_name = 1;
  bool has_db_name() const;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // optional string sp_name = 2;
  bool has_sp_name() const;
  void clear_sp_name();
  static const int kSpNameFieldNumber = 2;
  const ::std::string& sp_name() const;
  void set_sp_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sp_name(::std::string&& value);
  #endif
  void set_sp_name(const char* value);
  void set_sp_name(const char* value, size_t size);
  ::std::string* mutable_sp_name();
  ::std::string* release_sp_name();
  void set_allocated_sp_name(::std::string* sp_name);

  // @@protoc_insertion_point(class_scope:openmldb.api.DropProcedureRequest)
 private:
  void set_has_db_name();
  void clear_has_db_name();
  void set_has_sp_name();
  void clear_has_sp_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr sp_name_;
  friend struct ::protobuf_sql_5fprocedure_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowProcedureRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.api.ShowProcedureRequest) */ {
 public:
  ShowProcedureRequest();
  virtual ~ShowProcedureRequest();

  ShowProcedureRequest(const ShowProcedureRequest& from);

  inline ShowProcedureRequest& operator=(const ShowProcedureRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowProcedureRequest(ShowProcedureRequest&& from) noexcept
    : ShowProcedureRequest() {
    *this = ::std::move(from);
  }

  inline ShowProcedureRequest& operator=(ShowProcedureRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowProcedureRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowProcedureRequest* internal_default_instance() {
    return reinterpret_cast<const ShowProcedureRequest*>(
               &_ShowProcedureRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ShowProcedureRequest* other);
  friend void swap(ShowProcedureRequest& a, ShowProcedureRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowProcedureRequest* New() const final {
    return CreateMaybeMessage<ShowProcedureRequest>(NULL);
  }

  ShowProcedureRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowProcedureRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowProcedureRequest& from);
  void MergeFrom(const ShowProcedureRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowProcedureRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db_name = 1;
  bool has_db_name() const;
  void clear_db_name();
  static const int kDbNameFieldNumber = 1;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // optional string sp_name = 2;
  bool has_sp_name() const;
  void clear_sp_name();
  static const int kSpNameFieldNumber = 2;
  const ::std::string& sp_name() const;
  void set_sp_name(const ::std::string& value);
  #if LANG_CXX11
  void set_sp_name(::std::string&& value);
  #endif
  void set_sp_name(const char* value);
  void set_sp_name(const char* value, size_t size);
  ::std::string* mutable_sp_name();
  ::std::string* release_sp_name();
  void set_allocated_sp_name(::std::string* sp_name);

  // @@protoc_insertion_point(class_scope:openmldb.api.ShowProcedureRequest)
 private:
  void set_has_db_name();
  void clear_has_db_name();
  void set_has_sp_name();
  void clear_has_sp_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  ::google::protobuf::internal::ArenaStringPtr sp_name_;
  friend struct ::protobuf_sql_5fprocedure_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowProcedureResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.api.ShowProcedureResponse) */ {
 public:
  ShowProcedureResponse();
  virtual ~ShowProcedureResponse();

  ShowProcedureResponse(const ShowProcedureResponse& from);

  inline ShowProcedureResponse& operator=(const ShowProcedureResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowProcedureResponse(ShowProcedureResponse&& from) noexcept
    : ShowProcedureResponse() {
    *this = ::std::move(from);
  }

  inline ShowProcedureResponse& operator=(ShowProcedureResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowProcedureResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowProcedureResponse* internal_default_instance() {
    return reinterpret_cast<const ShowProcedureResponse*>(
               &_ShowProcedureResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ShowProcedureResponse* other);
  friend void swap(ShowProcedureResponse& a, ShowProcedureResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowProcedureResponse* New() const final {
    return CreateMaybeMessage<ShowProcedureResponse>(NULL);
  }

  ShowProcedureResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowProcedureResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowProcedureResponse& from);
  void MergeFrom(const ShowProcedureResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowProcedureResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.api.ProcedureInfo sp_info = 3;
  int sp_info_size() const;
  void clear_sp_info();
  static const int kSpInfoFieldNumber = 3;
  ::openmldb::api::ProcedureInfo* mutable_sp_info(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::api::ProcedureInfo >*
      mutable_sp_info();
  const ::openmldb::api::ProcedureInfo& sp_info(int index) const;
  ::openmldb::api::ProcedureInfo* add_sp_info();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::api::ProcedureInfo >&
      sp_info() const;

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.api.ShowProcedureResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::api::ProcedureInfo > sp_info_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_sql_5fprocedure_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcedureInfo

// optional string db_name = 1;
inline bool ProcedureInfo::has_db_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ProcedureInfo::set_has_db_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ProcedureInfo::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ProcedureInfo::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_name();
}
inline const ::std::string& ProcedureInfo::db_name() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.db_name)
  return db_name_.GetNoArena();
}
inline void ProcedureInfo::set_db_name(const ::std::string& value) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ProcedureInfo.db_name)
}
#if LANG_CXX11
inline void ProcedureInfo::set_db_name(::std::string&& value) {
  set_has_db_name();
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ProcedureInfo.db_name)
}
#endif
inline void ProcedureInfo::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ProcedureInfo.db_name)
}
inline void ProcedureInfo::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ProcedureInfo.db_name)
}
inline ::std::string* ProcedureInfo::mutable_db_name() {
  set_has_db_name();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcedureInfo::release_db_name() {
  // @@protoc_insertion_point(field_release:openmldb.api.ProcedureInfo.db_name)
  if (!has_db_name()) {
    return NULL;
  }
  clear_has_db_name();
  return db_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcedureInfo::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    set_has_db_name();
  } else {
    clear_has_db_name();
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ProcedureInfo.db_name)
}

// optional string sp_name = 2;
inline bool ProcedureInfo::has_sp_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ProcedureInfo::set_has_sp_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ProcedureInfo::clear_has_sp_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ProcedureInfo::clear_sp_name() {
  sp_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sp_name();
}
inline const ::std::string& ProcedureInfo::sp_name() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.sp_name)
  return sp_name_.GetNoArena();
}
inline void ProcedureInfo::set_sp_name(const ::std::string& value) {
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ProcedureInfo.sp_name)
}
#if LANG_CXX11
inline void ProcedureInfo::set_sp_name(::std::string&& value) {
  set_has_sp_name();
  sp_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ProcedureInfo.sp_name)
}
#endif
inline void ProcedureInfo::set_sp_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ProcedureInfo.sp_name)
}
inline void ProcedureInfo::set_sp_name(const char* value, size_t size) {
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ProcedureInfo.sp_name)
}
inline ::std::string* ProcedureInfo::mutable_sp_name() {
  set_has_sp_name();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.sp_name)
  return sp_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcedureInfo::release_sp_name() {
  // @@protoc_insertion_point(field_release:openmldb.api.ProcedureInfo.sp_name)
  if (!has_sp_name()) {
    return NULL;
  }
  clear_has_sp_name();
  return sp_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcedureInfo::set_allocated_sp_name(::std::string* sp_name) {
  if (sp_name != NULL) {
    set_has_sp_name();
  } else {
    clear_has_sp_name();
  }
  sp_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sp_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ProcedureInfo.sp_name)
}

// optional string sql = 3;
inline bool ProcedureInfo::has_sql() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ProcedureInfo::set_has_sql() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ProcedureInfo::clear_has_sql() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ProcedureInfo::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ProcedureInfo::sql() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.sql)
  return sql_.GetNoArena();
}
inline void ProcedureInfo::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ProcedureInfo.sql)
}
#if LANG_CXX11
inline void ProcedureInfo::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ProcedureInfo.sql)
}
#endif
inline void ProcedureInfo::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ProcedureInfo.sql)
}
inline void ProcedureInfo::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ProcedureInfo.sql)
}
inline ::std::string* ProcedureInfo::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcedureInfo::release_sql() {
  // @@protoc_insertion_point(field_release:openmldb.api.ProcedureInfo.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcedureInfo::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ProcedureInfo.sql)
}

// repeated .openmldb.common.ColumnDesc input_schema = 4;
inline int ProcedureInfo::input_schema_size() const {
  return input_schema_.size();
}
inline ::openmldb::common::ColumnDesc* ProcedureInfo::mutable_input_schema(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.input_schema)
  return input_schema_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
ProcedureInfo::mutable_input_schema() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.api.ProcedureInfo.input_schema)
  return &input_schema_;
}
inline const ::openmldb::common::ColumnDesc& ProcedureInfo::input_schema(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.input_schema)
  return input_schema_.Get(index);
}
inline ::openmldb::common::ColumnDesc* ProcedureInfo::add_input_schema() {
  // @@protoc_insertion_point(field_add:openmldb.api.ProcedureInfo.input_schema)
  return input_schema_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
ProcedureInfo::input_schema() const {
  // @@protoc_insertion_point(field_list:openmldb.api.ProcedureInfo.input_schema)
  return input_schema_;
}

// repeated .openmldb.common.ColumnDesc output_schema = 5;
inline int ProcedureInfo::output_schema_size() const {
  return output_schema_.size();
}
inline ::openmldb::common::ColumnDesc* ProcedureInfo::mutable_output_schema(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.output_schema)
  return output_schema_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
ProcedureInfo::mutable_output_schema() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.api.ProcedureInfo.output_schema)
  return &output_schema_;
}
inline const ::openmldb::common::ColumnDesc& ProcedureInfo::output_schema(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.output_schema)
  return output_schema_.Get(index);
}
inline ::openmldb::common::ColumnDesc* ProcedureInfo::add_output_schema() {
  // @@protoc_insertion_point(field_add:openmldb.api.ProcedureInfo.output_schema)
  return output_schema_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
ProcedureInfo::output_schema() const {
  // @@protoc_insertion_point(field_list:openmldb.api.ProcedureInfo.output_schema)
  return output_schema_;
}

// optional string main_table = 6;
inline bool ProcedureInfo::has_main_table() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ProcedureInfo::set_has_main_table() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ProcedureInfo::clear_has_main_table() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ProcedureInfo::clear_main_table() {
  main_table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_main_table();
}
inline const ::std::string& ProcedureInfo::main_table() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.main_table)
  return main_table_.GetNoArena();
}
inline void ProcedureInfo::set_main_table(const ::std::string& value) {
  set_has_main_table();
  main_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ProcedureInfo.main_table)
}
#if LANG_CXX11
inline void ProcedureInfo::set_main_table(::std::string&& value) {
  set_has_main_table();
  main_table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ProcedureInfo.main_table)
}
#endif
inline void ProcedureInfo::set_main_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_main_table();
  main_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ProcedureInfo.main_table)
}
inline void ProcedureInfo::set_main_table(const char* value, size_t size) {
  set_has_main_table();
  main_table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ProcedureInfo.main_table)
}
inline ::std::string* ProcedureInfo::mutable_main_table() {
  set_has_main_table();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.main_table)
  return main_table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcedureInfo::release_main_table() {
  // @@protoc_insertion_point(field_release:openmldb.api.ProcedureInfo.main_table)
  if (!has_main_table()) {
    return NULL;
  }
  clear_has_main_table();
  return main_table_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcedureInfo::set_allocated_main_table(::std::string* main_table) {
  if (main_table != NULL) {
    set_has_main_table();
  } else {
    clear_has_main_table();
  }
  main_table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_table);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ProcedureInfo.main_table)
}

// optional string main_db = 7;
inline bool ProcedureInfo::has_main_db() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ProcedureInfo::set_has_main_db() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ProcedureInfo::clear_has_main_db() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ProcedureInfo::clear_main_db() {
  main_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_main_db();
}
inline const ::std::string& ProcedureInfo::main_db() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.main_db)
  return main_db_.GetNoArena();
}
inline void ProcedureInfo::set_main_db(const ::std::string& value) {
  set_has_main_db();
  main_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ProcedureInfo.main_db)
}
#if LANG_CXX11
inline void ProcedureInfo::set_main_db(::std::string&& value) {
  set_has_main_db();
  main_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ProcedureInfo.main_db)
}
#endif
inline void ProcedureInfo::set_main_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_main_db();
  main_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ProcedureInfo.main_db)
}
inline void ProcedureInfo::set_main_db(const char* value, size_t size) {
  set_has_main_db();
  main_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ProcedureInfo.main_db)
}
inline ::std::string* ProcedureInfo::mutable_main_db() {
  set_has_main_db();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.main_db)
  return main_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ProcedureInfo::release_main_db() {
  // @@protoc_insertion_point(field_release:openmldb.api.ProcedureInfo.main_db)
  if (!has_main_db()) {
    return NULL;
  }
  clear_has_main_db();
  return main_db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ProcedureInfo::set_allocated_main_db(::std::string* main_db) {
  if (main_db != NULL) {
    set_has_main_db();
  } else {
    clear_has_main_db();
  }
  main_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), main_db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ProcedureInfo.main_db)
}

// repeated .openmldb.common.DbTableNamePair tables = 8;
inline int ProcedureInfo::tables_size() const {
  return tables_.size();
}
inline ::openmldb::common::DbTableNamePair* ProcedureInfo::mutable_tables(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.tables)
  return tables_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::DbTableNamePair >*
ProcedureInfo::mutable_tables() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.api.ProcedureInfo.tables)
  return &tables_;
}
inline const ::openmldb::common::DbTableNamePair& ProcedureInfo::tables(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.tables)
  return tables_.Get(index);
}
inline ::openmldb::common::DbTableNamePair* ProcedureInfo::add_tables() {
  // @@protoc_insertion_point(field_add:openmldb.api.ProcedureInfo.tables)
  return tables_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::DbTableNamePair >&
ProcedureInfo::tables() const {
  // @@protoc_insertion_point(field_list:openmldb.api.ProcedureInfo.tables)
  return tables_;
}

// optional .openmldb.type.ProcedureType type = 9 [default = kReqProcedure];
inline bool ProcedureInfo::has_type() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ProcedureInfo::set_has_type() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ProcedureInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ProcedureInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::openmldb::type::ProcedureType ProcedureInfo::type() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.type)
  return static_cast< ::openmldb::type::ProcedureType >(type_);
}
inline void ProcedureInfo::set_type(::openmldb::type::ProcedureType value) {
  assert(::openmldb::type::ProcedureType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:openmldb.api.ProcedureInfo.type)
}

// repeated .google.protobuf.Option options = 10;
inline int ProcedureInfo::options_size() const {
  return options_.size();
}
inline ::google::protobuf::Option* ProcedureInfo::mutable_options(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.api.ProcedureInfo.options)
  return options_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >*
ProcedureInfo::mutable_options() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.api.ProcedureInfo.options)
  return &options_;
}
inline const ::google::protobuf::Option& ProcedureInfo::options(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.api.ProcedureInfo.options)
  return options_.Get(index);
}
inline ::google::protobuf::Option* ProcedureInfo::add_options() {
  // @@protoc_insertion_point(field_add:openmldb.api.ProcedureInfo.options)
  return options_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::google::protobuf::Option >&
ProcedureInfo::options() const {
  // @@protoc_insertion_point(field_list:openmldb.api.ProcedureInfo.options)
  return options_;
}

// -------------------------------------------------------------------

// CreateProcedureRequest

// optional .openmldb.api.ProcedureInfo sp_info = 1;
inline bool CreateProcedureRequest::has_sp_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateProcedureRequest::set_has_sp_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateProcedureRequest::clear_has_sp_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateProcedureRequest::clear_sp_info() {
  if (sp_info_ != NULL) sp_info_->Clear();
  clear_has_sp_info();
}
inline const ::openmldb::api::ProcedureInfo& CreateProcedureRequest::_internal_sp_info() const {
  return *sp_info_;
}
inline const ::openmldb::api::ProcedureInfo& CreateProcedureRequest::sp_info() const {
  const ::openmldb::api::ProcedureInfo* p = sp_info_;
  // @@protoc_insertion_point(field_get:openmldb.api.CreateProcedureRequest.sp_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::api::ProcedureInfo*>(
      &::openmldb::api::_ProcedureInfo_default_instance_);
}
inline ::openmldb::api::ProcedureInfo* CreateProcedureRequest::release_sp_info() {
  // @@protoc_insertion_point(field_release:openmldb.api.CreateProcedureRequest.sp_info)
  clear_has_sp_info();
  ::openmldb::api::ProcedureInfo* temp = sp_info_;
  sp_info_ = NULL;
  return temp;
}
inline ::openmldb::api::ProcedureInfo* CreateProcedureRequest::mutable_sp_info() {
  set_has_sp_info();
  if (sp_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::api::ProcedureInfo>(GetArenaNoVirtual());
    sp_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.api.CreateProcedureRequest.sp_info)
  return sp_info_;
}
inline void CreateProcedureRequest::set_allocated_sp_info(::openmldb::api::ProcedureInfo* sp_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete sp_info_;
  }
  if (sp_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      sp_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, sp_info, submessage_arena);
    }
    set_has_sp_info();
  } else {
    clear_has_sp_info();
  }
  sp_info_ = sp_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.CreateProcedureRequest.sp_info)
}

// optional uint64 timeout_ms = 2;
inline bool CreateProcedureRequest::has_timeout_ms() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateProcedureRequest::set_has_timeout_ms() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateProcedureRequest::clear_has_timeout_ms() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateProcedureRequest::clear_timeout_ms() {
  timeout_ms_ = GOOGLE_ULONGLONG(0);
  clear_has_timeout_ms();
}
inline ::google::protobuf::uint64 CreateProcedureRequest::timeout_ms() const {
  // @@protoc_insertion_point(field_get:openmldb.api.CreateProcedureRequest.timeout_ms)
  return timeout_ms_;
}
inline void CreateProcedureRequest::set_timeout_ms(::google::protobuf::uint64 value) {
  set_has_timeout_ms();
  timeout_ms_ = value;
  // @@protoc_insertion_point(field_set:openmldb.api.CreateProcedureRequest.timeout_ms)
}

// -------------------------------------------------------------------

// DropProcedureRequest

// optional string db_name = 1;
inline bool DropProcedureRequest::has_db_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropProcedureRequest::set_has_db_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropProcedureRequest::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropProcedureRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_name();
}
inline const ::std::string& DropProcedureRequest::db_name() const {
  // @@protoc_insertion_point(field_get:openmldb.api.DropProcedureRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DropProcedureRequest::set_db_name(const ::std::string& value) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.DropProcedureRequest.db_name)
}
#if LANG_CXX11
inline void DropProcedureRequest::set_db_name(::std::string&& value) {
  set_has_db_name();
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.DropProcedureRequest.db_name)
}
#endif
inline void DropProcedureRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.DropProcedureRequest.db_name)
}
inline void DropProcedureRequest::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.DropProcedureRequest.db_name)
}
inline ::std::string* DropProcedureRequest::mutable_db_name() {
  set_has_db_name();
  // @@protoc_insertion_point(field_mutable:openmldb.api.DropProcedureRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropProcedureRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:openmldb.api.DropProcedureRequest.db_name)
  if (!has_db_name()) {
    return NULL;
  }
  clear_has_db_name();
  return db_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropProcedureRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    set_has_db_name();
  } else {
    clear_has_db_name();
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.DropProcedureRequest.db_name)
}

// optional string sp_name = 2;
inline bool DropProcedureRequest::has_sp_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropProcedureRequest::set_has_sp_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropProcedureRequest::clear_has_sp_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropProcedureRequest::clear_sp_name() {
  sp_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sp_name();
}
inline const ::std::string& DropProcedureRequest::sp_name() const {
  // @@protoc_insertion_point(field_get:openmldb.api.DropProcedureRequest.sp_name)
  return sp_name_.GetNoArena();
}
inline void DropProcedureRequest::set_sp_name(const ::std::string& value) {
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.DropProcedureRequest.sp_name)
}
#if LANG_CXX11
inline void DropProcedureRequest::set_sp_name(::std::string&& value) {
  set_has_sp_name();
  sp_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.DropProcedureRequest.sp_name)
}
#endif
inline void DropProcedureRequest::set_sp_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.DropProcedureRequest.sp_name)
}
inline void DropProcedureRequest::set_sp_name(const char* value, size_t size) {
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.DropProcedureRequest.sp_name)
}
inline ::std::string* DropProcedureRequest::mutable_sp_name() {
  set_has_sp_name();
  // @@protoc_insertion_point(field_mutable:openmldb.api.DropProcedureRequest.sp_name)
  return sp_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropProcedureRequest::release_sp_name() {
  // @@protoc_insertion_point(field_release:openmldb.api.DropProcedureRequest.sp_name)
  if (!has_sp_name()) {
    return NULL;
  }
  clear_has_sp_name();
  return sp_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropProcedureRequest::set_allocated_sp_name(::std::string* sp_name) {
  if (sp_name != NULL) {
    set_has_sp_name();
  } else {
    clear_has_sp_name();
  }
  sp_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sp_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.DropProcedureRequest.sp_name)
}

// -------------------------------------------------------------------

// ShowProcedureRequest

// optional string db_name = 1;
inline bool ShowProcedureRequest::has_db_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowProcedureRequest::set_has_db_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowProcedureRequest::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowProcedureRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_name();
}
inline const ::std::string& ShowProcedureRequest::db_name() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ShowProcedureRequest.db_name)
  return db_name_.GetNoArena();
}
inline void ShowProcedureRequest::set_db_name(const ::std::string& value) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ShowProcedureRequest.db_name)
}
#if LANG_CXX11
inline void ShowProcedureRequest::set_db_name(::std::string&& value) {
  set_has_db_name();
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ShowProcedureRequest.db_name)
}
#endif
inline void ShowProcedureRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ShowProcedureRequest.db_name)
}
inline void ShowProcedureRequest::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ShowProcedureRequest.db_name)
}
inline ::std::string* ShowProcedureRequest::mutable_db_name() {
  set_has_db_name();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ShowProcedureRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowProcedureRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:openmldb.api.ShowProcedureRequest.db_name)
  if (!has_db_name()) {
    return NULL;
  }
  clear_has_db_name();
  return db_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowProcedureRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    set_has_db_name();
  } else {
    clear_has_db_name();
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ShowProcedureRequest.db_name)
}

// optional string sp_name = 2;
inline bool ShowProcedureRequest::has_sp_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowProcedureRequest::set_has_sp_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowProcedureRequest::clear_has_sp_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowProcedureRequest::clear_sp_name() {
  sp_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sp_name();
}
inline const ::std::string& ShowProcedureRequest::sp_name() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ShowProcedureRequest.sp_name)
  return sp_name_.GetNoArena();
}
inline void ShowProcedureRequest::set_sp_name(const ::std::string& value) {
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ShowProcedureRequest.sp_name)
}
#if LANG_CXX11
inline void ShowProcedureRequest::set_sp_name(::std::string&& value) {
  set_has_sp_name();
  sp_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ShowProcedureRequest.sp_name)
}
#endif
inline void ShowProcedureRequest::set_sp_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ShowProcedureRequest.sp_name)
}
inline void ShowProcedureRequest::set_sp_name(const char* value, size_t size) {
  set_has_sp_name();
  sp_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ShowProcedureRequest.sp_name)
}
inline ::std::string* ShowProcedureRequest::mutable_sp_name() {
  set_has_sp_name();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ShowProcedureRequest.sp_name)
  return sp_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowProcedureRequest::release_sp_name() {
  // @@protoc_insertion_point(field_release:openmldb.api.ShowProcedureRequest.sp_name)
  if (!has_sp_name()) {
    return NULL;
  }
  clear_has_sp_name();
  return sp_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowProcedureRequest::set_allocated_sp_name(::std::string* sp_name) {
  if (sp_name != NULL) {
    set_has_sp_name();
  } else {
    clear_has_sp_name();
  }
  sp_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sp_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ShowProcedureRequest.sp_name)
}

// -------------------------------------------------------------------

// ShowProcedureResponse

// required int32 code = 1;
inline bool ShowProcedureResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowProcedureResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowProcedureResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowProcedureResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowProcedureResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ShowProcedureResponse.code)
  return code_;
}
inline void ShowProcedureResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.api.ShowProcedureResponse.code)
}

// optional string msg = 2;
inline bool ShowProcedureResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowProcedureResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowProcedureResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowProcedureResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowProcedureResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.api.ShowProcedureResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowProcedureResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.api.ShowProcedureResponse.msg)
}
#if LANG_CXX11
inline void ShowProcedureResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.api.ShowProcedureResponse.msg)
}
#endif
inline void ShowProcedureResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.api.ShowProcedureResponse.msg)
}
inline void ShowProcedureResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.api.ShowProcedureResponse.msg)
}
inline ::std::string* ShowProcedureResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.api.ShowProcedureResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowProcedureResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.api.ShowProcedureResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowProcedureResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.api.ShowProcedureResponse.msg)
}

// repeated .openmldb.api.ProcedureInfo sp_info = 3;
inline int ShowProcedureResponse::sp_info_size() const {
  return sp_info_.size();
}
inline void ShowProcedureResponse::clear_sp_info() {
  sp_info_.Clear();
}
inline ::openmldb::api::ProcedureInfo* ShowProcedureResponse::mutable_sp_info(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.api.ShowProcedureResponse.sp_info)
  return sp_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::api::ProcedureInfo >*
ShowProcedureResponse::mutable_sp_info() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.api.ShowProcedureResponse.sp_info)
  return &sp_info_;
}
inline const ::openmldb::api::ProcedureInfo& ShowProcedureResponse::sp_info(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.api.ShowProcedureResponse.sp_info)
  return sp_info_.Get(index);
}
inline ::openmldb::api::ProcedureInfo* ShowProcedureResponse::add_sp_info() {
  // @@protoc_insertion_point(field_add:openmldb.api.ShowProcedureResponse.sp_info)
  return sp_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::api::ProcedureInfo >&
ShowProcedureResponse::sp_info() const {
  // @@protoc_insertion_point(field_list:openmldb.api.ShowProcedureResponse.sp_info)
  return sp_info_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace api
}  // namespace openmldb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_sql_5fprocedure_2eproto
