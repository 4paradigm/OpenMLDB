// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: name_server.proto

#ifndef PROTOBUF_INCLUDED_name_5fserver_2eproto
#define PROTOBUF_INCLUDED_name_5fserver_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "type.pb.h"
#include "common.pb.h"
#include "tablet.pb.h"
#include "sql_procedure.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_name_5fserver_2eproto 

namespace protobuf_name_5fserver_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[76];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_name_5fserver_2eproto
namespace openmldb {
namespace nameserver {
class AddIndexMeta;
class AddIndexMetaDefaultTypeInternal;
extern AddIndexMetaDefaultTypeInternal _AddIndexMeta_default_instance_;
class AddIndexRequest;
class AddIndexRequestDefaultTypeInternal;
extern AddIndexRequestDefaultTypeInternal _AddIndexRequest_default_instance_;
class AddReplicaClusterByNsResponse;
class AddReplicaClusterByNsResponseDefaultTypeInternal;
extern AddReplicaClusterByNsResponseDefaultTypeInternal _AddReplicaClusterByNsResponse_default_instance_;
class AddReplicaData;
class AddReplicaDataDefaultTypeInternal;
extern AddReplicaDataDefaultTypeInternal _AddReplicaData_default_instance_;
class AddReplicaNSRequest;
class AddReplicaNSRequestDefaultTypeInternal;
extern AddReplicaNSRequestDefaultTypeInternal _AddReplicaNSRequest_default_instance_;
class AddTableFieldRequest;
class AddTableFieldRequestDefaultTypeInternal;
extern AddTableFieldRequestDefaultTypeInternal _AddTableFieldRequest_default_instance_;
class CancelOPRequest;
class CancelOPRequestDefaultTypeInternal;
extern CancelOPRequestDefaultTypeInternal _CancelOPRequest_default_instance_;
class ChangeLeaderData;
class ChangeLeaderDataDefaultTypeInternal;
extern ChangeLeaderDataDefaultTypeInternal _ChangeLeaderData_default_instance_;
class ChangeLeaderRequest;
class ChangeLeaderRequestDefaultTypeInternal;
extern ChangeLeaderRequestDefaultTypeInternal _ChangeLeaderRequest_default_instance_;
class ClusterAddAge;
class ClusterAddAgeDefaultTypeInternal;
extern ClusterAddAgeDefaultTypeInternal _ClusterAddAge_default_instance_;
class ClusterAddress;
class ClusterAddressDefaultTypeInternal;
extern ClusterAddressDefaultTypeInternal _ClusterAddress_default_instance_;
class ConfGetRequest;
class ConfGetRequestDefaultTypeInternal;
extern ConfGetRequestDefaultTypeInternal _ConfGetRequest_default_instance_;
class ConfGetResponse;
class ConfGetResponseDefaultTypeInternal;
extern ConfGetResponseDefaultTypeInternal _ConfGetResponse_default_instance_;
class ConfSetRequest;
class ConfSetRequestDefaultTypeInternal;
extern ConfSetRequestDefaultTypeInternal _ConfSetRequest_default_instance_;
class ConnectZKRequest;
class ConnectZKRequestDefaultTypeInternal;
extern ConnectZKRequestDefaultTypeInternal _ConnectZKRequest_default_instance_;
class CreateDatabaseRequest;
class CreateDatabaseRequestDefaultTypeInternal;
extern CreateDatabaseRequestDefaultTypeInternal _CreateDatabaseRequest_default_instance_;
class CreateFunctionRequest;
class CreateFunctionRequestDefaultTypeInternal;
extern CreateFunctionRequestDefaultTypeInternal _CreateFunctionRequest_default_instance_;
class CreateFunctionResponse;
class CreateFunctionResponseDefaultTypeInternal;
extern CreateFunctionResponseDefaultTypeInternal _CreateFunctionResponse_default_instance_;
class CreateTableData;
class CreateTableDataDefaultTypeInternal;
extern CreateTableDataDefaultTypeInternal _CreateTableData_default_instance_;
class CreateTableInfoRequest;
class CreateTableInfoRequestDefaultTypeInternal;
extern CreateTableInfoRequestDefaultTypeInternal _CreateTableInfoRequest_default_instance_;
class CreateTableInfoResponse;
class CreateTableInfoResponseDefaultTypeInternal;
extern CreateTableInfoResponseDefaultTypeInternal _CreateTableInfoResponse_default_instance_;
class CreateTableRequest;
class CreateTableRequestDefaultTypeInternal;
extern CreateTableRequestDefaultTypeInternal _CreateTableRequest_default_instance_;
class DelReplicaNSRequest;
class DelReplicaNSRequestDefaultTypeInternal;
extern DelReplicaNSRequestDefaultTypeInternal _DelReplicaNSRequest_default_instance_;
class DeleteIndexRequest;
class DeleteIndexRequestDefaultTypeInternal;
extern DeleteIndexRequestDefaultTypeInternal _DeleteIndexRequest_default_instance_;
class DisConnectZKRequest;
class DisConnectZKRequestDefaultTypeInternal;
extern DisConnectZKRequestDefaultTypeInternal _DisConnectZKRequest_default_instance_;
class DropDatabaseRequest;
class DropDatabaseRequestDefaultTypeInternal;
extern DropDatabaseRequestDefaultTypeInternal _DropDatabaseRequest_default_instance_;
class DropFunctionRequest;
class DropFunctionRequestDefaultTypeInternal;
extern DropFunctionRequestDefaultTypeInternal _DropFunctionRequest_default_instance_;
class DropFunctionResponse;
class DropFunctionResponseDefaultTypeInternal;
extern DropFunctionResponseDefaultTypeInternal _DropFunctionResponse_default_instance_;
class DropTableRequest;
class DropTableRequestDefaultTypeInternal;
extern DropTableRequestDefaultTypeInternal _DropTableRequest_default_instance_;
class EndpointStatusData;
class EndpointStatusDataDefaultTypeInternal;
extern EndpointStatusDataDefaultTypeInternal _EndpointStatusData_default_instance_;
class GeneralRequest;
class GeneralRequestDefaultTypeInternal;
extern GeneralRequestDefaultTypeInternal _GeneralRequest_default_instance_;
class GeneralResponse;
class GeneralResponseDefaultTypeInternal;
extern GeneralResponseDefaultTypeInternal _GeneralResponse_default_instance_;
class GetTablePartitionRequest;
class GetTablePartitionRequestDefaultTypeInternal;
extern GetTablePartitionRequestDefaultTypeInternal _GetTablePartitionRequest_default_instance_;
class GetTablePartitionResponse;
class GetTablePartitionResponseDefaultTypeInternal;
extern GetTablePartitionResponseDefaultTypeInternal _GetTablePartitionResponse_default_instance_;
class LoadTableRequest;
class LoadTableRequestDefaultTypeInternal;
extern LoadTableRequestDefaultTypeInternal _LoadTableRequest_default_instance_;
class MakeSnapshotNSRequest;
class MakeSnapshotNSRequestDefaultTypeInternal;
extern MakeSnapshotNSRequestDefaultTypeInternal _MakeSnapshotNSRequest_default_instance_;
class MigrateInfo;
class MigrateInfoDefaultTypeInternal;
extern MigrateInfoDefaultTypeInternal _MigrateInfo_default_instance_;
class MigrateRequest;
class MigrateRequestDefaultTypeInternal;
extern MigrateRequestDefaultTypeInternal _MigrateRequest_default_instance_;
class OPStatus;
class OPStatusDefaultTypeInternal;
extern OPStatusDefaultTypeInternal _OPStatus_default_instance_;
class OfflineEndpointRequest;
class OfflineEndpointRequestDefaultTypeInternal;
extern OfflineEndpointRequestDefaultTypeInternal _OfflineEndpointRequest_default_instance_;
class OfflineTableInfo;
class OfflineTableInfoDefaultTypeInternal;
extern OfflineTableInfoDefaultTypeInternal _OfflineTableInfo_default_instance_;
class OfflineTableInfo_OptionsEntry_DoNotUse;
class OfflineTableInfo_OptionsEntry_DoNotUseDefaultTypeInternal;
extern OfflineTableInfo_OptionsEntry_DoNotUseDefaultTypeInternal _OfflineTableInfo_OptionsEntry_DoNotUse_default_instance_;
class Pair;
class PairDefaultTypeInternal;
extern PairDefaultTypeInternal _Pair_default_instance_;
class PartitionMeta;
class PartitionMetaDefaultTypeInternal;
extern PartitionMetaDefaultTypeInternal _PartitionMeta_default_instance_;
class RecoverEndpointRequest;
class RecoverEndpointRequestDefaultTypeInternal;
extern RecoverEndpointRequestDefaultTypeInternal _RecoverEndpointRequest_default_instance_;
class RecoverTableData;
class RecoverTableDataDefaultTypeInternal;
extern RecoverTableDataDefaultTypeInternal _RecoverTableData_default_instance_;
class RecoverTableRequest;
class RecoverTableRequestDefaultTypeInternal;
extern RecoverTableRequestDefaultTypeInternal _RecoverTableRequest_default_instance_;
class RemoveReplicaOfRequest;
class RemoveReplicaOfRequestDefaultTypeInternal;
extern RemoveReplicaOfRequestDefaultTypeInternal _RemoveReplicaOfRequest_default_instance_;
class ReplicaClusterByNsRequest;
class ReplicaClusterByNsRequestDefaultTypeInternal;
extern ReplicaClusterByNsRequestDefaultTypeInternal _ReplicaClusterByNsRequest_default_instance_;
class SetSdkEndpointRequest;
class SetSdkEndpointRequestDefaultTypeInternal;
extern SetSdkEndpointRequestDefaultTypeInternal _SetSdkEndpointRequest_default_instance_;
class SetTablePartitionRequest;
class SetTablePartitionRequestDefaultTypeInternal;
extern SetTablePartitionRequestDefaultTypeInternal _SetTablePartitionRequest_default_instance_;
class ShowCatalogRequest;
class ShowCatalogRequestDefaultTypeInternal;
extern ShowCatalogRequestDefaultTypeInternal _ShowCatalogRequest_default_instance_;
class ShowCatalogResponse;
class ShowCatalogResponseDefaultTypeInternal;
extern ShowCatalogResponseDefaultTypeInternal _ShowCatalogResponse_default_instance_;
class ShowDatabaseResponse;
class ShowDatabaseResponseDefaultTypeInternal;
extern ShowDatabaseResponseDefaultTypeInternal _ShowDatabaseResponse_default_instance_;
class ShowFunctionRequest;
class ShowFunctionRequestDefaultTypeInternal;
extern ShowFunctionRequestDefaultTypeInternal _ShowFunctionRequest_default_instance_;
class ShowFunctionResponse;
class ShowFunctionResponseDefaultTypeInternal;
extern ShowFunctionResponseDefaultTypeInternal _ShowFunctionResponse_default_instance_;
class ShowOPStatusRequest;
class ShowOPStatusRequestDefaultTypeInternal;
extern ShowOPStatusRequestDefaultTypeInternal _ShowOPStatusRequest_default_instance_;
class ShowOPStatusResponse;
class ShowOPStatusResponseDefaultTypeInternal;
extern ShowOPStatusResponseDefaultTypeInternal _ShowOPStatusResponse_default_instance_;
class ShowReplicaClusterResponse;
class ShowReplicaClusterResponseDefaultTypeInternal;
extern ShowReplicaClusterResponseDefaultTypeInternal _ShowReplicaClusterResponse_default_instance_;
class ShowSdkEndpointRequest;
class ShowSdkEndpointRequestDefaultTypeInternal;
extern ShowSdkEndpointRequestDefaultTypeInternal _ShowSdkEndpointRequest_default_instance_;
class ShowSdkEndpointResponse;
class ShowSdkEndpointResponseDefaultTypeInternal;
extern ShowSdkEndpointResponseDefaultTypeInternal _ShowSdkEndpointResponse_default_instance_;
class ShowTableRequest;
class ShowTableRequestDefaultTypeInternal;
extern ShowTableRequestDefaultTypeInternal _ShowTableRequest_default_instance_;
class ShowTableResponse;
class ShowTableResponseDefaultTypeInternal;
extern ShowTableResponseDefaultTypeInternal _ShowTableResponse_default_instance_;
class ShowTabletRequest;
class ShowTabletRequestDefaultTypeInternal;
extern ShowTabletRequestDefaultTypeInternal _ShowTabletRequest_default_instance_;
class ShowTabletResponse;
class ShowTabletResponseDefaultTypeInternal;
extern ShowTabletResponseDefaultTypeInternal _ShowTabletResponse_default_instance_;
class SwitchModeRequest;
class SwitchModeRequestDefaultTypeInternal;
extern SwitchModeRequestDefaultTypeInternal _SwitchModeRequest_default_instance_;
class SyncTableRequest;
class SyncTableRequestDefaultTypeInternal;
extern SyncTableRequestDefaultTypeInternal _SyncTableRequest_default_instance_;
class TableInfo;
class TableInfoDefaultTypeInternal;
extern TableInfoDefaultTypeInternal _TableInfo_default_instance_;
class TablePartition;
class TablePartitionDefaultTypeInternal;
extern TablePartitionDefaultTypeInternal _TablePartition_default_instance_;
class TabletStatus;
class TabletStatusDefaultTypeInternal;
extern TabletStatusDefaultTypeInternal _TabletStatus_default_instance_;
class TermPair;
class TermPairDefaultTypeInternal;
extern TermPairDefaultTypeInternal _TermPair_default_instance_;
class UpdateTTLRequest;
class UpdateTTLRequestDefaultTypeInternal;
extern UpdateTTLRequestDefaultTypeInternal _UpdateTTLRequest_default_instance_;
class UpdateTTLResponse;
class UpdateTTLResponseDefaultTypeInternal;
extern UpdateTTLResponseDefaultTypeInternal _UpdateTTLResponse_default_instance_;
class UpdateTableAliveRequest;
class UpdateTableAliveRequestDefaultTypeInternal;
extern UpdateTableAliveRequestDefaultTypeInternal _UpdateTableAliveRequest_default_instance_;
class UseDatabaseRequest;
class UseDatabaseRequestDefaultTypeInternal;
extern UseDatabaseRequestDefaultTypeInternal _UseDatabaseRequest_default_instance_;
class ZoneInfo;
class ZoneInfoDefaultTypeInternal;
extern ZoneInfoDefaultTypeInternal _ZoneInfo_default_instance_;
}  // namespace nameserver
}  // namespace openmldb
namespace google {
namespace protobuf {
template<> ::openmldb::nameserver::AddIndexMeta* Arena::CreateMaybeMessage<::openmldb::nameserver::AddIndexMeta>(Arena*);
template<> ::openmldb::nameserver::AddIndexRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::AddIndexRequest>(Arena*);
template<> ::openmldb::nameserver::AddReplicaClusterByNsResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::AddReplicaClusterByNsResponse>(Arena*);
template<> ::openmldb::nameserver::AddReplicaData* Arena::CreateMaybeMessage<::openmldb::nameserver::AddReplicaData>(Arena*);
template<> ::openmldb::nameserver::AddReplicaNSRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::AddReplicaNSRequest>(Arena*);
template<> ::openmldb::nameserver::AddTableFieldRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::AddTableFieldRequest>(Arena*);
template<> ::openmldb::nameserver::CancelOPRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::CancelOPRequest>(Arena*);
template<> ::openmldb::nameserver::ChangeLeaderData* Arena::CreateMaybeMessage<::openmldb::nameserver::ChangeLeaderData>(Arena*);
template<> ::openmldb::nameserver::ChangeLeaderRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ChangeLeaderRequest>(Arena*);
template<> ::openmldb::nameserver::ClusterAddAge* Arena::CreateMaybeMessage<::openmldb::nameserver::ClusterAddAge>(Arena*);
template<> ::openmldb::nameserver::ClusterAddress* Arena::CreateMaybeMessage<::openmldb::nameserver::ClusterAddress>(Arena*);
template<> ::openmldb::nameserver::ConfGetRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ConfGetRequest>(Arena*);
template<> ::openmldb::nameserver::ConfGetResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ConfGetResponse>(Arena*);
template<> ::openmldb::nameserver::ConfSetRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ConfSetRequest>(Arena*);
template<> ::openmldb::nameserver::ConnectZKRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ConnectZKRequest>(Arena*);
template<> ::openmldb::nameserver::CreateDatabaseRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::CreateDatabaseRequest>(Arena*);
template<> ::openmldb::nameserver::CreateFunctionRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::CreateFunctionRequest>(Arena*);
template<> ::openmldb::nameserver::CreateFunctionResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::CreateFunctionResponse>(Arena*);
template<> ::openmldb::nameserver::CreateTableData* Arena::CreateMaybeMessage<::openmldb::nameserver::CreateTableData>(Arena*);
template<> ::openmldb::nameserver::CreateTableInfoRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::CreateTableInfoRequest>(Arena*);
template<> ::openmldb::nameserver::CreateTableInfoResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::CreateTableInfoResponse>(Arena*);
template<> ::openmldb::nameserver::CreateTableRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::CreateTableRequest>(Arena*);
template<> ::openmldb::nameserver::DelReplicaNSRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::DelReplicaNSRequest>(Arena*);
template<> ::openmldb::nameserver::DeleteIndexRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::DeleteIndexRequest>(Arena*);
template<> ::openmldb::nameserver::DisConnectZKRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::DisConnectZKRequest>(Arena*);
template<> ::openmldb::nameserver::DropDatabaseRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::DropDatabaseRequest>(Arena*);
template<> ::openmldb::nameserver::DropFunctionRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::DropFunctionRequest>(Arena*);
template<> ::openmldb::nameserver::DropFunctionResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::DropFunctionResponse>(Arena*);
template<> ::openmldb::nameserver::DropTableRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::DropTableRequest>(Arena*);
template<> ::openmldb::nameserver::EndpointStatusData* Arena::CreateMaybeMessage<::openmldb::nameserver::EndpointStatusData>(Arena*);
template<> ::openmldb::nameserver::GeneralRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::GeneralRequest>(Arena*);
template<> ::openmldb::nameserver::GeneralResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::GeneralResponse>(Arena*);
template<> ::openmldb::nameserver::GetTablePartitionRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::GetTablePartitionRequest>(Arena*);
template<> ::openmldb::nameserver::GetTablePartitionResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::GetTablePartitionResponse>(Arena*);
template<> ::openmldb::nameserver::LoadTableRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::LoadTableRequest>(Arena*);
template<> ::openmldb::nameserver::MakeSnapshotNSRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::MakeSnapshotNSRequest>(Arena*);
template<> ::openmldb::nameserver::MigrateInfo* Arena::CreateMaybeMessage<::openmldb::nameserver::MigrateInfo>(Arena*);
template<> ::openmldb::nameserver::MigrateRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::MigrateRequest>(Arena*);
template<> ::openmldb::nameserver::OPStatus* Arena::CreateMaybeMessage<::openmldb::nameserver::OPStatus>(Arena*);
template<> ::openmldb::nameserver::OfflineEndpointRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::OfflineEndpointRequest>(Arena*);
template<> ::openmldb::nameserver::OfflineTableInfo* Arena::CreateMaybeMessage<::openmldb::nameserver::OfflineTableInfo>(Arena*);
template<> ::openmldb::nameserver::OfflineTableInfo_OptionsEntry_DoNotUse* Arena::CreateMaybeMessage<::openmldb::nameserver::OfflineTableInfo_OptionsEntry_DoNotUse>(Arena*);
template<> ::openmldb::nameserver::Pair* Arena::CreateMaybeMessage<::openmldb::nameserver::Pair>(Arena*);
template<> ::openmldb::nameserver::PartitionMeta* Arena::CreateMaybeMessage<::openmldb::nameserver::PartitionMeta>(Arena*);
template<> ::openmldb::nameserver::RecoverEndpointRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::RecoverEndpointRequest>(Arena*);
template<> ::openmldb::nameserver::RecoverTableData* Arena::CreateMaybeMessage<::openmldb::nameserver::RecoverTableData>(Arena*);
template<> ::openmldb::nameserver::RecoverTableRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::RecoverTableRequest>(Arena*);
template<> ::openmldb::nameserver::RemoveReplicaOfRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::RemoveReplicaOfRequest>(Arena*);
template<> ::openmldb::nameserver::ReplicaClusterByNsRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ReplicaClusterByNsRequest>(Arena*);
template<> ::openmldb::nameserver::SetSdkEndpointRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::SetSdkEndpointRequest>(Arena*);
template<> ::openmldb::nameserver::SetTablePartitionRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::SetTablePartitionRequest>(Arena*);
template<> ::openmldb::nameserver::ShowCatalogRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowCatalogRequest>(Arena*);
template<> ::openmldb::nameserver::ShowCatalogResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowCatalogResponse>(Arena*);
template<> ::openmldb::nameserver::ShowDatabaseResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowDatabaseResponse>(Arena*);
template<> ::openmldb::nameserver::ShowFunctionRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowFunctionRequest>(Arena*);
template<> ::openmldb::nameserver::ShowFunctionResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowFunctionResponse>(Arena*);
template<> ::openmldb::nameserver::ShowOPStatusRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowOPStatusRequest>(Arena*);
template<> ::openmldb::nameserver::ShowOPStatusResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowOPStatusResponse>(Arena*);
template<> ::openmldb::nameserver::ShowReplicaClusterResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowReplicaClusterResponse>(Arena*);
template<> ::openmldb::nameserver::ShowSdkEndpointRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowSdkEndpointRequest>(Arena*);
template<> ::openmldb::nameserver::ShowSdkEndpointResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowSdkEndpointResponse>(Arena*);
template<> ::openmldb::nameserver::ShowTableRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowTableRequest>(Arena*);
template<> ::openmldb::nameserver::ShowTableResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowTableResponse>(Arena*);
template<> ::openmldb::nameserver::ShowTabletRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowTabletRequest>(Arena*);
template<> ::openmldb::nameserver::ShowTabletResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::ShowTabletResponse>(Arena*);
template<> ::openmldb::nameserver::SwitchModeRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::SwitchModeRequest>(Arena*);
template<> ::openmldb::nameserver::SyncTableRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::SyncTableRequest>(Arena*);
template<> ::openmldb::nameserver::TableInfo* Arena::CreateMaybeMessage<::openmldb::nameserver::TableInfo>(Arena*);
template<> ::openmldb::nameserver::TablePartition* Arena::CreateMaybeMessage<::openmldb::nameserver::TablePartition>(Arena*);
template<> ::openmldb::nameserver::TabletStatus* Arena::CreateMaybeMessage<::openmldb::nameserver::TabletStatus>(Arena*);
template<> ::openmldb::nameserver::TermPair* Arena::CreateMaybeMessage<::openmldb::nameserver::TermPair>(Arena*);
template<> ::openmldb::nameserver::UpdateTTLRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::UpdateTTLRequest>(Arena*);
template<> ::openmldb::nameserver::UpdateTTLResponse* Arena::CreateMaybeMessage<::openmldb::nameserver::UpdateTTLResponse>(Arena*);
template<> ::openmldb::nameserver::UpdateTableAliveRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::UpdateTableAliveRequest>(Arena*);
template<> ::openmldb::nameserver::UseDatabaseRequest* Arena::CreateMaybeMessage<::openmldb::nameserver::UseDatabaseRequest>(Arena*);
template<> ::openmldb::nameserver::ZoneInfo* Arena::CreateMaybeMessage<::openmldb::nameserver::ZoneInfo>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace openmldb {
namespace nameserver {

enum ServerMode {
  kNORMAL = 0,
  kLEADER = 1,
  kFOLLOWER = 2
};
bool ServerMode_IsValid(int value);
const ServerMode ServerMode_MIN = kNORMAL;
const ServerMode ServerMode_MAX = kFOLLOWER;
const int ServerMode_ARRAYSIZE = ServerMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* ServerMode_descriptor();
inline const ::std::string& ServerMode_Name(ServerMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    ServerMode_descriptor(), value);
}
inline bool ServerMode_Parse(
    const ::std::string& name, ServerMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ServerMode>(
    ServerMode_descriptor(), name, value);
}
enum ClusterStatus {
  kClusterHealthy = 0,
  kClusterOffline = 1,
  kClusterRemove = 2
};
bool ClusterStatus_IsValid(int value);
const ClusterStatus ClusterStatus_MIN = kClusterHealthy;
const ClusterStatus ClusterStatus_MAX = kClusterRemove;
const int ClusterStatus_ARRAYSIZE = ClusterStatus_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClusterStatus_descriptor();
inline const ::std::string& ClusterStatus_Name(ClusterStatus value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClusterStatus_descriptor(), value);
}
inline bool ClusterStatus_Parse(
    const ::std::string& name, ClusterStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClusterStatus>(
    ClusterStatus_descriptor(), name, value);
}
// ===================================================================

class PartitionMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.PartitionMeta) */ {
 public:
  PartitionMeta();
  virtual ~PartitionMeta();

  PartitionMeta(const PartitionMeta& from);

  inline PartitionMeta& operator=(const PartitionMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PartitionMeta(PartitionMeta&& from) noexcept
    : PartitionMeta() {
    *this = ::std::move(from);
  }

  inline PartitionMeta& operator=(PartitionMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PartitionMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PartitionMeta* internal_default_instance() {
    return reinterpret_cast<const PartitionMeta*>(
               &_PartitionMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(PartitionMeta* other);
  friend void swap(PartitionMeta& a, PartitionMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PartitionMeta* New() const final {
    return CreateMaybeMessage<PartitionMeta>(NULL);
  }

  PartitionMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<PartitionMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const PartitionMeta& from);
  void MergeFrom(const PartitionMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PartitionMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string alias = 10;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 10;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional uint64 offset = 4;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 4;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // optional uint64 record_cnt = 5;
  bool has_record_cnt() const;
  void clear_record_cnt();
  static const int kRecordCntFieldNumber = 5;
  ::google::protobuf::uint64 record_cnt() const;
  void set_record_cnt(::google::protobuf::uint64 value);

  // optional uint64 record_byte_size = 6;
  bool has_record_byte_size() const;
  void clear_record_byte_size();
  static const int kRecordByteSizeFieldNumber = 6;
  ::google::protobuf::uint64 record_byte_size() const;
  void set_record_byte_size(::google::protobuf::uint64 value);

  // optional uint64 diskused = 8 [default = 0];
  bool has_diskused() const;
  void clear_diskused();
  static const int kDiskusedFieldNumber = 8;
  ::google::protobuf::uint64 diskused() const;
  void set_diskused(::google::protobuf::uint64 value);

  // required bool is_leader = 2;
  bool has_is_leader() const;
  void clear_is_leader();
  static const int kIsLeaderFieldNumber = 2;
  bool is_leader() const;
  void set_is_leader(bool value);

  // optional bool is_alive = 3 [default = true];
  bool has_is_alive() const;
  void clear_is_alive();
  static const int kIsAliveFieldNumber = 3;
  bool is_alive() const;
  void set_is_alive(bool value);

  // optional bool tablet_has_partition = 7 [default = true];
  bool has_tablet_has_partition() const;
  void clear_tablet_has_partition();
  static const int kTabletHasPartitionFieldNumber = 7;
  bool tablet_has_partition() const;
  void set_tablet_has_partition(bool value);

  // optional uint32 remote_tid = 9 [default = 4294967295];
  bool has_remote_tid() const;
  void clear_remote_tid();
  static const int kRemoteTidFieldNumber = 9;
  ::google::protobuf::uint32 remote_tid() const;
  void set_remote_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.PartitionMeta)
 private:
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_is_leader();
  void clear_has_is_leader();
  void set_has_is_alive();
  void clear_has_is_alive();
  void set_has_offset();
  void clear_has_offset();
  void set_has_record_cnt();
  void clear_has_record_cnt();
  void set_has_record_byte_size();
  void clear_has_record_byte_size();
  void set_has_tablet_has_partition();
  void clear_has_tablet_has_partition();
  void set_has_diskused();
  void clear_has_diskused();
  void set_has_remote_tid();
  void clear_has_remote_tid();
  void set_has_alias();
  void clear_has_alias();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint64 record_cnt_;
  ::google::protobuf::uint64 record_byte_size_;
  ::google::protobuf::uint64 diskused_;
  bool is_leader_;
  bool is_alive_;
  bool tablet_has_partition_;
  ::google::protobuf::uint32 remote_tid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TermPair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.TermPair) */ {
 public:
  TermPair();
  virtual ~TermPair();

  TermPair(const TermPair& from);

  inline TermPair& operator=(const TermPair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TermPair(TermPair&& from) noexcept
    : TermPair() {
    *this = ::std::move(from);
  }

  inline TermPair& operator=(TermPair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TermPair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TermPair* internal_default_instance() {
    return reinterpret_cast<const TermPair*>(
               &_TermPair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TermPair* other);
  friend void swap(TermPair& a, TermPair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TermPair* New() const final {
    return CreateMaybeMessage<TermPair>(NULL);
  }

  TermPair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TermPair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TermPair& from);
  void MergeFrom(const TermPair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TermPair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 term = 1;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 1;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // required uint64 offset = 2;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 2;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.TermPair)
 private:
  void set_has_term();
  void clear_has_term();
  void set_has_offset();
  void clear_has_offset();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 offset_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TablePartition : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.TablePartition) */ {
 public:
  TablePartition();
  virtual ~TablePartition();

  TablePartition(const TablePartition& from);

  inline TablePartition& operator=(const TablePartition& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TablePartition(TablePartition&& from) noexcept
    : TablePartition() {
    *this = ::std::move(from);
  }

  inline TablePartition& operator=(TablePartition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TablePartition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TablePartition* internal_default_instance() {
    return reinterpret_cast<const TablePartition*>(
               &_TablePartition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TablePartition* other);
  friend void swap(TablePartition& a, TablePartition& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TablePartition* New() const final {
    return CreateMaybeMessage<TablePartition>(NULL);
  }

  TablePartition* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TablePartition>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TablePartition& from);
  void MergeFrom(const TablePartition& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TablePartition* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.PartitionMeta partition_meta = 2;
  int partition_meta_size() const;
  void clear_partition_meta();
  static const int kPartitionMetaFieldNumber = 2;
  ::openmldb::nameserver::PartitionMeta* mutable_partition_meta(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >*
      mutable_partition_meta();
  const ::openmldb::nameserver::PartitionMeta& partition_meta(int index) const;
  ::openmldb::nameserver::PartitionMeta* add_partition_meta();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >&
      partition_meta() const;

  // repeated .openmldb.nameserver.TermPair term_offset = 3;
  int term_offset_size() const;
  void clear_term_offset();
  static const int kTermOffsetFieldNumber = 3;
  ::openmldb::nameserver::TermPair* mutable_term_offset(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TermPair >*
      mutable_term_offset();
  const ::openmldb::nameserver::TermPair& term_offset(int index) const;
  ::openmldb::nameserver::TermPair* add_term_offset();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TermPair >&
      term_offset() const;

  // repeated .openmldb.nameserver.PartitionMeta remote_partition_meta = 7;
  int remote_partition_meta_size() const;
  void clear_remote_partition_meta();
  static const int kRemotePartitionMetaFieldNumber = 7;
  ::openmldb::nameserver::PartitionMeta* mutable_remote_partition_meta(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >*
      mutable_remote_partition_meta();
  const ::openmldb::nameserver::PartitionMeta& remote_partition_meta(int index) const;
  ::openmldb::nameserver::PartitionMeta* add_remote_partition_meta();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >&
      remote_partition_meta() const;

  // optional uint64 record_cnt = 4;
  bool has_record_cnt() const;
  void clear_record_cnt();
  static const int kRecordCntFieldNumber = 4;
  ::google::protobuf::uint64 record_cnt() const;
  void set_record_cnt(::google::protobuf::uint64 value);

  // optional uint64 record_byte_size = 5;
  bool has_record_byte_size() const;
  void clear_record_byte_size();
  static const int kRecordByteSizeFieldNumber = 5;
  ::google::protobuf::uint64 record_byte_size() const;
  void set_record_byte_size(::google::protobuf::uint64 value);

  // optional uint64 diskused = 6 [default = 0];
  bool has_diskused() const;
  void clear_diskused();
  static const int kDiskusedFieldNumber = 6;
  ::google::protobuf::uint64 diskused() const;
  void set_diskused(::google::protobuf::uint64 value);

  // required uint32 pid = 1;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 1;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.TablePartition)
 private:
  void set_has_pid();
  void clear_has_pid();
  void set_has_record_cnt();
  void clear_has_record_cnt();
  void set_has_record_byte_size();
  void clear_has_record_byte_size();
  void set_has_diskused();
  void clear_has_diskused();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta > partition_meta_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TermPair > term_offset_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta > remote_partition_meta_;
  ::google::protobuf::uint64 record_cnt_;
  ::google::protobuf::uint64 record_byte_size_;
  ::google::protobuf::uint64 diskused_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateTTLRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.UpdateTTLRequest) */ {
 public:
  UpdateTTLRequest();
  virtual ~UpdateTTLRequest();

  UpdateTTLRequest(const UpdateTTLRequest& from);

  inline UpdateTTLRequest& operator=(const UpdateTTLRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTTLRequest(UpdateTTLRequest&& from) noexcept
    : UpdateTTLRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTTLRequest& operator=(UpdateTTLRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTTLRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTTLRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTTLRequest*>(
               &_UpdateTTLRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(UpdateTTLRequest* other);
  friend void swap(UpdateTTLRequest& a, UpdateTTLRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTTLRequest* New() const final {
    return CreateMaybeMessage<UpdateTTLRequest>(NULL);
  }

  UpdateTTLRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTTLRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTTLRequest& from);
  void MergeFrom(const UpdateTTLRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTTLRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 2 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 2;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional string index_name = 3;
  bool has_index_name() const;
  void clear_index_name();
  static const int kIndexNameFieldNumber = 3;
  const ::std::string& index_name() const;
  void set_index_name(const ::std::string& value);
  #if LANG_CXX11
  void set_index_name(::std::string&& value);
  #endif
  void set_index_name(const char* value);
  void set_index_name(const char* value, size_t size);
  ::std::string* mutable_index_name();
  ::std::string* release_index_name();
  void set_allocated_index_name(::std::string* index_name);

  // optional .openmldb.common.TTLSt ttl_desc = 4;
  bool has_ttl_desc() const;
  void clear_ttl_desc();
  static const int kTtlDescFieldNumber = 4;
  private:
  const ::openmldb::common::TTLSt& _internal_ttl_desc() const;
  public:
  const ::openmldb::common::TTLSt& ttl_desc() const;
  ::openmldb::common::TTLSt* release_ttl_desc();
  ::openmldb::common::TTLSt* mutable_ttl_desc();
  void set_allocated_ttl_desc(::openmldb::common::TTLSt* ttl_desc);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.UpdateTTLRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_db();
  void clear_has_db();
  void set_has_index_name();
  void clear_has_index_name();
  void set_has_ttl_desc();
  void clear_has_ttl_desc();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr index_name_;
  ::openmldb::common::TTLSt* ttl_desc_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateTTLResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.UpdateTTLResponse) */ {
 public:
  UpdateTTLResponse();
  virtual ~UpdateTTLResponse();

  UpdateTTLResponse(const UpdateTTLResponse& from);

  inline UpdateTTLResponse& operator=(const UpdateTTLResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTTLResponse(UpdateTTLResponse&& from) noexcept
    : UpdateTTLResponse() {
    *this = ::std::move(from);
  }

  inline UpdateTTLResponse& operator=(UpdateTTLResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTTLResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTTLResponse* internal_default_instance() {
    return reinterpret_cast<const UpdateTTLResponse*>(
               &_UpdateTTLResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(UpdateTTLResponse* other);
  friend void swap(UpdateTTLResponse& a, UpdateTTLResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTTLResponse* New() const final {
    return CreateMaybeMessage<UpdateTTLResponse>(NULL);
  }

  UpdateTTLResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTTLResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTTLResponse& from);
  void MergeFrom(const UpdateTTLResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTTLResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.UpdateTTLResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OfflineTableInfo_OptionsEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<OfflineTableInfo_OptionsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<OfflineTableInfo_OptionsEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  OfflineTableInfo_OptionsEntry_DoNotUse();
  OfflineTableInfo_OptionsEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const OfflineTableInfo_OptionsEntry_DoNotUse& other);
  static const OfflineTableInfo_OptionsEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const OfflineTableInfo_OptionsEntry_DoNotUse*>(&_OfflineTableInfo_OptionsEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class OfflineTableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.OfflineTableInfo) */ {
 public:
  OfflineTableInfo();
  virtual ~OfflineTableInfo();

  OfflineTableInfo(const OfflineTableInfo& from);

  inline OfflineTableInfo& operator=(const OfflineTableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OfflineTableInfo(OfflineTableInfo&& from) noexcept
    : OfflineTableInfo() {
    *this = ::std::move(from);
  }

  inline OfflineTableInfo& operator=(OfflineTableInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineTableInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineTableInfo* internal_default_instance() {
    return reinterpret_cast<const OfflineTableInfo*>(
               &_OfflineTableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(OfflineTableInfo* other);
  friend void swap(OfflineTableInfo& a, OfflineTableInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfflineTableInfo* New() const final {
    return CreateMaybeMessage<OfflineTableInfo>(NULL);
  }

  OfflineTableInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OfflineTableInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OfflineTableInfo& from);
  void MergeFrom(const OfflineTableInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineTableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> options = 4;
  int options_size() const;
  void clear_options();
  static const int kOptionsFieldNumber = 4;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      options() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_options();

  // required string path = 1;
  bool has_path() const;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // required string format = 2;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::std::string& format() const;
  void set_format(const ::std::string& value);
  #if LANG_CXX11
  void set_format(::std::string&& value);
  #endif
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  ::std::string* mutable_format();
  ::std::string* release_format();
  void set_allocated_format(::std::string* format);

  // optional bool deep_copy = 3 [default = true];
  bool has_deep_copy() const;
  void clear_deep_copy();
  static const int kDeepCopyFieldNumber = 3;
  bool deep_copy() const;
  void set_deep_copy(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.OfflineTableInfo)
 private:
  void set_has_path();
  void clear_has_path();
  void set_has_format();
  void clear_has_format();
  void set_has_deep_copy();
  void clear_has_deep_copy();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      OfflineTableInfo_OptionsEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > options_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr format_;
  bool deep_copy_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TableInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.TableInfo) */ {
 public:
  TableInfo();
  virtual ~TableInfo();

  TableInfo(const TableInfo& from);

  inline TableInfo& operator=(const TableInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TableInfo(TableInfo&& from) noexcept
    : TableInfo() {
    *this = ::std::move(from);
  }

  inline TableInfo& operator=(TableInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TableInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TableInfo* internal_default_instance() {
    return reinterpret_cast<const TableInfo*>(
               &_TableInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(TableInfo* other);
  friend void swap(TableInfo& a, TableInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TableInfo* New() const final {
    return CreateMaybeMessage<TableInfo>(NULL);
  }

  TableInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TableInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TableInfo& from);
  void MergeFrom(const TableInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TableInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.TablePartition table_partition = 3;
  int table_partition_size() const;
  void clear_table_partition();
  static const int kTablePartitionFieldNumber = 3;
  ::openmldb::nameserver::TablePartition* mutable_table_partition(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TablePartition >*
      mutable_table_partition();
  const ::openmldb::nameserver::TablePartition& table_partition(int index) const;
  ::openmldb::nameserver::TablePartition* add_table_partition();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TablePartition >&
      table_partition() const;

  // repeated .openmldb.common.ColumnDesc column_desc = 9;
  int column_desc_size() const;
  void clear_column_desc();
  static const int kColumnDescFieldNumber = 9;
  ::openmldb::common::ColumnDesc* mutable_column_desc(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
      mutable_column_desc();
  const ::openmldb::common::ColumnDesc& column_desc(int index) const;
  ::openmldb::common::ColumnDesc* add_column_desc();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
      column_desc() const;

  // repeated .openmldb.common.ColumnKey column_key = 10;
  int column_key_size() const;
  void clear_column_key();
  static const int kColumnKeyFieldNumber = 10;
  ::openmldb::common::ColumnKey* mutable_column_key(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >*
      mutable_column_key();
  const ::openmldb::common::ColumnKey& column_key(int index) const;
  ::openmldb::common::ColumnKey* add_column_key();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >&
      column_key() const;

  // repeated .openmldb.common.ColumnDesc added_column_desc = 11;
  int added_column_desc_size() const;
  void clear_added_column_desc();
  static const int kAddedColumnDescFieldNumber = 11;
  ::openmldb::common::ColumnDesc* mutable_added_column_desc(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
      mutable_added_column_desc();
  const ::openmldb::common::ColumnDesc& added_column_desc(int index) const;
  ::openmldb::common::ColumnDesc* add_added_column_desc();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
      added_column_desc() const;

  // repeated string partition_key = 14;
  int partition_key_size() const;
  void clear_partition_key();
  static const int kPartitionKeyFieldNumber = 14;
  const ::std::string& partition_key(int index) const;
  ::std::string* mutable_partition_key(int index);
  void set_partition_key(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_partition_key(int index, ::std::string&& value);
  #endif
  void set_partition_key(int index, const char* value);
  void set_partition_key(int index, const char* value, size_t size);
  ::std::string* add_partition_key();
  void add_partition_key(const ::std::string& value);
  #if LANG_CXX11
  void add_partition_key(::std::string&& value);
  #endif
  void add_partition_key(const char* value);
  void add_partition_key(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& partition_key() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_partition_key();

  // repeated .openmldb.common.VersionPair schema_versions = 15;
  int schema_versions_size() const;
  void clear_schema_versions();
  static const int kSchemaVersionsFieldNumber = 15;
  ::openmldb::common::VersionPair* mutable_schema_versions(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::VersionPair >*
      mutable_schema_versions();
  const ::openmldb::common::VersionPair& schema_versions(int index) const;
  ::openmldb::common::VersionPair* add_schema_versions();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::VersionPair >&
      schema_versions() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 13 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 13;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.nameserver.OfflineTableInfo offline_table_info = 16;
  bool has_offline_table_info() const;
  void clear_offline_table_info();
  static const int kOfflineTableInfoFieldNumber = 16;
  private:
  const ::openmldb::nameserver::OfflineTableInfo& _internal_offline_table_info() const;
  public:
  const ::openmldb::nameserver::OfflineTableInfo& offline_table_info() const;
  ::openmldb::nameserver::OfflineTableInfo* release_offline_table_info();
  ::openmldb::nameserver::OfflineTableInfo* mutable_offline_table_info();
  void set_allocated_offline_table_info(::openmldb::nameserver::OfflineTableInfo* offline_table_info);

  // optional uint32 tid = 4;
  bool has_tid() const;
  void clear_tid();
  static const int kTidFieldNumber = 4;
  ::google::protobuf::uint32 tid() const;
  void set_tid(::google::protobuf::uint32 value);

  // optional uint32 partition_num = 5;
  bool has_partition_num() const;
  void clear_partition_num();
  static const int kPartitionNumFieldNumber = 5;
  ::google::protobuf::uint32 partition_num() const;
  void set_partition_num(::google::protobuf::uint32 value);

  // optional uint32 replica_num = 6;
  bool has_replica_num() const;
  void clear_replica_num();
  static const int kReplicaNumFieldNumber = 6;
  ::google::protobuf::uint32 replica_num() const;
  void set_replica_num(::google::protobuf::uint32 value);

  // optional .openmldb.type.CompressType compress_type = 7 [default = kNoCompress];
  bool has_compress_type() const;
  void clear_compress_type();
  static const int kCompressTypeFieldNumber = 7;
  ::openmldb::type::CompressType compress_type() const;
  void set_compress_type(::openmldb::type::CompressType value);

  // optional uint32 key_entry_max_height = 8;
  bool has_key_entry_max_height() const;
  void clear_key_entry_max_height();
  static const int kKeyEntryMaxHeightFieldNumber = 8;
  ::google::protobuf::uint32 key_entry_max_height() const;
  void set_key_entry_max_height(::google::protobuf::uint32 value);

  // optional uint32 base_table_tid = 18 [default = 0];
  bool has_base_table_tid() const;
  void clear_base_table_tid();
  static const int kBaseTableTidFieldNumber = 18;
  ::google::protobuf::uint32 base_table_tid() const;
  void set_base_table_tid(::google::protobuf::uint32 value);

  // optional .openmldb.common.StorageMode storage_mode = 17 [default = kMemory];
  bool has_storage_mode() const;
  void clear_storage_mode();
  static const int kStorageModeFieldNumber = 17;
  ::openmldb::common::StorageMode storage_mode() const;
  void set_storage_mode(::openmldb::common::StorageMode value);

  // optional uint32 seg_cnt = 2 [default = 8];
  bool has_seg_cnt() const;
  void clear_seg_cnt();
  static const int kSegCntFieldNumber = 2;
  ::google::protobuf::uint32 seg_cnt() const;
  void set_seg_cnt(::google::protobuf::uint32 value);

  // optional uint32 format_version = 12 [default = 1];
  bool has_format_version() const;
  void clear_format_version();
  static const int kFormatVersionFieldNumber = 12;
  ::google::protobuf::uint32 format_version() const;
  void set_format_version(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.TableInfo)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_seg_cnt();
  void clear_has_seg_cnt();
  void set_has_tid();
  void clear_has_tid();
  void set_has_partition_num();
  void clear_has_partition_num();
  void set_has_replica_num();
  void clear_has_replica_num();
  void set_has_compress_type();
  void clear_has_compress_type();
  void set_has_key_entry_max_height();
  void clear_has_key_entry_max_height();
  void set_has_format_version();
  void clear_has_format_version();
  void set_has_db();
  void clear_has_db();
  void set_has_offline_table_info();
  void clear_has_offline_table_info();
  void set_has_storage_mode();
  void clear_has_storage_mode();
  void set_has_base_table_tid();
  void clear_has_base_table_tid();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TablePartition > table_partition_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc > column_desc_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey > column_key_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc > added_column_desc_;
  ::google::protobuf::RepeatedPtrField< ::std::string> partition_key_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::VersionPair > schema_versions_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::nameserver::OfflineTableInfo* offline_table_info_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 partition_num_;
  ::google::protobuf::uint32 replica_num_;
  int compress_type_;
  ::google::protobuf::uint32 key_entry_max_height_;
  ::google::protobuf::uint32 base_table_tid_;
  int storage_mode_;
  ::google::protobuf::uint32 seg_cnt_;
  ::google::protobuf::uint32 format_version_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CreateTableRequest) */ {
 public:
  CreateTableRequest();
  virtual ~CreateTableRequest();

  CreateTableRequest(const CreateTableRequest& from);

  inline CreateTableRequest& operator=(const CreateTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTableRequest(CreateTableRequest&& from) noexcept
    : CreateTableRequest() {
    *this = ::std::move(from);
  }

  inline CreateTableRequest& operator=(CreateTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequest*>(
               &_CreateTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(CreateTableRequest* other);
  friend void swap(CreateTableRequest& a, CreateTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequest* New() const final {
    return CreateMaybeMessage<CreateTableRequest>(NULL);
  }

  CreateTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTableRequest& from);
  void MergeFrom(const CreateTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .openmldb.nameserver.TableInfo table_info = 1;
  bool has_table_info() const;
  void clear_table_info();
  static const int kTableInfoFieldNumber = 1;
  private:
  const ::openmldb::nameserver::TableInfo& _internal_table_info() const;
  public:
  const ::openmldb::nameserver::TableInfo& table_info() const;
  ::openmldb::nameserver::TableInfo* release_table_info();
  ::openmldb::nameserver::TableInfo* mutable_table_info();
  void set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info);

  // optional .openmldb.nameserver.ZoneInfo zone_info = 2;
  bool has_zone_info() const;
  void clear_zone_info();
  static const int kZoneInfoFieldNumber = 2;
  private:
  const ::openmldb::nameserver::ZoneInfo& _internal_zone_info() const;
  public:
  const ::openmldb::nameserver::ZoneInfo& zone_info() const;
  ::openmldb::nameserver::ZoneInfo* release_zone_info();
  ::openmldb::nameserver::ZoneInfo* mutable_zone_info();
  void set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info);

  // optional .openmldb.api.TaskInfo task_info = 3;
  bool has_task_info() const;
  void clear_task_info();
  static const int kTaskInfoFieldNumber = 3;
  private:
  const ::openmldb::api::TaskInfo& _internal_task_info() const;
  public:
  const ::openmldb::api::TaskInfo& task_info() const;
  ::openmldb::api::TaskInfo* release_task_info();
  ::openmldb::api::TaskInfo* mutable_task_info();
  void set_allocated_task_info(::openmldb::api::TaskInfo* task_info);

  // optional bool create_if_not_exist = 4 [default = false];
  bool has_create_if_not_exist() const;
  void clear_create_if_not_exist();
  static const int kCreateIfNotExistFieldNumber = 4;
  bool create_if_not_exist() const;
  void set_create_if_not_exist(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CreateTableRequest)
 private:
  void set_has_table_info();
  void clear_has_table_info();
  void set_has_zone_info();
  void clear_has_zone_info();
  void set_has_task_info();
  void clear_has_task_info();
  void set_has_create_if_not_exist();
  void clear_has_create_if_not_exist();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::openmldb::nameserver::TableInfo* table_info_;
  ::openmldb::nameserver::ZoneInfo* zone_info_;
  ::openmldb::api::TaskInfo* task_info_;
  bool create_if_not_exist_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.DropTableRequest) */ {
 public:
  DropTableRequest();
  virtual ~DropTableRequest();

  DropTableRequest(const DropTableRequest& from);

  inline DropTableRequest& operator=(const DropTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropTableRequest(DropTableRequest&& from) noexcept
    : DropTableRequest() {
    *this = ::std::move(from);
  }

  inline DropTableRequest& operator=(DropTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropTableRequest* internal_default_instance() {
    return reinterpret_cast<const DropTableRequest*>(
               &_DropTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(DropTableRequest* other);
  friend void swap(DropTableRequest& a, DropTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropTableRequest* New() const final {
    return CreateMaybeMessage<DropTableRequest>(NULL);
  }

  DropTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropTableRequest& from);
  void MergeFrom(const DropTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 4 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.nameserver.ZoneInfo zone_info = 2;
  bool has_zone_info() const;
  void clear_zone_info();
  static const int kZoneInfoFieldNumber = 2;
  private:
  const ::openmldb::nameserver::ZoneInfo& _internal_zone_info() const;
  public:
  const ::openmldb::nameserver::ZoneInfo& zone_info() const;
  ::openmldb::nameserver::ZoneInfo* release_zone_info();
  ::openmldb::nameserver::ZoneInfo* mutable_zone_info();
  void set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info);

  // optional .openmldb.api.TaskInfo task_info = 3;
  bool has_task_info() const;
  void clear_task_info();
  static const int kTaskInfoFieldNumber = 3;
  private:
  const ::openmldb::api::TaskInfo& _internal_task_info() const;
  public:
  const ::openmldb::api::TaskInfo& task_info() const;
  ::openmldb::api::TaskInfo* release_task_info();
  ::openmldb::api::TaskInfo* mutable_task_info();
  void set_allocated_task_info(::openmldb::api::TaskInfo* task_info);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.DropTableRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_zone_info();
  void clear_has_zone_info();
  void set_has_task_info();
  void clear_has_task_info();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::nameserver::ZoneInfo* zone_info_;
  ::openmldb::api::TaskInfo* task_info_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LoadTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.LoadTableRequest) */ {
 public:
  LoadTableRequest();
  virtual ~LoadTableRequest();

  LoadTableRequest(const LoadTableRequest& from);

  inline LoadTableRequest& operator=(const LoadTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  LoadTableRequest(LoadTableRequest&& from) noexcept
    : LoadTableRequest() {
    *this = ::std::move(from);
  }

  inline LoadTableRequest& operator=(LoadTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoadTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoadTableRequest* internal_default_instance() {
    return reinterpret_cast<const LoadTableRequest*>(
               &_LoadTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  void Swap(LoadTableRequest* other);
  friend void swap(LoadTableRequest& a, LoadTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline LoadTableRequest* New() const final {
    return CreateMaybeMessage<LoadTableRequest>(NULL);
  }

  LoadTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<LoadTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const LoadTableRequest& from);
  void MergeFrom(const LoadTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string endpoint = 2;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 2;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string db = 6 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 6;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.nameserver.ZoneInfo zone_info = 4;
  bool has_zone_info() const;
  void clear_zone_info();
  static const int kZoneInfoFieldNumber = 4;
  private:
  const ::openmldb::nameserver::ZoneInfo& _internal_zone_info() const;
  public:
  const ::openmldb::nameserver::ZoneInfo& zone_info() const;
  ::openmldb::nameserver::ZoneInfo* release_zone_info();
  ::openmldb::nameserver::ZoneInfo* mutable_zone_info();
  void set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info);

  // optional .openmldb.api.TaskInfo task_info = 5;
  bool has_task_info() const;
  void clear_task_info();
  static const int kTaskInfoFieldNumber = 5;
  private:
  const ::openmldb::api::TaskInfo& _internal_task_info() const;
  public:
  const ::openmldb::api::TaskInfo& task_info() const;
  ::openmldb::api::TaskInfo* release_task_info();
  ::openmldb::api::TaskInfo* mutable_task_info();
  void set_allocated_task_info(::openmldb::api::TaskInfo* task_info);

  // optional uint32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.LoadTableRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_pid();
  void clear_has_pid();
  void set_has_zone_info();
  void clear_has_zone_info();
  void set_has_task_info();
  void clear_has_task_info();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::nameserver::ZoneInfo* zone_info_;
  ::openmldb::api::TaskInfo* task_info_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTableInfoRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CreateTableInfoRequest) */ {
 public:
  CreateTableInfoRequest();
  virtual ~CreateTableInfoRequest();

  CreateTableInfoRequest(const CreateTableInfoRequest& from);

  inline CreateTableInfoRequest& operator=(const CreateTableInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTableInfoRequest(CreateTableInfoRequest&& from) noexcept
    : CreateTableInfoRequest() {
    *this = ::std::move(from);
  }

  inline CreateTableInfoRequest& operator=(CreateTableInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableInfoRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTableInfoRequest*>(
               &_CreateTableInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(CreateTableInfoRequest* other);
  friend void swap(CreateTableInfoRequest& a, CreateTableInfoRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableInfoRequest* New() const final {
    return CreateMaybeMessage<CreateTableInfoRequest>(NULL);
  }

  CreateTableInfoRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableInfoRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTableInfoRequest& from);
  void MergeFrom(const CreateTableInfoRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableInfoRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .openmldb.nameserver.TableInfo table_info = 1;
  bool has_table_info() const;
  void clear_table_info();
  static const int kTableInfoFieldNumber = 1;
  private:
  const ::openmldb::nameserver::TableInfo& _internal_table_info() const;
  public:
  const ::openmldb::nameserver::TableInfo& table_info() const;
  ::openmldb::nameserver::TableInfo* release_table_info();
  ::openmldb::nameserver::TableInfo* mutable_table_info();
  void set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info);

  // optional .openmldb.nameserver.ZoneInfo zone_info = 2;
  bool has_zone_info() const;
  void clear_zone_info();
  static const int kZoneInfoFieldNumber = 2;
  private:
  const ::openmldb::nameserver::ZoneInfo& _internal_zone_info() const;
  public:
  const ::openmldb::nameserver::ZoneInfo& zone_info() const;
  ::openmldb::nameserver::ZoneInfo* release_zone_info();
  ::openmldb::nameserver::ZoneInfo* mutable_zone_info();
  void set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CreateTableInfoRequest)
 private:
  void set_has_table_info();
  void clear_has_table_info();
  void set_has_zone_info();
  void clear_has_zone_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::openmldb::nameserver::TableInfo* table_info_;
  ::openmldb::nameserver::ZoneInfo* zone_info_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowTableRequest) */ {
 public:
  ShowTableRequest();
  virtual ~ShowTableRequest();

  ShowTableRequest(const ShowTableRequest& from);

  inline ShowTableRequest& operator=(const ShowTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowTableRequest(ShowTableRequest&& from) noexcept
    : ShowTableRequest() {
    *this = ::std::move(from);
  }

  inline ShowTableRequest& operator=(ShowTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowTableRequest* internal_default_instance() {
    return reinterpret_cast<const ShowTableRequest*>(
               &_ShowTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(ShowTableRequest* other);
  friend void swap(ShowTableRequest& a, ShowTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowTableRequest* New() const final {
    return CreateMaybeMessage<ShowTableRequest>(NULL);
  }

  ShowTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowTableRequest& from);
  void MergeFrom(const ShowTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 2 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 2;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional bool show_all = 3 [default = false];
  bool has_show_all() const;
  void clear_show_all();
  static const int kShowAllFieldNumber = 3;
  bool show_all() const;
  void set_show_all(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowTableRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_db();
  void clear_has_db();
  void set_has_show_all();
  void clear_has_show_all();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  bool show_all_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowTableResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowTableResponse) */ {
 public:
  ShowTableResponse();
  virtual ~ShowTableResponse();

  ShowTableResponse(const ShowTableResponse& from);

  inline ShowTableResponse& operator=(const ShowTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowTableResponse(ShowTableResponse&& from) noexcept
    : ShowTableResponse() {
    *this = ::std::move(from);
  }

  inline ShowTableResponse& operator=(ShowTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowTableResponse* internal_default_instance() {
    return reinterpret_cast<const ShowTableResponse*>(
               &_ShowTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  void Swap(ShowTableResponse* other);
  friend void swap(ShowTableResponse& a, ShowTableResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowTableResponse* New() const final {
    return CreateMaybeMessage<ShowTableResponse>(NULL);
  }

  ShowTableResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowTableResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowTableResponse& from);
  void MergeFrom(const ShowTableResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowTableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.TableInfo table_info = 1;
  int table_info_size() const;
  void clear_table_info();
  static const int kTableInfoFieldNumber = 1;
  ::openmldb::nameserver::TableInfo* mutable_table_info(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >*
      mutable_table_info();
  const ::openmldb::nameserver::TableInfo& table_info(int index) const;
  ::openmldb::nameserver::TableInfo* add_table_info();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >&
      table_info() const;

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowTableResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo > table_info_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MakeSnapshotNSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.MakeSnapshotNSRequest) */ {
 public:
  MakeSnapshotNSRequest();
  virtual ~MakeSnapshotNSRequest();

  MakeSnapshotNSRequest(const MakeSnapshotNSRequest& from);

  inline MakeSnapshotNSRequest& operator=(const MakeSnapshotNSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MakeSnapshotNSRequest(MakeSnapshotNSRequest&& from) noexcept
    : MakeSnapshotNSRequest() {
    *this = ::std::move(from);
  }

  inline MakeSnapshotNSRequest& operator=(MakeSnapshotNSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MakeSnapshotNSRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MakeSnapshotNSRequest* internal_default_instance() {
    return reinterpret_cast<const MakeSnapshotNSRequest*>(
               &_MakeSnapshotNSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(MakeSnapshotNSRequest* other);
  friend void swap(MakeSnapshotNSRequest& a, MakeSnapshotNSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MakeSnapshotNSRequest* New() const final {
    return CreateMaybeMessage<MakeSnapshotNSRequest>(NULL);
  }

  MakeSnapshotNSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MakeSnapshotNSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MakeSnapshotNSRequest& from);
  void MergeFrom(const MakeSnapshotNSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MakeSnapshotNSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 4 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional uint64 offset = 3;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 3;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // required uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.MakeSnapshotNSRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_offset();
  void clear_has_offset();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint64 offset_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddReplicaData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.AddReplicaData) */ {
 public:
  AddReplicaData();
  virtual ~AddReplicaData();

  AddReplicaData(const AddReplicaData& from);

  inline AddReplicaData& operator=(const AddReplicaData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddReplicaData(AddReplicaData&& from) noexcept
    : AddReplicaData() {
    *this = ::std::move(from);
  }

  inline AddReplicaData& operator=(AddReplicaData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddReplicaData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReplicaData* internal_default_instance() {
    return reinterpret_cast<const AddReplicaData*>(
               &_AddReplicaData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  void Swap(AddReplicaData* other);
  friend void swap(AddReplicaData& a, AddReplicaData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddReplicaData* New() const final {
    return CreateMaybeMessage<AddReplicaData>(NULL);
  }

  AddReplicaData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddReplicaData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddReplicaData& from);
  void MergeFrom(const AddReplicaData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReplicaData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string alias = 5;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 5;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional string db = 7 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 7;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.nameserver.TablePartition table_partition = 6;
  bool has_table_partition() const;
  void clear_table_partition();
  static const int kTablePartitionFieldNumber = 6;
  private:
  const ::openmldb::nameserver::TablePartition& _internal_table_partition() const;
  public:
  const ::openmldb::nameserver::TablePartition& table_partition() const;
  ::openmldb::nameserver::TablePartition* release_table_partition();
  ::openmldb::nameserver::TablePartition* mutable_table_partition();
  void set_allocated_table_partition(::openmldb::nameserver::TablePartition* table_partition);

  // required uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // optional uint32 remote_tid = 4;
  bool has_remote_tid() const;
  void clear_remote_tid();
  static const int kRemoteTidFieldNumber = 4;
  ::google::protobuf::uint32 remote_tid() const;
  void set_remote_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.AddReplicaData)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_remote_tid();
  void clear_has_remote_tid();
  void set_has_alias();
  void clear_has_alias();
  void set_has_table_partition();
  void clear_has_table_partition();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::nameserver::TablePartition* table_partition_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint32 remote_tid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddReplicaNSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.AddReplicaNSRequest) */ {
 public:
  AddReplicaNSRequest();
  virtual ~AddReplicaNSRequest();

  AddReplicaNSRequest(const AddReplicaNSRequest& from);

  inline AddReplicaNSRequest& operator=(const AddReplicaNSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddReplicaNSRequest(AddReplicaNSRequest&& from) noexcept
    : AddReplicaNSRequest() {
    *this = ::std::move(from);
  }

  inline AddReplicaNSRequest& operator=(AddReplicaNSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddReplicaNSRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReplicaNSRequest* internal_default_instance() {
    return reinterpret_cast<const AddReplicaNSRequest*>(
               &_AddReplicaNSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(AddReplicaNSRequest* other);
  friend void swap(AddReplicaNSRequest& a, AddReplicaNSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddReplicaNSRequest* New() const final {
    return CreateMaybeMessage<AddReplicaNSRequest>(NULL);
  }

  AddReplicaNSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddReplicaNSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddReplicaNSRequest& from);
  void MergeFrom(const AddReplicaNSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReplicaNSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pid_group = 4;
  int pid_group_size() const;
  void clear_pid_group();
  static const int kPidGroupFieldNumber = 4;
  ::google::protobuf::uint32 pid_group(int index) const;
  void set_pid_group(int index, ::google::protobuf::uint32 value);
  void add_pid_group(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pid_group() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pid_group();

  // repeated string endpoint_group = 5;
  int endpoint_group_size() const;
  void clear_endpoint_group();
  static const int kEndpointGroupFieldNumber = 5;
  const ::std::string& endpoint_group(int index) const;
  ::std::string* mutable_endpoint_group(int index);
  void set_endpoint_group(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint_group(int index, ::std::string&& value);
  #endif
  void set_endpoint_group(int index, const char* value);
  void set_endpoint_group(int index, const char* value, size_t size);
  ::std::string* add_endpoint_group();
  void add_endpoint_group(const ::std::string& value);
  #if LANG_CXX11
  void add_endpoint_group(::std::string&& value);
  #endif
  void add_endpoint_group(const char* value);
  void add_endpoint_group(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& endpoint_group() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_endpoint_group();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string db = 8 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 8;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.nameserver.ZoneInfo zone_info = 6;
  bool has_zone_info() const;
  void clear_zone_info();
  static const int kZoneInfoFieldNumber = 6;
  private:
  const ::openmldb::nameserver::ZoneInfo& _internal_zone_info() const;
  public:
  const ::openmldb::nameserver::ZoneInfo& zone_info() const;
  ::openmldb::nameserver::ZoneInfo* release_zone_info();
  ::openmldb::nameserver::ZoneInfo* mutable_zone_info();
  void set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info);

  // optional .openmldb.api.TaskInfo task_info = 7;
  bool has_task_info() const;
  void clear_task_info();
  static const int kTaskInfoFieldNumber = 7;
  private:
  const ::openmldb::api::TaskInfo& _internal_task_info() const;
  public:
  const ::openmldb::api::TaskInfo& task_info() const;
  ::openmldb::api::TaskInfo* release_task_info();
  ::openmldb::api::TaskInfo* mutable_task_info();
  void set_allocated_task_info(::openmldb::api::TaskInfo* task_info);

  // required uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.AddReplicaNSRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_zone_info();
  void clear_has_zone_info();
  void set_has_task_info();
  void clear_has_task_info();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pid_group_;
  ::google::protobuf::RepeatedPtrField< ::std::string> endpoint_group_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::nameserver::ZoneInfo* zone_info_;
  ::openmldb::api::TaskInfo* task_info_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Pair : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.Pair) */ {
 public:
  Pair();
  virtual ~Pair();

  Pair(const Pair& from);

  inline Pair& operator=(const Pair& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pair(Pair&& from) noexcept
    : Pair() {
    *this = ::std::move(from);
  }

  inline Pair& operator=(Pair&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pair& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pair* internal_default_instance() {
    return reinterpret_cast<const Pair*>(
               &_Pair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  void Swap(Pair* other);
  friend void swap(Pair& a, Pair& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pair* New() const final {
    return CreateMaybeMessage<Pair>(NULL);
  }

  Pair* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pair>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pair& from);
  void MergeFrom(const Pair& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pair* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.Pair)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfSetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ConfSetRequest) */ {
 public:
  ConfSetRequest();
  virtual ~ConfSetRequest();

  ConfSetRequest(const ConfSetRequest& from);

  inline ConfSetRequest& operator=(const ConfSetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfSetRequest(ConfSetRequest&& from) noexcept
    : ConfSetRequest() {
    *this = ::std::move(from);
  }

  inline ConfSetRequest& operator=(ConfSetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfSetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfSetRequest* internal_default_instance() {
    return reinterpret_cast<const ConfSetRequest*>(
               &_ConfSetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ConfSetRequest* other);
  friend void swap(ConfSetRequest& a, ConfSetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfSetRequest* New() const final {
    return CreateMaybeMessage<ConfSetRequest>(NULL);
  }

  ConfSetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfSetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfSetRequest& from);
  void MergeFrom(const ConfSetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfSetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .openmldb.nameserver.Pair conf = 1;
  bool has_conf() const;
  void clear_conf();
  static const int kConfFieldNumber = 1;
  private:
  const ::openmldb::nameserver::Pair& _internal_conf() const;
  public:
  const ::openmldb::nameserver::Pair& conf() const;
  ::openmldb::nameserver::Pair* release_conf();
  ::openmldb::nameserver::Pair* mutable_conf();
  void set_allocated_conf(::openmldb::nameserver::Pair* conf);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ConfSetRequest)
 private:
  void set_has_conf();
  void clear_has_conf();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::openmldb::nameserver::Pair* conf_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfGetRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ConfGetRequest) */ {
 public:
  ConfGetRequest();
  virtual ~ConfGetRequest();

  ConfGetRequest(const ConfGetRequest& from);

  inline ConfGetRequest& operator=(const ConfGetRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfGetRequest(ConfGetRequest&& from) noexcept
    : ConfGetRequest() {
    *this = ::std::move(from);
  }

  inline ConfGetRequest& operator=(ConfGetRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfGetRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfGetRequest* internal_default_instance() {
    return reinterpret_cast<const ConfGetRequest*>(
               &_ConfGetRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  void Swap(ConfGetRequest* other);
  friend void swap(ConfGetRequest& a, ConfGetRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfGetRequest* New() const final {
    return CreateMaybeMessage<ConfGetRequest>(NULL);
  }

  ConfGetRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfGetRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfGetRequest& from);
  void MergeFrom(const ConfGetRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfGetRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ConfGetRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConfGetResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ConfGetResponse) */ {
 public:
  ConfGetResponse();
  virtual ~ConfGetResponse();

  ConfGetResponse(const ConfGetResponse& from);

  inline ConfGetResponse& operator=(const ConfGetResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConfGetResponse(ConfGetResponse&& from) noexcept
    : ConfGetResponse() {
    *this = ::std::move(from);
  }

  inline ConfGetResponse& operator=(ConfGetResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConfGetResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConfGetResponse* internal_default_instance() {
    return reinterpret_cast<const ConfGetResponse*>(
               &_ConfGetResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ConfGetResponse* other);
  friend void swap(ConfGetResponse& a, ConfGetResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConfGetResponse* New() const final {
    return CreateMaybeMessage<ConfGetResponse>(NULL);
  }

  ConfGetResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConfGetResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConfGetResponse& from);
  void MergeFrom(const ConfGetResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConfGetResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.Pair conf = 3;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 3;
  ::openmldb::nameserver::Pair* mutable_conf(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::Pair >*
      mutable_conf();
  const ::openmldb::nameserver::Pair& conf(int index) const;
  ::openmldb::nameserver::Pair* add_conf();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::Pair >&
      conf() const;

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ConfGetResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::Pair > conf_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeLeaderRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ChangeLeaderRequest) */ {
 public:
  ChangeLeaderRequest();
  virtual ~ChangeLeaderRequest();

  ChangeLeaderRequest(const ChangeLeaderRequest& from);

  inline ChangeLeaderRequest& operator=(const ChangeLeaderRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeLeaderRequest(ChangeLeaderRequest&& from) noexcept
    : ChangeLeaderRequest() {
    *this = ::std::move(from);
  }

  inline ChangeLeaderRequest& operator=(ChangeLeaderRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLeaderRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLeaderRequest* internal_default_instance() {
    return reinterpret_cast<const ChangeLeaderRequest*>(
               &_ChangeLeaderRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(ChangeLeaderRequest* other);
  friend void swap(ChangeLeaderRequest& a, ChangeLeaderRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLeaderRequest* New() const final {
    return CreateMaybeMessage<ChangeLeaderRequest>(NULL);
  }

  ChangeLeaderRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeLeaderRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeLeaderRequest& from);
  void MergeFrom(const ChangeLeaderRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLeaderRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string candidate_leader = 3;
  bool has_candidate_leader() const;
  void clear_candidate_leader();
  static const int kCandidateLeaderFieldNumber = 3;
  const ::std::string& candidate_leader() const;
  void set_candidate_leader(const ::std::string& value);
  #if LANG_CXX11
  void set_candidate_leader(::std::string&& value);
  #endif
  void set_candidate_leader(const char* value);
  void set_candidate_leader(const char* value, size_t size);
  ::std::string* mutable_candidate_leader();
  ::std::string* release_candidate_leader();
  void set_allocated_candidate_leader(::std::string* candidate_leader);

  // optional string db = 4 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // required uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ChangeLeaderRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_candidate_leader();
  void clear_has_candidate_leader();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr candidate_leader_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OfflineEndpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.OfflineEndpointRequest) */ {
 public:
  OfflineEndpointRequest();
  virtual ~OfflineEndpointRequest();

  OfflineEndpointRequest(const OfflineEndpointRequest& from);

  inline OfflineEndpointRequest& operator=(const OfflineEndpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OfflineEndpointRequest(OfflineEndpointRequest&& from) noexcept
    : OfflineEndpointRequest() {
    *this = ::std::move(from);
  }

  inline OfflineEndpointRequest& operator=(OfflineEndpointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OfflineEndpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OfflineEndpointRequest* internal_default_instance() {
    return reinterpret_cast<const OfflineEndpointRequest*>(
               &_OfflineEndpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(OfflineEndpointRequest* other);
  friend void swap(OfflineEndpointRequest& a, OfflineEndpointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OfflineEndpointRequest* New() const final {
    return CreateMaybeMessage<OfflineEndpointRequest>(NULL);
  }

  OfflineEndpointRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OfflineEndpointRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OfflineEndpointRequest& from);
  void MergeFrom(const OfflineEndpointRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OfflineEndpointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional uint32 concurrency = 2;
  bool has_concurrency() const;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 2;
  ::google::protobuf::uint32 concurrency() const;
  void set_concurrency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.OfflineEndpointRequest)
 private:
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_concurrency();
  void clear_has_concurrency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::uint32 concurrency_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoverEndpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.RecoverEndpointRequest) */ {
 public:
  RecoverEndpointRequest();
  virtual ~RecoverEndpointRequest();

  RecoverEndpointRequest(const RecoverEndpointRequest& from);

  inline RecoverEndpointRequest& operator=(const RecoverEndpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoverEndpointRequest(RecoverEndpointRequest&& from) noexcept
    : RecoverEndpointRequest() {
    *this = ::std::move(from);
  }

  inline RecoverEndpointRequest& operator=(RecoverEndpointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverEndpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverEndpointRequest* internal_default_instance() {
    return reinterpret_cast<const RecoverEndpointRequest*>(
               &_RecoverEndpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(RecoverEndpointRequest* other);
  friend void swap(RecoverEndpointRequest& a, RecoverEndpointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverEndpointRequest* New() const final {
    return CreateMaybeMessage<RecoverEndpointRequest>(NULL);
  }

  RecoverEndpointRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecoverEndpointRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecoverEndpointRequest& from);
  void MergeFrom(const RecoverEndpointRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverEndpointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional bool need_restore = 2;
  bool has_need_restore() const;
  void clear_need_restore();
  static const int kNeedRestoreFieldNumber = 2;
  bool need_restore() const;
  void set_need_restore(bool value);

  // optional uint32 concurrency = 3;
  bool has_concurrency() const;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 3;
  ::google::protobuf::uint32 concurrency() const;
  void set_concurrency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.RecoverEndpointRequest)
 private:
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_need_restore();
  void clear_has_need_restore();
  void set_has_concurrency();
  void clear_has_concurrency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  bool need_restore_;
  ::google::protobuf::uint32 concurrency_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeneralResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.GeneralResponse) */ {
 public:
  GeneralResponse();
  virtual ~GeneralResponse();

  GeneralResponse(const GeneralResponse& from);

  inline GeneralResponse& operator=(const GeneralResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeneralResponse(GeneralResponse&& from) noexcept
    : GeneralResponse() {
    *this = ::std::move(from);
  }

  inline GeneralResponse& operator=(GeneralResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralResponse* internal_default_instance() {
    return reinterpret_cast<const GeneralResponse*>(
               &_GeneralResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GeneralResponse* other);
  friend void swap(GeneralResponse& a, GeneralResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralResponse* New() const final {
    return CreateMaybeMessage<GeneralResponse>(NULL);
  }

  GeneralResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeneralResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeneralResponse& from);
  void MergeFrom(const GeneralResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.GeneralResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTableInfoResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CreateTableInfoResponse) */ {
 public:
  CreateTableInfoResponse();
  virtual ~CreateTableInfoResponse();

  CreateTableInfoResponse(const CreateTableInfoResponse& from);

  inline CreateTableInfoResponse& operator=(const CreateTableInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTableInfoResponse(CreateTableInfoResponse&& from) noexcept
    : CreateTableInfoResponse() {
    *this = ::std::move(from);
  }

  inline CreateTableInfoResponse& operator=(CreateTableInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableInfoResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTableInfoResponse*>(
               &_CreateTableInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CreateTableInfoResponse* other);
  friend void swap(CreateTableInfoResponse& a, CreateTableInfoResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableInfoResponse* New() const final {
    return CreateMaybeMessage<CreateTableInfoResponse>(NULL);
  }

  CreateTableInfoResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableInfoResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTableInfoResponse& from);
  void MergeFrom(const CreateTableInfoResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableInfoResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .openmldb.nameserver.TableInfo table_info = 1;
  bool has_table_info() const;
  void clear_table_info();
  static const int kTableInfoFieldNumber = 1;
  private:
  const ::openmldb::nameserver::TableInfo& _internal_table_info() const;
  public:
  const ::openmldb::nameserver::TableInfo& table_info() const;
  ::openmldb::nameserver::TableInfo* release_table_info();
  ::openmldb::nameserver::TableInfo* mutable_table_info();
  void set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info);

  // required int32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CreateTableInfoResponse)
 private:
  void set_has_table_info();
  void clear_has_table_info();
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::openmldb::nameserver::TableInfo* table_info_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowTabletRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowTabletRequest) */ {
 public:
  ShowTabletRequest();
  virtual ~ShowTabletRequest();

  ShowTabletRequest(const ShowTabletRequest& from);

  inline ShowTabletRequest& operator=(const ShowTabletRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowTabletRequest(ShowTabletRequest&& from) noexcept
    : ShowTabletRequest() {
    *this = ::std::move(from);
  }

  inline ShowTabletRequest& operator=(ShowTabletRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowTabletRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowTabletRequest* internal_default_instance() {
    return reinterpret_cast<const ShowTabletRequest*>(
               &_ShowTabletRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(ShowTabletRequest* other);
  friend void swap(ShowTabletRequest& a, ShowTabletRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowTabletRequest* New() const final {
    return CreateMaybeMessage<ShowTabletRequest>(NULL);
  }

  ShowTabletRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowTabletRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowTabletRequest& from);
  void MergeFrom(const ShowTabletRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowTabletRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowTabletRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddTableFieldRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.AddTableFieldRequest) */ {
 public:
  AddTableFieldRequest();
  virtual ~AddTableFieldRequest();

  AddTableFieldRequest(const AddTableFieldRequest& from);

  inline AddTableFieldRequest& operator=(const AddTableFieldRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddTableFieldRequest(AddTableFieldRequest&& from) noexcept
    : AddTableFieldRequest() {
    *this = ::std::move(from);
  }

  inline AddTableFieldRequest& operator=(AddTableFieldRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddTableFieldRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddTableFieldRequest* internal_default_instance() {
    return reinterpret_cast<const AddTableFieldRequest*>(
               &_AddTableFieldRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(AddTableFieldRequest* other);
  friend void swap(AddTableFieldRequest& a, AddTableFieldRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddTableFieldRequest* New() const final {
    return CreateMaybeMessage<AddTableFieldRequest>(NULL);
  }

  AddTableFieldRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddTableFieldRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddTableFieldRequest& from);
  void MergeFrom(const AddTableFieldRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddTableFieldRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 3 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.common.ColumnDesc column_desc = 2;
  bool has_column_desc() const;
  void clear_column_desc();
  static const int kColumnDescFieldNumber = 2;
  private:
  const ::openmldb::common::ColumnDesc& _internal_column_desc() const;
  public:
  const ::openmldb::common::ColumnDesc& column_desc() const;
  ::openmldb::common::ColumnDesc* release_column_desc();
  ::openmldb::common::ColumnDesc* mutable_column_desc();
  void set_allocated_column_desc(::openmldb::common::ColumnDesc* column_desc);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.AddTableFieldRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_column_desc();
  void clear_has_column_desc();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::common::ColumnDesc* column_desc_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TabletStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.TabletStatus) */ {
 public:
  TabletStatus();
  virtual ~TabletStatus();

  TabletStatus(const TabletStatus& from);

  inline TabletStatus& operator=(const TabletStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TabletStatus(TabletStatus&& from) noexcept
    : TabletStatus() {
    *this = ::std::move(from);
  }

  inline TabletStatus& operator=(TabletStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TabletStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TabletStatus* internal_default_instance() {
    return reinterpret_cast<const TabletStatus*>(
               &_TabletStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(TabletStatus* other);
  friend void swap(TabletStatus& a, TabletStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TabletStatus* New() const final {
    return CreateMaybeMessage<TabletStatus>(NULL);
  }

  TabletStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TabletStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TabletStatus& from);
  void MergeFrom(const TabletStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TabletStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string state = 2;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 2;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional string real_endpoint = 4;
  bool has_real_endpoint() const;
  void clear_real_endpoint();
  static const int kRealEndpointFieldNumber = 4;
  const ::std::string& real_endpoint() const;
  void set_real_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_real_endpoint(::std::string&& value);
  #endif
  void set_real_endpoint(const char* value);
  void set_real_endpoint(const char* value, size_t size);
  ::std::string* mutable_real_endpoint();
  ::std::string* release_real_endpoint();
  void set_allocated_real_endpoint(::std::string* real_endpoint);

  // optional uint64 age = 3;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 3;
  ::google::protobuf::uint64 age() const;
  void set_age(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.TabletStatus)
 private:
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_state();
  void clear_has_state();
  void set_has_age();
  void clear_has_age();
  void set_has_real_endpoint();
  void clear_has_real_endpoint();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr real_endpoint_;
  ::google::protobuf::uint64 age_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowTabletResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowTabletResponse) */ {
 public:
  ShowTabletResponse();
  virtual ~ShowTabletResponse();

  ShowTabletResponse(const ShowTabletResponse& from);

  inline ShowTabletResponse& operator=(const ShowTabletResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowTabletResponse(ShowTabletResponse&& from) noexcept
    : ShowTabletResponse() {
    *this = ::std::move(from);
  }

  inline ShowTabletResponse& operator=(ShowTabletResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowTabletResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowTabletResponse* internal_default_instance() {
    return reinterpret_cast<const ShowTabletResponse*>(
               &_ShowTabletResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  void Swap(ShowTabletResponse* other);
  friend void swap(ShowTabletResponse& a, ShowTabletResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowTabletResponse* New() const final {
    return CreateMaybeMessage<ShowTabletResponse>(NULL);
  }

  ShowTabletResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowTabletResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowTabletResponse& from);
  void MergeFrom(const ShowTabletResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowTabletResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.TabletStatus tablets = 1;
  int tablets_size() const;
  void clear_tablets();
  static const int kTabletsFieldNumber = 1;
  ::openmldb::nameserver::TabletStatus* mutable_tablets(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >*
      mutable_tablets();
  const ::openmldb::nameserver::TabletStatus& tablets(int index) const;
  ::openmldb::nameserver::TabletStatus* add_tablets();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >&
      tablets() const;

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowTabletResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus > tablets_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoverTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.RecoverTableRequest) */ {
 public:
  RecoverTableRequest();
  virtual ~RecoverTableRequest();

  RecoverTableRequest(const RecoverTableRequest& from);

  inline RecoverTableRequest& operator=(const RecoverTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoverTableRequest(RecoverTableRequest&& from) noexcept
    : RecoverTableRequest() {
    *this = ::std::move(from);
  }

  inline RecoverTableRequest& operator=(RecoverTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverTableRequest* internal_default_instance() {
    return reinterpret_cast<const RecoverTableRequest*>(
               &_RecoverTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  void Swap(RecoverTableRequest* other);
  friend void swap(RecoverTableRequest& a, RecoverTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverTableRequest* New() const final {
    return CreateMaybeMessage<RecoverTableRequest>(NULL);
  }

  RecoverTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecoverTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecoverTableRequest& from);
  void MergeFrom(const RecoverTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string db = 4 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // required uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.RecoverTableRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DelReplicaNSRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.DelReplicaNSRequest) */ {
 public:
  DelReplicaNSRequest();
  virtual ~DelReplicaNSRequest();

  DelReplicaNSRequest(const DelReplicaNSRequest& from);

  inline DelReplicaNSRequest& operator=(const DelReplicaNSRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DelReplicaNSRequest(DelReplicaNSRequest&& from) noexcept
    : DelReplicaNSRequest() {
    *this = ::std::move(from);
  }

  inline DelReplicaNSRequest& operator=(DelReplicaNSRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DelReplicaNSRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DelReplicaNSRequest* internal_default_instance() {
    return reinterpret_cast<const DelReplicaNSRequest*>(
               &_DelReplicaNSRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  void Swap(DelReplicaNSRequest* other);
  friend void swap(DelReplicaNSRequest& a, DelReplicaNSRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DelReplicaNSRequest* New() const final {
    return CreateMaybeMessage<DelReplicaNSRequest>(NULL);
  }

  DelReplicaNSRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DelReplicaNSRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DelReplicaNSRequest& from);
  void MergeFrom(const DelReplicaNSRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelReplicaNSRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pid_group = 4;
  int pid_group_size() const;
  void clear_pid_group();
  static const int kPidGroupFieldNumber = 4;
  ::google::protobuf::uint32 pid_group(int index) const;
  void set_pid_group(int index, ::google::protobuf::uint32 value);
  void add_pid_group(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pid_group() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pid_group();

  // required string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string endpoint = 3;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 3;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string db = 5 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 5;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // required uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.DelReplicaNSRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pid_group_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MigrateRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.MigrateRequest) */ {
 public:
  MigrateRequest();
  virtual ~MigrateRequest();

  MigrateRequest(const MigrateRequest& from);

  inline MigrateRequest& operator=(const MigrateRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MigrateRequest(MigrateRequest&& from) noexcept
    : MigrateRequest() {
    *this = ::std::move(from);
  }

  inline MigrateRequest& operator=(MigrateRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MigrateRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MigrateRequest* internal_default_instance() {
    return reinterpret_cast<const MigrateRequest*>(
               &_MigrateRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  void Swap(MigrateRequest* other);
  friend void swap(MigrateRequest& a, MigrateRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MigrateRequest* New() const final {
    return CreateMaybeMessage<MigrateRequest>(NULL);
  }

  MigrateRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MigrateRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MigrateRequest& from);
  void MergeFrom(const MigrateRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pid = 3;
  int pid_size() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::uint32 pid(int index) const;
  void set_pid(int index, ::google::protobuf::uint32 value);
  void add_pid(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pid() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pid();

  // required string src_endpoint = 1;
  bool has_src_endpoint() const;
  void clear_src_endpoint();
  static const int kSrcEndpointFieldNumber = 1;
  const ::std::string& src_endpoint() const;
  void set_src_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_src_endpoint(::std::string&& value);
  #endif
  void set_src_endpoint(const char* value);
  void set_src_endpoint(const char* value, size_t size);
  ::std::string* mutable_src_endpoint();
  ::std::string* release_src_endpoint();
  void set_allocated_src_endpoint(::std::string* src_endpoint);

  // required string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // required string des_endpoint = 4;
  bool has_des_endpoint() const;
  void clear_des_endpoint();
  static const int kDesEndpointFieldNumber = 4;
  const ::std::string& des_endpoint() const;
  void set_des_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_des_endpoint(::std::string&& value);
  #endif
  void set_des_endpoint(const char* value);
  void set_des_endpoint(const char* value, size_t size);
  ::std::string* mutable_des_endpoint();
  ::std::string* release_des_endpoint();
  void set_allocated_des_endpoint(::std::string* des_endpoint);

  // optional string db = 5 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 5;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.MigrateRequest)
 private:
  void set_has_src_endpoint();
  void clear_has_src_endpoint();
  void set_has_name();
  void clear_has_name();
  void set_has_des_endpoint();
  void clear_has_des_endpoint();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pid_;
  ::google::protobuf::internal::ArenaStringPtr src_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr des_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MigrateInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.MigrateInfo) */ {
 public:
  MigrateInfo();
  virtual ~MigrateInfo();

  MigrateInfo(const MigrateInfo& from);

  inline MigrateInfo& operator=(const MigrateInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MigrateInfo(MigrateInfo&& from) noexcept
    : MigrateInfo() {
    *this = ::std::move(from);
  }

  inline MigrateInfo& operator=(MigrateInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MigrateInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MigrateInfo* internal_default_instance() {
    return reinterpret_cast<const MigrateInfo*>(
               &_MigrateInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  void Swap(MigrateInfo* other);
  friend void swap(MigrateInfo& a, MigrateInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MigrateInfo* New() const final {
    return CreateMaybeMessage<MigrateInfo>(NULL);
  }

  MigrateInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<MigrateInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const MigrateInfo& from);
  void MergeFrom(const MigrateInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MigrateInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string src_endpoint = 1;
  bool has_src_endpoint() const;
  void clear_src_endpoint();
  static const int kSrcEndpointFieldNumber = 1;
  const ::std::string& src_endpoint() const;
  void set_src_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_src_endpoint(::std::string&& value);
  #endif
  void set_src_endpoint(const char* value);
  void set_src_endpoint(const char* value, size_t size);
  ::std::string* mutable_src_endpoint();
  ::std::string* release_src_endpoint();
  void set_allocated_src_endpoint(::std::string* src_endpoint);

  // optional string des_endpoint = 2;
  bool has_des_endpoint() const;
  void clear_des_endpoint();
  static const int kDesEndpointFieldNumber = 2;
  const ::std::string& des_endpoint() const;
  void set_des_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_des_endpoint(::std::string&& value);
  #endif
  void set_des_endpoint(const char* value);
  void set_des_endpoint(const char* value, size_t size);
  ::std::string* mutable_des_endpoint();
  ::std::string* release_des_endpoint();
  void set_allocated_des_endpoint(::std::string* des_endpoint);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.MigrateInfo)
 private:
  void set_has_src_endpoint();
  void clear_has_src_endpoint();
  void set_has_des_endpoint();
  void clear_has_des_endpoint();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr src_endpoint_;
  ::google::protobuf::internal::ArenaStringPtr des_endpoint_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class EndpointStatusData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.EndpointStatusData) */ {
 public:
  EndpointStatusData();
  virtual ~EndpointStatusData();

  EndpointStatusData(const EndpointStatusData& from);

  inline EndpointStatusData& operator=(const EndpointStatusData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EndpointStatusData(EndpointStatusData&& from) noexcept
    : EndpointStatusData() {
    *this = ::std::move(from);
  }

  inline EndpointStatusData& operator=(EndpointStatusData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EndpointStatusData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EndpointStatusData* internal_default_instance() {
    return reinterpret_cast<const EndpointStatusData*>(
               &_EndpointStatusData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  void Swap(EndpointStatusData* other);
  friend void swap(EndpointStatusData& a, EndpointStatusData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EndpointStatusData* New() const final {
    return CreateMaybeMessage<EndpointStatusData>(NULL);
  }

  EndpointStatusData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<EndpointStatusData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const EndpointStatusData& from);
  void MergeFrom(const EndpointStatusData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EndpointStatusData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional bool is_leader = 2;
  bool has_is_leader() const;
  void clear_is_leader();
  static const int kIsLeaderFieldNumber = 2;
  bool is_leader() const;
  void set_is_leader(bool value);

  // optional bool is_alive = 3;
  bool has_is_alive() const;
  void clear_is_alive();
  static const int kIsAliveFieldNumber = 3;
  bool is_alive() const;
  void set_is_alive(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.EndpointStatusData)
 private:
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_is_leader();
  void clear_has_is_leader();
  void set_has_is_alive();
  void clear_has_is_alive();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  bool is_leader_;
  bool is_alive_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RecoverTableData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.RecoverTableData) */ {
 public:
  RecoverTableData();
  virtual ~RecoverTableData();

  RecoverTableData(const RecoverTableData& from);

  inline RecoverTableData& operator=(const RecoverTableData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RecoverTableData(RecoverTableData&& from) noexcept
    : RecoverTableData() {
    *this = ::std::move(from);
  }

  inline RecoverTableData& operator=(RecoverTableData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RecoverTableData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RecoverTableData* internal_default_instance() {
    return reinterpret_cast<const RecoverTableData*>(
               &_RecoverTableData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  void Swap(RecoverTableData* other);
  friend void swap(RecoverTableData& a, RecoverTableData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RecoverTableData* New() const final {
    return CreateMaybeMessage<RecoverTableData>(NULL);
  }

  RecoverTableData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RecoverTableData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RecoverTableData& from);
  void MergeFrom(const RecoverTableData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecoverTableData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string endpoint = 1;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 1;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional uint64 offset_delta = 2;
  bool has_offset_delta() const;
  void clear_offset_delta();
  static const int kOffsetDeltaFieldNumber = 2;
  ::google::protobuf::uint64 offset_delta() const;
  void set_offset_delta(::google::protobuf::uint64 value);

  // optional bool is_leader = 3;
  bool has_is_leader() const;
  void clear_is_leader();
  static const int kIsLeaderFieldNumber = 3;
  bool is_leader() const;
  void set_is_leader(bool value);

  // optional uint32 concurrency = 4;
  bool has_concurrency() const;
  void clear_concurrency();
  static const int kConcurrencyFieldNumber = 4;
  ::google::protobuf::uint32 concurrency() const;
  void set_concurrency(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.RecoverTableData)
 private:
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_offset_delta();
  void clear_has_offset_delta();
  void set_has_is_leader();
  void clear_has_is_leader();
  void set_has_concurrency();
  void clear_has_concurrency();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::uint64 offset_delta_;
  bool is_leader_;
  ::google::protobuf::uint32 concurrency_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTableData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CreateTableData) */ {
 public:
  CreateTableData();
  virtual ~CreateTableData();

  CreateTableData(const CreateTableData& from);

  inline CreateTableData& operator=(const CreateTableData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTableData(CreateTableData&& from) noexcept
    : CreateTableData() {
    *this = ::std::move(from);
  }

  inline CreateTableData& operator=(CreateTableData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableData* internal_default_instance() {
    return reinterpret_cast<const CreateTableData*>(
               &_CreateTableData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  void Swap(CreateTableData* other);
  friend void swap(CreateTableData& a, CreateTableData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableData* New() const final {
    return CreateMaybeMessage<CreateTableData>(NULL);
  }

  CreateTableData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTableData& from);
  void MergeFrom(const CreateTableData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string alias = 1;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // optional .openmldb.nameserver.TableInfo table_info = 2;
  bool has_table_info() const;
  void clear_table_info();
  static const int kTableInfoFieldNumber = 2;
  private:
  const ::openmldb::nameserver::TableInfo& _internal_table_info() const;
  public:
  const ::openmldb::nameserver::TableInfo& table_info() const;
  ::openmldb::nameserver::TableInfo* release_table_info();
  ::openmldb::nameserver::TableInfo* mutable_table_info();
  void set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info);

  // optional .openmldb.nameserver.TableInfo remote_table_info = 3;
  bool has_remote_table_info() const;
  void clear_remote_table_info();
  static const int kRemoteTableInfoFieldNumber = 3;
  private:
  const ::openmldb::nameserver::TableInfo& _internal_remote_table_info() const;
  public:
  const ::openmldb::nameserver::TableInfo& remote_table_info() const;
  ::openmldb::nameserver::TableInfo* release_remote_table_info();
  ::openmldb::nameserver::TableInfo* mutable_remote_table_info();
  void set_allocated_remote_table_info(::openmldb::nameserver::TableInfo* remote_table_info);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CreateTableData)
 private:
  void set_has_alias();
  void clear_has_alias();
  void set_has_table_info();
  void clear_has_table_info();
  void set_has_remote_table_info();
  void clear_has_remote_table_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  ::openmldb::nameserver::TableInfo* table_info_;
  ::openmldb::nameserver::TableInfo* remote_table_info_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ChangeLeaderData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ChangeLeaderData) */ {
 public:
  ChangeLeaderData();
  virtual ~ChangeLeaderData();

  ChangeLeaderData(const ChangeLeaderData& from);

  inline ChangeLeaderData& operator=(const ChangeLeaderData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChangeLeaderData(ChangeLeaderData&& from) noexcept
    : ChangeLeaderData() {
    *this = ::std::move(from);
  }

  inline ChangeLeaderData& operator=(ChangeLeaderData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChangeLeaderData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChangeLeaderData* internal_default_instance() {
    return reinterpret_cast<const ChangeLeaderData*>(
               &_ChangeLeaderData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  void Swap(ChangeLeaderData* other);
  friend void swap(ChangeLeaderData& a, ChangeLeaderData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChangeLeaderData* New() const final {
    return CreateMaybeMessage<ChangeLeaderData>(NULL);
  }

  ChangeLeaderData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ChangeLeaderData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ChangeLeaderData& from);
  void MergeFrom(const ChangeLeaderData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChangeLeaderData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string follower = 7;
  int follower_size() const;
  void clear_follower();
  static const int kFollowerFieldNumber = 7;
  const ::std::string& follower(int index) const;
  ::std::string* mutable_follower(int index);
  void set_follower(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_follower(int index, ::std::string&& value);
  #endif
  void set_follower(int index, const char* value);
  void set_follower(int index, const char* value, size_t size);
  ::std::string* add_follower();
  void add_follower(const ::std::string& value);
  #if LANG_CXX11
  void add_follower(::std::string&& value);
  #endif
  void add_follower(const char* value);
  void add_follower(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& follower() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_follower();

  // repeated .openmldb.common.EndpointAndTid remote_follower = 9;
  int remote_follower_size() const;
  void clear_remote_follower();
  static const int kRemoteFollowerFieldNumber = 9;
  ::openmldb::common::EndpointAndTid* mutable_remote_follower(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::EndpointAndTid >*
      mutable_remote_follower();
  const ::openmldb::common::EndpointAndTid& remote_follower(int index) const;
  ::openmldb::common::EndpointAndTid* add_remote_follower();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::EndpointAndTid >&
      remote_follower() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string leader = 6;
  bool has_leader() const;
  void clear_leader();
  static const int kLeaderFieldNumber = 6;
  const ::std::string& leader() const;
  void set_leader(const ::std::string& value);
  #if LANG_CXX11
  void set_leader(::std::string&& value);
  #endif
  void set_leader(const char* value);
  void set_leader(const char* value, size_t size);
  ::std::string* mutable_leader();
  ::std::string* release_leader();
  void set_allocated_leader(::std::string* leader);

  // optional string candidate_leader = 8;
  bool has_candidate_leader() const;
  void clear_candidate_leader();
  static const int kCandidateLeaderFieldNumber = 8;
  const ::std::string& candidate_leader() const;
  void set_candidate_leader(const ::std::string& value);
  #if LANG_CXX11
  void set_candidate_leader(::std::string&& value);
  #endif
  void set_candidate_leader(const char* value);
  void set_candidate_leader(const char* value, size_t size);
  ::std::string* mutable_candidate_leader();
  ::std::string* release_candidate_leader();
  void set_allocated_candidate_leader(::std::string* candidate_leader);

  // optional string db = 10 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 10;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional uint32 tid = 2;
  bool has_tid() const;
  void clear_tid();
  static const int kTidFieldNumber = 2;
  ::google::protobuf::uint32 tid() const;
  void set_tid(::google::protobuf::uint32 value);

  // optional uint32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // optional uint64 term = 4;
  bool has_term() const;
  void clear_term();
  static const int kTermFieldNumber = 4;
  ::google::protobuf::uint64 term() const;
  void set_term(::google::protobuf::uint64 value);

  // optional uint64 offset = 5;
  bool has_offset() const;
  void clear_offset();
  static const int kOffsetFieldNumber = 5;
  ::google::protobuf::uint64 offset() const;
  void set_offset(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ChangeLeaderData)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_tid();
  void clear_has_tid();
  void set_has_pid();
  void clear_has_pid();
  void set_has_term();
  void clear_has_term();
  void set_has_offset();
  void clear_has_offset();
  void set_has_leader();
  void clear_has_leader();
  void set_has_candidate_leader();
  void clear_has_candidate_leader();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> follower_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::EndpointAndTid > remote_follower_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr leader_;
  ::google::protobuf::internal::ArenaStringPtr candidate_leader_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 tid_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint64 term_;
  ::google::protobuf::uint64 offset_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OPStatus : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.OPStatus) */ {
 public:
  OPStatus();
  virtual ~OPStatus();

  OPStatus(const OPStatus& from);

  inline OPStatus& operator=(const OPStatus& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  OPStatus(OPStatus&& from) noexcept
    : OPStatus() {
    *this = ::std::move(from);
  }

  inline OPStatus& operator=(OPStatus&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OPStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OPStatus* internal_default_instance() {
    return reinterpret_cast<const OPStatus*>(
               &_OPStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  void Swap(OPStatus* other);
  friend void swap(OPStatus& a, OPStatus& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline OPStatus* New() const final {
    return CreateMaybeMessage<OPStatus>(NULL);
  }

  OPStatus* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<OPStatus>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const OPStatus& from);
  void MergeFrom(const OPStatus& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OPStatus* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string op_type = 2;
  bool has_op_type() const;
  void clear_op_type();
  static const int kOpTypeFieldNumber = 2;
  const ::std::string& op_type() const;
  void set_op_type(const ::std::string& value);
  #if LANG_CXX11
  void set_op_type(::std::string&& value);
  #endif
  void set_op_type(const char* value);
  void set_op_type(const char* value, size_t size);
  ::std::string* mutable_op_type();
  ::std::string* release_op_type();
  void set_allocated_op_type(::std::string* op_type);

  // required string status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  const ::std::string& status() const;
  void set_status(const ::std::string& value);
  #if LANG_CXX11
  void set_status(::std::string&& value);
  #endif
  void set_status(const char* value);
  void set_status(const char* value, size_t size);
  ::std::string* mutable_status();
  ::std::string* release_status();
  void set_allocated_status(::std::string* status);

  // required string task_type = 6;
  bool has_task_type() const;
  void clear_task_type();
  static const int kTaskTypeFieldNumber = 6;
  const ::std::string& task_type() const;
  void set_task_type(const ::std::string& value);
  #if LANG_CXX11
  void set_task_type(::std::string&& value);
  #endif
  void set_task_type(const char* value);
  void set_task_type(const char* value, size_t size);
  ::std::string* mutable_task_type();
  ::std::string* release_task_type();
  void set_allocated_task_type(::std::string* task_type);

  // optional string name = 7;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 7;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 10 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 10;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // required uint64 op_id = 1;
  bool has_op_id() const;
  void clear_op_id();
  static const int kOpIdFieldNumber = 1;
  ::google::protobuf::uint64 op_id() const;
  void set_op_id(::google::protobuf::uint64 value);

  // required uint64 start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::uint64 start_time() const;
  void set_start_time(::google::protobuf::uint64 value);

  // required uint64 end_time = 5;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  ::google::protobuf::uint64 end_time() const;
  void set_end_time(::google::protobuf::uint64 value);

  // optional uint32 pid = 8;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 8;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // optional int32 for_replica_cluster = 9 [default = 0];
  bool has_for_replica_cluster() const;
  void clear_for_replica_cluster();
  static const int kForReplicaClusterFieldNumber = 9;
  ::google::protobuf::int32 for_replica_cluster() const;
  void set_for_replica_cluster(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.OPStatus)
 private:
  void set_has_op_id();
  void clear_has_op_id();
  void set_has_op_type();
  void clear_has_op_type();
  void set_has_status();
  void clear_has_status();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_task_type();
  void clear_has_task_type();
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_for_replica_cluster();
  void clear_has_for_replica_cluster();
  void set_has_db();
  void clear_has_db();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr op_type_;
  ::google::protobuf::internal::ArenaStringPtr status_;
  ::google::protobuf::internal::ArenaStringPtr task_type_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint64 op_id_;
  ::google::protobuf::uint64 start_time_;
  ::google::protobuf::uint64 end_time_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::int32 for_replica_cluster_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTablePartitionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.GetTablePartitionRequest) */ {
 public:
  GetTablePartitionRequest();
  virtual ~GetTablePartitionRequest();

  GetTablePartitionRequest(const GetTablePartitionRequest& from);

  inline GetTablePartitionRequest& operator=(const GetTablePartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTablePartitionRequest(GetTablePartitionRequest&& from) noexcept
    : GetTablePartitionRequest() {
    *this = ::std::move(from);
  }

  inline GetTablePartitionRequest& operator=(GetTablePartitionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablePartitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTablePartitionRequest* internal_default_instance() {
    return reinterpret_cast<const GetTablePartitionRequest*>(
               &_GetTablePartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  void Swap(GetTablePartitionRequest* other);
  friend void swap(GetTablePartitionRequest& a, GetTablePartitionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTablePartitionRequest* New() const final {
    return CreateMaybeMessage<GetTablePartitionRequest>(NULL);
  }

  GetTablePartitionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTablePartitionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTablePartitionRequest& from);
  void MergeFrom(const GetTablePartitionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTablePartitionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 3 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.GetTablePartitionRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTablePartitionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.GetTablePartitionResponse) */ {
 public:
  GetTablePartitionResponse();
  virtual ~GetTablePartitionResponse();

  GetTablePartitionResponse(const GetTablePartitionResponse& from);

  inline GetTablePartitionResponse& operator=(const GetTablePartitionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTablePartitionResponse(GetTablePartitionResponse&& from) noexcept
    : GetTablePartitionResponse() {
    *this = ::std::move(from);
  }

  inline GetTablePartitionResponse& operator=(GetTablePartitionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablePartitionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTablePartitionResponse* internal_default_instance() {
    return reinterpret_cast<const GetTablePartitionResponse*>(
               &_GetTablePartitionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  void Swap(GetTablePartitionResponse* other);
  friend void swap(GetTablePartitionResponse& a, GetTablePartitionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTablePartitionResponse* New() const final {
    return CreateMaybeMessage<GetTablePartitionResponse>(NULL);
  }

  GetTablePartitionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTablePartitionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTablePartitionResponse& from);
  void MergeFrom(const GetTablePartitionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTablePartitionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .openmldb.nameserver.TablePartition table_partition = 3;
  bool has_table_partition() const;
  void clear_table_partition();
  static const int kTablePartitionFieldNumber = 3;
  private:
  const ::openmldb::nameserver::TablePartition& _internal_table_partition() const;
  public:
  const ::openmldb::nameserver::TablePartition& table_partition() const;
  ::openmldb::nameserver::TablePartition* release_table_partition();
  ::openmldb::nameserver::TablePartition* mutable_table_partition();
  void set_allocated_table_partition(::openmldb::nameserver::TablePartition* table_partition);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.GetTablePartitionResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();
  void set_has_table_partition();
  void clear_has_table_partition();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::openmldb::nameserver::TablePartition* table_partition_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetTablePartitionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.SetTablePartitionRequest) */ {
 public:
  SetTablePartitionRequest();
  virtual ~SetTablePartitionRequest();

  SetTablePartitionRequest(const SetTablePartitionRequest& from);

  inline SetTablePartitionRequest& operator=(const SetTablePartitionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetTablePartitionRequest(SetTablePartitionRequest&& from) noexcept
    : SetTablePartitionRequest() {
    *this = ::std::move(from);
  }

  inline SetTablePartitionRequest& operator=(SetTablePartitionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetTablePartitionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetTablePartitionRequest* internal_default_instance() {
    return reinterpret_cast<const SetTablePartitionRequest*>(
               &_SetTablePartitionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  void Swap(SetTablePartitionRequest* other);
  friend void swap(SetTablePartitionRequest& a, SetTablePartitionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetTablePartitionRequest* New() const final {
    return CreateMaybeMessage<SetTablePartitionRequest>(NULL);
  }

  SetTablePartitionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetTablePartitionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetTablePartitionRequest& from);
  void MergeFrom(const SetTablePartitionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetTablePartitionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 3 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.nameserver.TablePartition table_partition = 2;
  bool has_table_partition() const;
  void clear_table_partition();
  static const int kTablePartitionFieldNumber = 2;
  private:
  const ::openmldb::nameserver::TablePartition& _internal_table_partition() const;
  public:
  const ::openmldb::nameserver::TablePartition& table_partition() const;
  ::openmldb::nameserver::TablePartition* release_table_partition();
  ::openmldb::nameserver::TablePartition* mutable_table_partition();
  void set_allocated_table_partition(::openmldb::nameserver::TablePartition* table_partition);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.SetTablePartitionRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_table_partition();
  void clear_has_table_partition();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::nameserver::TablePartition* table_partition_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UpdateTableAliveRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.UpdateTableAliveRequest) */ {
 public:
  UpdateTableAliveRequest();
  virtual ~UpdateTableAliveRequest();

  UpdateTableAliveRequest(const UpdateTableAliveRequest& from);

  inline UpdateTableAliveRequest& operator=(const UpdateTableAliveRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UpdateTableAliveRequest(UpdateTableAliveRequest&& from) noexcept
    : UpdateTableAliveRequest() {
    *this = ::std::move(from);
  }

  inline UpdateTableAliveRequest& operator=(UpdateTableAliveRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateTableAliveRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpdateTableAliveRequest* internal_default_instance() {
    return reinterpret_cast<const UpdateTableAliveRequest*>(
               &_UpdateTableAliveRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  void Swap(UpdateTableAliveRequest* other);
  friend void swap(UpdateTableAliveRequest& a, UpdateTableAliveRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UpdateTableAliveRequest* New() const final {
    return CreateMaybeMessage<UpdateTableAliveRequest>(NULL);
  }

  UpdateTableAliveRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UpdateTableAliveRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UpdateTableAliveRequest& from);
  void MergeFrom(const UpdateTableAliveRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdateTableAliveRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string endpoint = 2;
  bool has_endpoint() const;
  void clear_endpoint();
  static const int kEndpointFieldNumber = 2;
  const ::std::string& endpoint() const;
  void set_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_endpoint(::std::string&& value);
  #endif
  void set_endpoint(const char* value);
  void set_endpoint(const char* value, size_t size);
  ::std::string* mutable_endpoint();
  ::std::string* release_endpoint();
  void set_allocated_endpoint(::std::string* endpoint);

  // optional string db = 5 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 5;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional uint32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // optional bool is_alive = 4;
  bool has_is_alive() const;
  void clear_is_alive();
  static const int kIsAliveFieldNumber = 4;
  bool is_alive() const;
  void set_is_alive(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.UpdateTableAliveRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_endpoint();
  void clear_has_endpoint();
  void set_has_pid();
  void clear_has_pid();
  void set_has_is_alive();
  void clear_has_is_alive();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr endpoint_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 pid_;
  bool is_alive_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowOPStatusRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowOPStatusRequest) */ {
 public:
  ShowOPStatusRequest();
  virtual ~ShowOPStatusRequest();

  ShowOPStatusRequest(const ShowOPStatusRequest& from);

  inline ShowOPStatusRequest& operator=(const ShowOPStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowOPStatusRequest(ShowOPStatusRequest&& from) noexcept
    : ShowOPStatusRequest() {
    *this = ::std::move(from);
  }

  inline ShowOPStatusRequest& operator=(ShowOPStatusRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowOPStatusRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowOPStatusRequest* internal_default_instance() {
    return reinterpret_cast<const ShowOPStatusRequest*>(
               &_ShowOPStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  void Swap(ShowOPStatusRequest* other);
  friend void swap(ShowOPStatusRequest& a, ShowOPStatusRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowOPStatusRequest* New() const final {
    return CreateMaybeMessage<ShowOPStatusRequest>(NULL);
  }

  ShowOPStatusRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowOPStatusRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowOPStatusRequest& from);
  void MergeFrom(const ShowOPStatusRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowOPStatusRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 3;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowOPStatusRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ConnectZKRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ConnectZKRequest) */ {
 public:
  ConnectZKRequest();
  virtual ~ConnectZKRequest();

  ConnectZKRequest(const ConnectZKRequest& from);

  inline ConnectZKRequest& operator=(const ConnectZKRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ConnectZKRequest(ConnectZKRequest&& from) noexcept
    : ConnectZKRequest() {
    *this = ::std::move(from);
  }

  inline ConnectZKRequest& operator=(ConnectZKRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConnectZKRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ConnectZKRequest* internal_default_instance() {
    return reinterpret_cast<const ConnectZKRequest*>(
               &_ConnectZKRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  void Swap(ConnectZKRequest* other);
  friend void swap(ConnectZKRequest& a, ConnectZKRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ConnectZKRequest* New() const final {
    return CreateMaybeMessage<ConnectZKRequest>(NULL);
  }

  ConnectZKRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ConnectZKRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ConnectZKRequest& from);
  void MergeFrom(const ConnectZKRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ConnectZKRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ConnectZKRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DisConnectZKRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.DisConnectZKRequest) */ {
 public:
  DisConnectZKRequest();
  virtual ~DisConnectZKRequest();

  DisConnectZKRequest(const DisConnectZKRequest& from);

  inline DisConnectZKRequest& operator=(const DisConnectZKRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DisConnectZKRequest(DisConnectZKRequest&& from) noexcept
    : DisConnectZKRequest() {
    *this = ::std::move(from);
  }

  inline DisConnectZKRequest& operator=(DisConnectZKRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DisConnectZKRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DisConnectZKRequest* internal_default_instance() {
    return reinterpret_cast<const DisConnectZKRequest*>(
               &_DisConnectZKRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  void Swap(DisConnectZKRequest* other);
  friend void swap(DisConnectZKRequest& a, DisConnectZKRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DisConnectZKRequest* New() const final {
    return CreateMaybeMessage<DisConnectZKRequest>(NULL);
  }

  DisConnectZKRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DisConnectZKRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DisConnectZKRequest& from);
  void MergeFrom(const DisConnectZKRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DisConnectZKRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.DisConnectZKRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowOPStatusResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowOPStatusResponse) */ {
 public:
  ShowOPStatusResponse();
  virtual ~ShowOPStatusResponse();

  ShowOPStatusResponse(const ShowOPStatusResponse& from);

  inline ShowOPStatusResponse& operator=(const ShowOPStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowOPStatusResponse(ShowOPStatusResponse&& from) noexcept
    : ShowOPStatusResponse() {
    *this = ::std::move(from);
  }

  inline ShowOPStatusResponse& operator=(ShowOPStatusResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowOPStatusResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowOPStatusResponse* internal_default_instance() {
    return reinterpret_cast<const ShowOPStatusResponse*>(
               &_ShowOPStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  void Swap(ShowOPStatusResponse* other);
  friend void swap(ShowOPStatusResponse& a, ShowOPStatusResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowOPStatusResponse* New() const final {
    return CreateMaybeMessage<ShowOPStatusResponse>(NULL);
  }

  ShowOPStatusResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowOPStatusResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowOPStatusResponse& from);
  void MergeFrom(const ShowOPStatusResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowOPStatusResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.OPStatus op_status = 3;
  int op_status_size() const;
  void clear_op_status();
  static const int kOpStatusFieldNumber = 3;
  ::openmldb::nameserver::OPStatus* mutable_op_status(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::OPStatus >*
      mutable_op_status();
  const ::openmldb::nameserver::OPStatus& op_status(int index) const;
  ::openmldb::nameserver::OPStatus* add_op_status();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::OPStatus >&
      op_status() const;

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowOPStatusResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::OPStatus > op_status_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CancelOPRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CancelOPRequest) */ {
 public:
  CancelOPRequest();
  virtual ~CancelOPRequest();

  CancelOPRequest(const CancelOPRequest& from);

  inline CancelOPRequest& operator=(const CancelOPRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CancelOPRequest(CancelOPRequest&& from) noexcept
    : CancelOPRequest() {
    *this = ::std::move(from);
  }

  inline CancelOPRequest& operator=(CancelOPRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CancelOPRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CancelOPRequest* internal_default_instance() {
    return reinterpret_cast<const CancelOPRequest*>(
               &_CancelOPRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  void Swap(CancelOPRequest* other);
  friend void swap(CancelOPRequest& a, CancelOPRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CancelOPRequest* New() const final {
    return CreateMaybeMessage<CancelOPRequest>(NULL);
  }

  CancelOPRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CancelOPRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CancelOPRequest& from);
  void MergeFrom(const CancelOPRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CancelOPRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional uint64 op_id = 1;
  bool has_op_id() const;
  void clear_op_id();
  static const int kOpIdFieldNumber = 1;
  ::google::protobuf::uint64 op_id() const;
  void set_op_id(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CancelOPRequest)
 private:
  void set_has_op_id();
  void clear_has_op_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint64 op_id_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterAddress : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ClusterAddress) */ {
 public:
  ClusterAddress();
  virtual ~ClusterAddress();

  ClusterAddress(const ClusterAddress& from);

  inline ClusterAddress& operator=(const ClusterAddress& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterAddress(ClusterAddress&& from) noexcept
    : ClusterAddress() {
    *this = ::std::move(from);
  }

  inline ClusterAddress& operator=(ClusterAddress&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterAddress& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterAddress* internal_default_instance() {
    return reinterpret_cast<const ClusterAddress*>(
               &_ClusterAddress_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  void Swap(ClusterAddress* other);
  friend void swap(ClusterAddress& a, ClusterAddress& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterAddress* New() const final {
    return CreateMaybeMessage<ClusterAddress>(NULL);
  }

  ClusterAddress* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterAddress>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterAddress& from);
  void MergeFrom(const ClusterAddress& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterAddress* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string zk_endpoints = 1;
  bool has_zk_endpoints() const;
  void clear_zk_endpoints();
  static const int kZkEndpointsFieldNumber = 1;
  const ::std::string& zk_endpoints() const;
  void set_zk_endpoints(const ::std::string& value);
  #if LANG_CXX11
  void set_zk_endpoints(::std::string&& value);
  #endif
  void set_zk_endpoints(const char* value);
  void set_zk_endpoints(const char* value, size_t size);
  ::std::string* mutable_zk_endpoints();
  ::std::string* release_zk_endpoints();
  void set_allocated_zk_endpoints(::std::string* zk_endpoints);

  // optional string zk_path = 2;
  bool has_zk_path() const;
  void clear_zk_path();
  static const int kZkPathFieldNumber = 2;
  const ::std::string& zk_path() const;
  void set_zk_path(const ::std::string& value);
  #if LANG_CXX11
  void set_zk_path(::std::string&& value);
  #endif
  void set_zk_path(const char* value);
  void set_zk_path(const char* value, size_t size);
  ::std::string* mutable_zk_path();
  ::std::string* release_zk_path();
  void set_allocated_zk_path(::std::string* zk_path);

  // optional string alias = 3;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 3;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ClusterAddress)
 private:
  void set_has_zk_endpoints();
  void clear_has_zk_endpoints();
  void set_has_zk_path();
  void clear_has_zk_path();
  void set_has_alias();
  void clear_has_alias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr zk_endpoints_;
  ::google::protobuf::internal::ArenaStringPtr zk_path_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GeneralRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.GeneralRequest) */ {
 public:
  GeneralRequest();
  virtual ~GeneralRequest();

  GeneralRequest(const GeneralRequest& from);

  inline GeneralRequest& operator=(const GeneralRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GeneralRequest(GeneralRequest&& from) noexcept
    : GeneralRequest() {
    *this = ::std::move(from);
  }

  inline GeneralRequest& operator=(GeneralRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GeneralRequest* internal_default_instance() {
    return reinterpret_cast<const GeneralRequest*>(
               &_GeneralRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  void Swap(GeneralRequest* other);
  friend void swap(GeneralRequest& a, GeneralRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GeneralRequest* New() const final {
    return CreateMaybeMessage<GeneralRequest>(NULL);
  }

  GeneralRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GeneralRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GeneralRequest& from);
  void MergeFrom(const GeneralRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GeneralRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.GeneralRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClusterAddAge : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ClusterAddAge) */ {
 public:
  ClusterAddAge();
  virtual ~ClusterAddAge();

  ClusterAddAge(const ClusterAddAge& from);

  inline ClusterAddAge& operator=(const ClusterAddAge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClusterAddAge(ClusterAddAge&& from) noexcept
    : ClusterAddAge() {
    *this = ::std::move(from);
  }

  inline ClusterAddAge& operator=(ClusterAddAge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClusterAddAge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClusterAddAge* internal_default_instance() {
    return reinterpret_cast<const ClusterAddAge*>(
               &_ClusterAddAge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  void Swap(ClusterAddAge* other);
  friend void swap(ClusterAddAge& a, ClusterAddAge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClusterAddAge* New() const final {
    return CreateMaybeMessage<ClusterAddAge>(NULL);
  }

  ClusterAddAge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ClusterAddAge>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ClusterAddAge& from);
  void MergeFrom(const ClusterAddAge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ClusterAddAge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional .openmldb.nameserver.ClusterAddress replica = 1;
  bool has_replica() const;
  void clear_replica();
  static const int kReplicaFieldNumber = 1;
  private:
  const ::openmldb::nameserver::ClusterAddress& _internal_replica() const;
  public:
  const ::openmldb::nameserver::ClusterAddress& replica() const;
  ::openmldb::nameserver::ClusterAddress* release_replica();
  ::openmldb::nameserver::ClusterAddress* mutable_replica();
  void set_allocated_replica(::openmldb::nameserver::ClusterAddress* replica);

  // optional uint64 age = 2;
  bool has_age() const;
  void clear_age();
  static const int kAgeFieldNumber = 2;
  ::google::protobuf::uint64 age() const;
  void set_age(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ClusterAddAge)
 private:
  void set_has_replica();
  void clear_has_replica();
  void set_has_age();
  void clear_has_age();
  void set_has_state();
  void clear_has_state();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::openmldb::nameserver::ClusterAddress* replica_;
  ::google::protobuf::uint64 age_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowReplicaClusterResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowReplicaClusterResponse) */ {
 public:
  ShowReplicaClusterResponse();
  virtual ~ShowReplicaClusterResponse();

  ShowReplicaClusterResponse(const ShowReplicaClusterResponse& from);

  inline ShowReplicaClusterResponse& operator=(const ShowReplicaClusterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowReplicaClusterResponse(ShowReplicaClusterResponse&& from) noexcept
    : ShowReplicaClusterResponse() {
    *this = ::std::move(from);
  }

  inline ShowReplicaClusterResponse& operator=(ShowReplicaClusterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowReplicaClusterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowReplicaClusterResponse* internal_default_instance() {
    return reinterpret_cast<const ShowReplicaClusterResponse*>(
               &_ShowReplicaClusterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  void Swap(ShowReplicaClusterResponse* other);
  friend void swap(ShowReplicaClusterResponse& a, ShowReplicaClusterResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowReplicaClusterResponse* New() const final {
    return CreateMaybeMessage<ShowReplicaClusterResponse>(NULL);
  }

  ShowReplicaClusterResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowReplicaClusterResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowReplicaClusterResponse& from);
  void MergeFrom(const ShowReplicaClusterResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowReplicaClusterResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.ClusterAddAge replicas = 1;
  int replicas_size() const;
  void clear_replicas();
  static const int kReplicasFieldNumber = 1;
  ::openmldb::nameserver::ClusterAddAge* mutable_replicas(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::ClusterAddAge >*
      mutable_replicas();
  const ::openmldb::nameserver::ClusterAddAge& replicas(int index) const;
  ::openmldb::nameserver::ClusterAddAge* add_replicas();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::ClusterAddAge >&
      replicas() const;

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowReplicaClusterResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::ClusterAddAge > replicas_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RemoveReplicaOfRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.RemoveReplicaOfRequest) */ {
 public:
  RemoveReplicaOfRequest();
  virtual ~RemoveReplicaOfRequest();

  RemoveReplicaOfRequest(const RemoveReplicaOfRequest& from);

  inline RemoveReplicaOfRequest& operator=(const RemoveReplicaOfRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveReplicaOfRequest(RemoveReplicaOfRequest&& from) noexcept
    : RemoveReplicaOfRequest() {
    *this = ::std::move(from);
  }

  inline RemoveReplicaOfRequest& operator=(RemoveReplicaOfRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveReplicaOfRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveReplicaOfRequest* internal_default_instance() {
    return reinterpret_cast<const RemoveReplicaOfRequest*>(
               &_RemoveReplicaOfRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  void Swap(RemoveReplicaOfRequest* other);
  friend void swap(RemoveReplicaOfRequest& a, RemoveReplicaOfRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveReplicaOfRequest* New() const final {
    return CreateMaybeMessage<RemoveReplicaOfRequest>(NULL);
  }

  RemoveReplicaOfRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RemoveReplicaOfRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RemoveReplicaOfRequest& from);
  void MergeFrom(const RemoveReplicaOfRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RemoveReplicaOfRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string alias = 1;
  bool has_alias() const;
  void clear_alias();
  static const int kAliasFieldNumber = 1;
  const ::std::string& alias() const;
  void set_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_alias(::std::string&& value);
  #endif
  void set_alias(const char* value);
  void set_alias(const char* value, size_t size);
  ::std::string* mutable_alias();
  ::std::string* release_alias();
  void set_allocated_alias(::std::string* alias);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.RemoveReplicaOfRequest)
 private:
  void set_has_alias();
  void clear_has_alias();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr alias_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ReplicaClusterByNsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ReplicaClusterByNsRequest) */ {
 public:
  ReplicaClusterByNsRequest();
  virtual ~ReplicaClusterByNsRequest();

  ReplicaClusterByNsRequest(const ReplicaClusterByNsRequest& from);

  inline ReplicaClusterByNsRequest& operator=(const ReplicaClusterByNsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ReplicaClusterByNsRequest(ReplicaClusterByNsRequest&& from) noexcept
    : ReplicaClusterByNsRequest() {
    *this = ::std::move(from);
  }

  inline ReplicaClusterByNsRequest& operator=(ReplicaClusterByNsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReplicaClusterByNsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReplicaClusterByNsRequest* internal_default_instance() {
    return reinterpret_cast<const ReplicaClusterByNsRequest*>(
               &_ReplicaClusterByNsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  void Swap(ReplicaClusterByNsRequest* other);
  friend void swap(ReplicaClusterByNsRequest& a, ReplicaClusterByNsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ReplicaClusterByNsRequest* New() const final {
    return CreateMaybeMessage<ReplicaClusterByNsRequest>(NULL);
  }

  ReplicaClusterByNsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ReplicaClusterByNsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ReplicaClusterByNsRequest& from);
  void MergeFrom(const ReplicaClusterByNsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReplicaClusterByNsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .openmldb.nameserver.ZoneInfo zone_info = 1;
  bool has_zone_info() const;
  void clear_zone_info();
  static const int kZoneInfoFieldNumber = 1;
  private:
  const ::openmldb::nameserver::ZoneInfo& _internal_zone_info() const;
  public:
  const ::openmldb::nameserver::ZoneInfo& zone_info() const;
  ::openmldb::nameserver::ZoneInfo* release_zone_info();
  ::openmldb::nameserver::ZoneInfo* mutable_zone_info();
  void set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ReplicaClusterByNsRequest)
 private:
  void set_has_zone_info();
  void clear_has_zone_info();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::openmldb::nameserver::ZoneInfo* zone_info_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ZoneInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ZoneInfo) */ {
 public:
  ZoneInfo();
  virtual ~ZoneInfo();

  ZoneInfo(const ZoneInfo& from);

  inline ZoneInfo& operator=(const ZoneInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ZoneInfo(ZoneInfo&& from) noexcept
    : ZoneInfo() {
    *this = ::std::move(from);
  }

  inline ZoneInfo& operator=(ZoneInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZoneInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZoneInfo* internal_default_instance() {
    return reinterpret_cast<const ZoneInfo*>(
               &_ZoneInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  void Swap(ZoneInfo* other);
  friend void swap(ZoneInfo& a, ZoneInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ZoneInfo* New() const final {
    return CreateMaybeMessage<ZoneInfo>(NULL);
  }

  ZoneInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ZoneInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ZoneInfo& from);
  void MergeFrom(const ZoneInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZoneInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string zone_name = 1;
  bool has_zone_name() const;
  void clear_zone_name();
  static const int kZoneNameFieldNumber = 1;
  const ::std::string& zone_name() const;
  void set_zone_name(const ::std::string& value);
  #if LANG_CXX11
  void set_zone_name(::std::string&& value);
  #endif
  void set_zone_name(const char* value);
  void set_zone_name(const char* value, size_t size);
  ::std::string* mutable_zone_name();
  ::std::string* release_zone_name();
  void set_allocated_zone_name(::std::string* zone_name);

  // optional string replica_alias = 2;
  bool has_replica_alias() const;
  void clear_replica_alias();
  static const int kReplicaAliasFieldNumber = 2;
  const ::std::string& replica_alias() const;
  void set_replica_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_replica_alias(::std::string&& value);
  #endif
  void set_replica_alias(const char* value);
  void set_replica_alias(const char* value, size_t size);
  ::std::string* mutable_replica_alias();
  ::std::string* release_replica_alias();
  void set_allocated_replica_alias(::std::string* replica_alias);

  // optional uint64 zone_term = 3;
  bool has_zone_term() const;
  void clear_zone_term();
  static const int kZoneTermFieldNumber = 3;
  ::google::protobuf::uint64 zone_term() const;
  void set_zone_term(::google::protobuf::uint64 value);

  // optional .openmldb.nameserver.ServerMode mode = 4;
  bool has_mode() const;
  void clear_mode();
  static const int kModeFieldNumber = 4;
  ::openmldb::nameserver::ServerMode mode() const;
  void set_mode(::openmldb::nameserver::ServerMode value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ZoneInfo)
 private:
  void set_has_zone_name();
  void clear_has_zone_name();
  void set_has_replica_alias();
  void clear_has_replica_alias();
  void set_has_zone_term();
  void clear_has_zone_term();
  void set_has_mode();
  void clear_has_mode();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr zone_name_;
  ::google::protobuf::internal::ArenaStringPtr replica_alias_;
  ::google::protobuf::uint64 zone_term_;
  int mode_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddReplicaClusterByNsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.AddReplicaClusterByNsResponse) */ {
 public:
  AddReplicaClusterByNsResponse();
  virtual ~AddReplicaClusterByNsResponse();

  AddReplicaClusterByNsResponse(const AddReplicaClusterByNsResponse& from);

  inline AddReplicaClusterByNsResponse& operator=(const AddReplicaClusterByNsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddReplicaClusterByNsResponse(AddReplicaClusterByNsResponse&& from) noexcept
    : AddReplicaClusterByNsResponse() {
    *this = ::std::move(from);
  }

  inline AddReplicaClusterByNsResponse& operator=(AddReplicaClusterByNsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddReplicaClusterByNsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddReplicaClusterByNsResponse* internal_default_instance() {
    return reinterpret_cast<const AddReplicaClusterByNsResponse*>(
               &_AddReplicaClusterByNsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  void Swap(AddReplicaClusterByNsResponse* other);
  friend void swap(AddReplicaClusterByNsResponse& a, AddReplicaClusterByNsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddReplicaClusterByNsResponse* New() const final {
    return CreateMaybeMessage<AddReplicaClusterByNsResponse>(NULL);
  }

  AddReplicaClusterByNsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddReplicaClusterByNsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddReplicaClusterByNsResponse& from);
  void MergeFrom(const AddReplicaClusterByNsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddReplicaClusterByNsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.TabletStatus tablets = 1;
  int tablets_size() const;
  void clear_tablets();
  static const int kTabletsFieldNumber = 1;
  ::openmldb::nameserver::TabletStatus* mutable_tablets(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >*
      mutable_tablets();
  const ::openmldb::nameserver::TabletStatus& tablets(int index) const;
  ::openmldb::nameserver::TabletStatus* add_tablets();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >&
      tablets() const;

  // repeated .openmldb.nameserver.TableInfo table_info = 2;
  int table_info_size() const;
  void clear_table_info();
  static const int kTableInfoFieldNumber = 2;
  ::openmldb::nameserver::TableInfo* mutable_table_info(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >*
      mutable_table_info();
  const ::openmldb::nameserver::TableInfo& table_info(int index) const;
  ::openmldb::nameserver::TableInfo* add_table_info();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >&
      table_info() const;

  // optional string msg = 4;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 4;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 3;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 3;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.AddReplicaClusterByNsResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus > tablets_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo > table_info_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SwitchModeRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.SwitchModeRequest) */ {
 public:
  SwitchModeRequest();
  virtual ~SwitchModeRequest();

  SwitchModeRequest(const SwitchModeRequest& from);

  inline SwitchModeRequest& operator=(const SwitchModeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SwitchModeRequest(SwitchModeRequest&& from) noexcept
    : SwitchModeRequest() {
    *this = ::std::move(from);
  }

  inline SwitchModeRequest& operator=(SwitchModeRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SwitchModeRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SwitchModeRequest* internal_default_instance() {
    return reinterpret_cast<const SwitchModeRequest*>(
               &_SwitchModeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  void Swap(SwitchModeRequest* other);
  friend void swap(SwitchModeRequest& a, SwitchModeRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SwitchModeRequest* New() const final {
    return CreateMaybeMessage<SwitchModeRequest>(NULL);
  }

  SwitchModeRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SwitchModeRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SwitchModeRequest& from);
  void MergeFrom(const SwitchModeRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SwitchModeRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .openmldb.nameserver.ServerMode sm = 1;
  bool has_sm() const;
  void clear_sm();
  static const int kSmFieldNumber = 1;
  ::openmldb::nameserver::ServerMode sm() const;
  void set_sm(::openmldb::nameserver::ServerMode value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.SwitchModeRequest)
 private:
  void set_has_sm();
  void clear_has_sm();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int sm_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SyncTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.SyncTableRequest) */ {
 public:
  SyncTableRequest();
  virtual ~SyncTableRequest();

  SyncTableRequest(const SyncTableRequest& from);

  inline SyncTableRequest& operator=(const SyncTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SyncTableRequest(SyncTableRequest&& from) noexcept
    : SyncTableRequest() {
    *this = ::std::move(from);
  }

  inline SyncTableRequest& operator=(SyncTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SyncTableRequest* internal_default_instance() {
    return reinterpret_cast<const SyncTableRequest*>(
               &_SyncTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  void Swap(SyncTableRequest* other);
  friend void swap(SyncTableRequest& a, SyncTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SyncTableRequest* New() const final {
    return CreateMaybeMessage<SyncTableRequest>(NULL);
  }

  SyncTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SyncTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SyncTableRequest& from);
  void MergeFrom(const SyncTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string cluster_alias = 2;
  bool has_cluster_alias() const;
  void clear_cluster_alias();
  static const int kClusterAliasFieldNumber = 2;
  const ::std::string& cluster_alias() const;
  void set_cluster_alias(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster_alias(::std::string&& value);
  #endif
  void set_cluster_alias(const char* value);
  void set_cluster_alias(const char* value, size_t size);
  ::std::string* mutable_cluster_alias();
  ::std::string* release_cluster_alias();
  void set_allocated_cluster_alias(::std::string* cluster_alias);

  // optional string db = 4 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional uint32 pid = 3;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 3;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.SyncTableRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_cluster_alias();
  void clear_has_cluster_alias();
  void set_has_pid();
  void clear_has_pid();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr cluster_alias_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::uint32 pid_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class SetSdkEndpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.SetSdkEndpointRequest) */ {
 public:
  SetSdkEndpointRequest();
  virtual ~SetSdkEndpointRequest();

  SetSdkEndpointRequest(const SetSdkEndpointRequest& from);

  inline SetSdkEndpointRequest& operator=(const SetSdkEndpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  SetSdkEndpointRequest(SetSdkEndpointRequest&& from) noexcept
    : SetSdkEndpointRequest() {
    *this = ::std::move(from);
  }

  inline SetSdkEndpointRequest& operator=(SetSdkEndpointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SetSdkEndpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetSdkEndpointRequest* internal_default_instance() {
    return reinterpret_cast<const SetSdkEndpointRequest*>(
               &_SetSdkEndpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  void Swap(SetSdkEndpointRequest* other);
  friend void swap(SetSdkEndpointRequest& a, SetSdkEndpointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline SetSdkEndpointRequest* New() const final {
    return CreateMaybeMessage<SetSdkEndpointRequest>(NULL);
  }

  SetSdkEndpointRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<SetSdkEndpointRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const SetSdkEndpointRequest& from);
  void MergeFrom(const SetSdkEndpointRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetSdkEndpointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string server_name = 1;
  bool has_server_name() const;
  void clear_server_name();
  static const int kServerNameFieldNumber = 1;
  const ::std::string& server_name() const;
  void set_server_name(const ::std::string& value);
  #if LANG_CXX11
  void set_server_name(::std::string&& value);
  #endif
  void set_server_name(const char* value);
  void set_server_name(const char* value, size_t size);
  ::std::string* mutable_server_name();
  ::std::string* release_server_name();
  void set_allocated_server_name(::std::string* server_name);

  // optional string sdk_endpoint = 2;
  bool has_sdk_endpoint() const;
  void clear_sdk_endpoint();
  static const int kSdkEndpointFieldNumber = 2;
  const ::std::string& sdk_endpoint() const;
  void set_sdk_endpoint(const ::std::string& value);
  #if LANG_CXX11
  void set_sdk_endpoint(::std::string&& value);
  #endif
  void set_sdk_endpoint(const char* value);
  void set_sdk_endpoint(const char* value, size_t size);
  ::std::string* mutable_sdk_endpoint();
  ::std::string* release_sdk_endpoint();
  void set_allocated_sdk_endpoint(::std::string* sdk_endpoint);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.SetSdkEndpointRequest)
 private:
  void set_has_server_name();
  void clear_has_server_name();
  void set_has_sdk_endpoint();
  void clear_has_sdk_endpoint();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr server_name_;
  ::google::protobuf::internal::ArenaStringPtr sdk_endpoint_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddIndexMeta : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.AddIndexMeta) */ {
 public:
  AddIndexMeta();
  virtual ~AddIndexMeta();

  AddIndexMeta(const AddIndexMeta& from);

  inline AddIndexMeta& operator=(const AddIndexMeta& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddIndexMeta(AddIndexMeta&& from) noexcept
    : AddIndexMeta() {
    *this = ::std::move(from);
  }

  inline AddIndexMeta& operator=(AddIndexMeta&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddIndexMeta& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddIndexMeta* internal_default_instance() {
    return reinterpret_cast<const AddIndexMeta*>(
               &_AddIndexMeta_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  void Swap(AddIndexMeta* other);
  friend void swap(AddIndexMeta& a, AddIndexMeta& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddIndexMeta* New() const final {
    return CreateMaybeMessage<AddIndexMeta>(NULL);
  }

  AddIndexMeta* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddIndexMeta>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddIndexMeta& from);
  void MergeFrom(const AddIndexMeta& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddIndexMeta* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 5 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 5;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.common.ColumnKey column_key = 3;
  bool has_column_key() const;
  void clear_column_key();
  static const int kColumnKeyFieldNumber = 3;
  private:
  const ::openmldb::common::ColumnKey& _internal_column_key() const;
  public:
  const ::openmldb::common::ColumnKey& column_key() const;
  ::openmldb::common::ColumnKey* release_column_key();
  ::openmldb::common::ColumnKey* mutable_column_key();
  void set_allocated_column_key(::openmldb::common::ColumnKey* column_key);

  // optional uint32 pid = 2;
  bool has_pid() const;
  void clear_pid();
  static const int kPidFieldNumber = 2;
  ::google::protobuf::uint32 pid() const;
  void set_pid(::google::protobuf::uint32 value);

  // optional uint32 idx = 4;
  bool has_idx() const;
  void clear_idx();
  static const int kIdxFieldNumber = 4;
  ::google::protobuf::uint32 idx() const;
  void set_idx(::google::protobuf::uint32 value);

  // optional bool skip_data = 6 [default = false];
  bool has_skip_data() const;
  void clear_skip_data();
  static const int kSkipDataFieldNumber = 6;
  bool skip_data() const;
  void set_skip_data(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.AddIndexMeta)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_pid();
  void clear_has_pid();
  void set_has_column_key();
  void clear_has_column_key();
  void set_has_idx();
  void clear_has_idx();
  void set_has_db();
  void clear_has_db();
  void set_has_skip_data();
  void clear_has_skip_data();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::common::ColumnKey* column_key_;
  ::google::protobuf::uint32 pid_;
  ::google::protobuf::uint32 idx_;
  bool skip_data_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AddIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.AddIndexRequest) */ {
 public:
  AddIndexRequest();
  virtual ~AddIndexRequest();

  AddIndexRequest(const AddIndexRequest& from);

  inline AddIndexRequest& operator=(const AddIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AddIndexRequest(AddIndexRequest&& from) noexcept
    : AddIndexRequest() {
    *this = ::std::move(from);
  }

  inline AddIndexRequest& operator=(AddIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AddIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AddIndexRequest* internal_default_instance() {
    return reinterpret_cast<const AddIndexRequest*>(
               &_AddIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  void Swap(AddIndexRequest* other);
  friend void swap(AddIndexRequest& a, AddIndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AddIndexRequest* New() const final {
    return CreateMaybeMessage<AddIndexRequest>(NULL);
  }

  AddIndexRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AddIndexRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const AddIndexRequest& from);
  void MergeFrom(const AddIndexRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.common.ColumnDesc cols = 4;
  int cols_size() const;
  void clear_cols();
  static const int kColsFieldNumber = 4;
  ::openmldb::common::ColumnDesc* mutable_cols(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
      mutable_cols();
  const ::openmldb::common::ColumnDesc& cols(int index) const;
  ::openmldb::common::ColumnDesc* add_cols();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
      cols() const;

  // repeated .openmldb.common.ColumnKey column_keys = 5;
  int column_keys_size() const;
  void clear_column_keys();
  static const int kColumnKeysFieldNumber = 5;
  ::openmldb::common::ColumnKey* mutable_column_keys(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >*
      mutable_column_keys();
  const ::openmldb::common::ColumnKey& column_keys(int index) const;
  ::openmldb::common::ColumnKey* add_column_keys();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >&
      column_keys() const;

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string db = 3 [default = ""];
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .openmldb.common.ColumnKey column_key = 2;
  bool has_column_key() const;
  void clear_column_key();
  static const int kColumnKeyFieldNumber = 2;
  private:
  const ::openmldb::common::ColumnKey& _internal_column_key() const;
  public:
  const ::openmldb::common::ColumnKey& column_key() const;
  ::openmldb::common::ColumnKey* release_column_key();
  ::openmldb::common::ColumnKey* mutable_column_key();
  void set_allocated_column_key(::openmldb::common::ColumnKey* column_key);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.AddIndexRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_column_key();
  void clear_has_column_key();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc > cols_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey > column_keys_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::openmldb::common::ColumnKey* column_key_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteIndexRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.DeleteIndexRequest) */ {
 public:
  DeleteIndexRequest();
  virtual ~DeleteIndexRequest();

  DeleteIndexRequest(const DeleteIndexRequest& from);

  inline DeleteIndexRequest& operator=(const DeleteIndexRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteIndexRequest(DeleteIndexRequest&& from) noexcept
    : DeleteIndexRequest() {
    *this = ::std::move(from);
  }

  inline DeleteIndexRequest& operator=(DeleteIndexRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteIndexRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteIndexRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteIndexRequest*>(
               &_DeleteIndexRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  void Swap(DeleteIndexRequest* other);
  friend void swap(DeleteIndexRequest& a, DeleteIndexRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteIndexRequest* New() const final {
    return CreateMaybeMessage<DeleteIndexRequest>(NULL);
  }

  DeleteIndexRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteIndexRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteIndexRequest& from);
  void MergeFrom(const DeleteIndexRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteIndexRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string table_name = 1;
  bool has_table_name() const;
  void clear_table_name();
  static const int kTableNameFieldNumber = 1;
  const ::std::string& table_name() const;
  void set_table_name(const ::std::string& value);
  #if LANG_CXX11
  void set_table_name(::std::string&& value);
  #endif
  void set_table_name(const char* value);
  void set_table_name(const char* value, size_t size);
  ::std::string* mutable_table_name();
  ::std::string* release_table_name();
  void set_allocated_table_name(::std::string* table_name);

  // optional string idx_name = 2;
  bool has_idx_name() const;
  void clear_idx_name();
  static const int kIdxNameFieldNumber = 2;
  const ::std::string& idx_name() const;
  void set_idx_name(const ::std::string& value);
  #if LANG_CXX11
  void set_idx_name(::std::string&& value);
  #endif
  void set_idx_name(const char* value);
  void set_idx_name(const char* value, size_t size);
  ::std::string* mutable_idx_name();
  ::std::string* release_idx_name();
  void set_allocated_idx_name(::std::string* idx_name);

  // optional string db_name = 3 [default = ""];
  bool has_db_name() const;
  void clear_db_name();
  static const int kDbNameFieldNumber = 3;
  const ::std::string& db_name() const;
  void set_db_name(const ::std::string& value);
  #if LANG_CXX11
  void set_db_name(::std::string&& value);
  #endif
  void set_db_name(const char* value);
  void set_db_name(const char* value, size_t size);
  ::std::string* mutable_db_name();
  ::std::string* release_db_name();
  void set_allocated_db_name(::std::string* db_name);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.DeleteIndexRequest)
 private:
  void set_has_table_name();
  void clear_has_table_name();
  void set_has_idx_name();
  void clear_has_idx_name();
  void set_has_db_name();
  void clear_has_db_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr table_name_;
  ::google::protobuf::internal::ArenaStringPtr idx_name_;
  ::google::protobuf::internal::ArenaStringPtr db_name_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateDatabaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CreateDatabaseRequest) */ {
 public:
  CreateDatabaseRequest();
  virtual ~CreateDatabaseRequest();

  CreateDatabaseRequest(const CreateDatabaseRequest& from);

  inline CreateDatabaseRequest& operator=(const CreateDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateDatabaseRequest(CreateDatabaseRequest&& from) noexcept
    : CreateDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline CreateDatabaseRequest& operator=(CreateDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const CreateDatabaseRequest*>(
               &_CreateDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  void Swap(CreateDatabaseRequest* other);
  friend void swap(CreateDatabaseRequest& a, CreateDatabaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateDatabaseRequest* New() const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(NULL);
  }

  CreateDatabaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateDatabaseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateDatabaseRequest& from);
  void MergeFrom(const CreateDatabaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateDatabaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional bool if_not_exists = 2 [default = false];
  bool has_if_not_exists() const;
  void clear_if_not_exists();
  static const int kIfNotExistsFieldNumber = 2;
  bool if_not_exists() const;
  void set_if_not_exists(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CreateDatabaseRequest)
 private:
  void set_has_db();
  void clear_has_db();
  void set_has_if_not_exists();
  void clear_has_if_not_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  bool if_not_exists_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class UseDatabaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.UseDatabaseRequest) */ {
 public:
  UseDatabaseRequest();
  virtual ~UseDatabaseRequest();

  UseDatabaseRequest(const UseDatabaseRequest& from);

  inline UseDatabaseRequest& operator=(const UseDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  UseDatabaseRequest(UseDatabaseRequest&& from) noexcept
    : UseDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline UseDatabaseRequest& operator=(UseDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UseDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UseDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const UseDatabaseRequest*>(
               &_UseDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  void Swap(UseDatabaseRequest* other);
  friend void swap(UseDatabaseRequest& a, UseDatabaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline UseDatabaseRequest* New() const final {
    return CreateMaybeMessage<UseDatabaseRequest>(NULL);
  }

  UseDatabaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<UseDatabaseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const UseDatabaseRequest& from);
  void MergeFrom(const UseDatabaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UseDatabaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.UseDatabaseRequest)
 private:
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowDatabaseResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowDatabaseResponse) */ {
 public:
  ShowDatabaseResponse();
  virtual ~ShowDatabaseResponse();

  ShowDatabaseResponse(const ShowDatabaseResponse& from);

  inline ShowDatabaseResponse& operator=(const ShowDatabaseResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowDatabaseResponse(ShowDatabaseResponse&& from) noexcept
    : ShowDatabaseResponse() {
    *this = ::std::move(from);
  }

  inline ShowDatabaseResponse& operator=(ShowDatabaseResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowDatabaseResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowDatabaseResponse* internal_default_instance() {
    return reinterpret_cast<const ShowDatabaseResponse*>(
               &_ShowDatabaseResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  void Swap(ShowDatabaseResponse* other);
  friend void swap(ShowDatabaseResponse& a, ShowDatabaseResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowDatabaseResponse* New() const final {
    return CreateMaybeMessage<ShowDatabaseResponse>(NULL);
  }

  ShowDatabaseResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowDatabaseResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowDatabaseResponse& from);
  void MergeFrom(const ShowDatabaseResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowDatabaseResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string db = 3;
  int db_size() const;
  void clear_db();
  static const int kDbFieldNumber = 3;
  const ::std::string& db(int index) const;
  ::std::string* mutable_db(int index);
  void set_db(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_db(int index, ::std::string&& value);
  #endif
  void set_db(int index, const char* value);
  void set_db(int index, const char* value, size_t size);
  ::std::string* add_db();
  void add_db(const ::std::string& value);
  #if LANG_CXX11
  void add_db(::std::string&& value);
  #endif
  void add_db(const char* value);
  void add_db(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& db() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_db();

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowDatabaseResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> db_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropDatabaseRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.DropDatabaseRequest) */ {
 public:
  DropDatabaseRequest();
  virtual ~DropDatabaseRequest();

  DropDatabaseRequest(const DropDatabaseRequest& from);

  inline DropDatabaseRequest& operator=(const DropDatabaseRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropDatabaseRequest(DropDatabaseRequest&& from) noexcept
    : DropDatabaseRequest() {
    *this = ::std::move(from);
  }

  inline DropDatabaseRequest& operator=(DropDatabaseRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropDatabaseRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropDatabaseRequest* internal_default_instance() {
    return reinterpret_cast<const DropDatabaseRequest*>(
               &_DropDatabaseRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  void Swap(DropDatabaseRequest* other);
  friend void swap(DropDatabaseRequest& a, DropDatabaseRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropDatabaseRequest* New() const final {
    return CreateMaybeMessage<DropDatabaseRequest>(NULL);
  }

  DropDatabaseRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropDatabaseRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropDatabaseRequest& from);
  void MergeFrom(const DropDatabaseRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropDatabaseRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.DropDatabaseRequest)
 private:
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowSdkEndpointRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowSdkEndpointRequest) */ {
 public:
  ShowSdkEndpointRequest();
  virtual ~ShowSdkEndpointRequest();

  ShowSdkEndpointRequest(const ShowSdkEndpointRequest& from);

  inline ShowSdkEndpointRequest& operator=(const ShowSdkEndpointRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowSdkEndpointRequest(ShowSdkEndpointRequest&& from) noexcept
    : ShowSdkEndpointRequest() {
    *this = ::std::move(from);
  }

  inline ShowSdkEndpointRequest& operator=(ShowSdkEndpointRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowSdkEndpointRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowSdkEndpointRequest* internal_default_instance() {
    return reinterpret_cast<const ShowSdkEndpointRequest*>(
               &_ShowSdkEndpointRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  void Swap(ShowSdkEndpointRequest* other);
  friend void swap(ShowSdkEndpointRequest& a, ShowSdkEndpointRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowSdkEndpointRequest* New() const final {
    return CreateMaybeMessage<ShowSdkEndpointRequest>(NULL);
  }

  ShowSdkEndpointRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowSdkEndpointRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowSdkEndpointRequest& from);
  void MergeFrom(const ShowSdkEndpointRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSdkEndpointRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowSdkEndpointRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowSdkEndpointResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowSdkEndpointResponse) */ {
 public:
  ShowSdkEndpointResponse();
  virtual ~ShowSdkEndpointResponse();

  ShowSdkEndpointResponse(const ShowSdkEndpointResponse& from);

  inline ShowSdkEndpointResponse& operator=(const ShowSdkEndpointResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowSdkEndpointResponse(ShowSdkEndpointResponse&& from) noexcept
    : ShowSdkEndpointResponse() {
    *this = ::std::move(from);
  }

  inline ShowSdkEndpointResponse& operator=(ShowSdkEndpointResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowSdkEndpointResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowSdkEndpointResponse* internal_default_instance() {
    return reinterpret_cast<const ShowSdkEndpointResponse*>(
               &_ShowSdkEndpointResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  void Swap(ShowSdkEndpointResponse* other);
  friend void swap(ShowSdkEndpointResponse& a, ShowSdkEndpointResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowSdkEndpointResponse* New() const final {
    return CreateMaybeMessage<ShowSdkEndpointResponse>(NULL);
  }

  ShowSdkEndpointResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowSdkEndpointResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowSdkEndpointResponse& from);
  void MergeFrom(const ShowSdkEndpointResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowSdkEndpointResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.nameserver.TabletStatus tablets = 1;
  int tablets_size() const;
  void clear_tablets();
  static const int kTabletsFieldNumber = 1;
  ::openmldb::nameserver::TabletStatus* mutable_tablets(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >*
      mutable_tablets();
  const ::openmldb::nameserver::TabletStatus& tablets(int index) const;
  ::openmldb::nameserver::TabletStatus* add_tablets();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >&
      tablets() const;

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowSdkEndpointResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus > tablets_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowCatalogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowCatalogRequest) */ {
 public:
  ShowCatalogRequest();
  virtual ~ShowCatalogRequest();

  ShowCatalogRequest(const ShowCatalogRequest& from);

  inline ShowCatalogRequest& operator=(const ShowCatalogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowCatalogRequest(ShowCatalogRequest&& from) noexcept
    : ShowCatalogRequest() {
    *this = ::std::move(from);
  }

  inline ShowCatalogRequest& operator=(ShowCatalogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowCatalogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCatalogRequest* internal_default_instance() {
    return reinterpret_cast<const ShowCatalogRequest*>(
               &_ShowCatalogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  void Swap(ShowCatalogRequest* other);
  friend void swap(ShowCatalogRequest& a, ShowCatalogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowCatalogRequest* New() const final {
    return CreateMaybeMessage<ShowCatalogRequest>(NULL);
  }

  ShowCatalogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowCatalogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowCatalogRequest& from);
  void MergeFrom(const ShowCatalogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCatalogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowCatalogRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowCatalogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowCatalogResponse) */ {
 public:
  ShowCatalogResponse();
  virtual ~ShowCatalogResponse();

  ShowCatalogResponse(const ShowCatalogResponse& from);

  inline ShowCatalogResponse& operator=(const ShowCatalogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowCatalogResponse(ShowCatalogResponse&& from) noexcept
    : ShowCatalogResponse() {
    *this = ::std::move(from);
  }

  inline ShowCatalogResponse& operator=(ShowCatalogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowCatalogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowCatalogResponse* internal_default_instance() {
    return reinterpret_cast<const ShowCatalogResponse*>(
               &_ShowCatalogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  void Swap(ShowCatalogResponse* other);
  friend void swap(ShowCatalogResponse& a, ShowCatalogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowCatalogResponse* New() const final {
    return CreateMaybeMessage<ShowCatalogResponse>(NULL);
  }

  ShowCatalogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowCatalogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowCatalogResponse& from);
  void MergeFrom(const ShowCatalogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowCatalogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.common.CatalogInfo catalog = 1;
  int catalog_size() const;
  void clear_catalog();
  static const int kCatalogFieldNumber = 1;
  ::openmldb::common::CatalogInfo* mutable_catalog(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::CatalogInfo >*
      mutable_catalog();
  const ::openmldb::common::CatalogInfo& catalog(int index) const;
  ::openmldb::common::CatalogInfo* add_catalog();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::CatalogInfo >&
      catalog() const;

  // optional string msg = 3;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 3;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 2;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 2;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowCatalogResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::CatalogInfo > catalog_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CreateFunctionRequest) */ {
 public:
  CreateFunctionRequest();
  virtual ~CreateFunctionRequest();

  CreateFunctionRequest(const CreateFunctionRequest& from);

  inline CreateFunctionRequest& operator=(const CreateFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFunctionRequest(CreateFunctionRequest&& from) noexcept
    : CreateFunctionRequest() {
    *this = ::std::move(from);
  }

  inline CreateFunctionRequest& operator=(CreateFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateFunctionRequest*>(
               &_CreateFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  void Swap(CreateFunctionRequest* other);
  friend void swap(CreateFunctionRequest& a, CreateFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFunctionRequest* New() const final {
    return CreateMaybeMessage<CreateFunctionRequest>(NULL);
  }

  CreateFunctionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateFunctionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateFunctionRequest& from);
  void MergeFrom(const CreateFunctionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .openmldb.common.ExternalFun fun = 1;
  bool has_fun() const;
  void clear_fun();
  static const int kFunFieldNumber = 1;
  private:
  const ::openmldb::common::ExternalFun& _internal_fun() const;
  public:
  const ::openmldb::common::ExternalFun& fun() const;
  ::openmldb::common::ExternalFun* release_fun();
  ::openmldb::common::ExternalFun* mutable_fun();
  void set_allocated_fun(::openmldb::common::ExternalFun* fun);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CreateFunctionRequest)
 private:
  void set_has_fun();
  void clear_has_fun();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::openmldb::common::ExternalFun* fun_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateFunctionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.CreateFunctionResponse) */ {
 public:
  CreateFunctionResponse();
  virtual ~CreateFunctionResponse();

  CreateFunctionResponse(const CreateFunctionResponse& from);

  inline CreateFunctionResponse& operator=(const CreateFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFunctionResponse(CreateFunctionResponse&& from) noexcept
    : CreateFunctionResponse() {
    *this = ::std::move(from);
  }

  inline CreateFunctionResponse& operator=(CreateFunctionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFunctionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateFunctionResponse*>(
               &_CreateFunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  void Swap(CreateFunctionResponse* other);
  friend void swap(CreateFunctionResponse& a, CreateFunctionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFunctionResponse* New() const final {
    return CreateMaybeMessage<CreateFunctionResponse>(NULL);
  }

  CreateFunctionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateFunctionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateFunctionResponse& from);
  void MergeFrom(const CreateFunctionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateFunctionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.CreateFunctionResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.DropFunctionRequest) */ {
 public:
  DropFunctionRequest();
  virtual ~DropFunctionRequest();

  DropFunctionRequest(const DropFunctionRequest& from);

  inline DropFunctionRequest& operator=(const DropFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropFunctionRequest(DropFunctionRequest&& from) noexcept
    : DropFunctionRequest() {
    *this = ::std::move(from);
  }

  inline DropFunctionRequest& operator=(DropFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const DropFunctionRequest*>(
               &_DropFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  void Swap(DropFunctionRequest* other);
  friend void swap(DropFunctionRequest& a, DropFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropFunctionRequest* New() const final {
    return CreateMaybeMessage<DropFunctionRequest>(NULL);
  }

  DropFunctionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropFunctionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropFunctionRequest& from);
  void MergeFrom(const DropFunctionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional bool if_exists = 2;
  bool has_if_exists() const;
  void clear_if_exists();
  static const int kIfExistsFieldNumber = 2;
  bool if_exists() const;
  void set_if_exists(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.DropFunctionRequest)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_if_exists();
  void clear_has_if_exists();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  bool if_exists_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropFunctionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.DropFunctionResponse) */ {
 public:
  DropFunctionResponse();
  virtual ~DropFunctionResponse();

  DropFunctionResponse(const DropFunctionResponse& from);

  inline DropFunctionResponse& operator=(const DropFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropFunctionResponse(DropFunctionResponse&& from) noexcept
    : DropFunctionResponse() {
    *this = ::std::move(from);
  }

  inline DropFunctionResponse& operator=(DropFunctionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropFunctionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const DropFunctionResponse*>(
               &_DropFunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  void Swap(DropFunctionResponse* other);
  friend void swap(DropFunctionResponse& a, DropFunctionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropFunctionResponse* New() const final {
    return CreateMaybeMessage<DropFunctionResponse>(NULL);
  }

  DropFunctionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropFunctionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropFunctionResponse& from);
  void MergeFrom(const DropFunctionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropFunctionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.DropFunctionResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowFunctionRequest) */ {
 public:
  ShowFunctionRequest();
  virtual ~ShowFunctionRequest();

  ShowFunctionRequest(const ShowFunctionRequest& from);

  inline ShowFunctionRequest& operator=(const ShowFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowFunctionRequest(ShowFunctionRequest&& from) noexcept
    : ShowFunctionRequest() {
    *this = ::std::move(from);
  }

  inline ShowFunctionRequest& operator=(ShowFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const ShowFunctionRequest*>(
               &_ShowFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  void Swap(ShowFunctionRequest* other);
  friend void swap(ShowFunctionRequest& a, ShowFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowFunctionRequest* New() const final {
    return CreateMaybeMessage<ShowFunctionRequest>(NULL);
  }

  ShowFunctionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowFunctionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowFunctionRequest& from);
  void MergeFrom(const ShowFunctionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowFunctionRequest)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowFunctionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.nameserver.ShowFunctionResponse) */ {
 public:
  ShowFunctionResponse();
  virtual ~ShowFunctionResponse();

  ShowFunctionResponse(const ShowFunctionResponse& from);

  inline ShowFunctionResponse& operator=(const ShowFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowFunctionResponse(ShowFunctionResponse&& from) noexcept
    : ShowFunctionResponse() {
    *this = ::std::move(from);
  }

  inline ShowFunctionResponse& operator=(ShowFunctionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowFunctionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const ShowFunctionResponse*>(
               &_ShowFunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  void Swap(ShowFunctionResponse* other);
  friend void swap(ShowFunctionResponse& a, ShowFunctionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowFunctionResponse* New() const final {
    return CreateMaybeMessage<ShowFunctionResponse>(NULL);
  }

  ShowFunctionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowFunctionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowFunctionResponse& from);
  void MergeFrom(const ShowFunctionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowFunctionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.common.ExternalFun fun = 3;
  int fun_size() const;
  void clear_fun();
  static const int kFunFieldNumber = 3;
  ::openmldb::common::ExternalFun* mutable_fun(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ExternalFun >*
      mutable_fun();
  const ::openmldb::common::ExternalFun& fun(int index) const;
  ::openmldb::common::ExternalFun* add_fun();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ExternalFun >&
      fun() const;

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.nameserver.ShowFunctionResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::common::ExternalFun > fun_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_name_5fserver_2eproto::TableStruct;
};
// ===================================================================

class NameServer_Stub;

class NameServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline NameServer() {};
 public:
  virtual ~NameServer();

  typedef NameServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void CreateTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DropTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DropTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowTablet(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowTabletRequest* request,
                       ::openmldb::nameserver::ShowTabletResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowTableRequest* request,
                       ::openmldb::nameserver::ShowTableResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void MakeSnapshotNS(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::MakeSnapshotNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddReplicaNS(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddReplicaNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DelReplicaNS(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DelReplicaNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowOPStatus(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowOPStatusRequest* request,
                       ::openmldb::nameserver::ShowOPStatusResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CancelOP(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CancelOPRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ConfSet(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ConfSetRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ConfGet(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ConfGetRequest* request,
                       ::openmldb::nameserver::ConfGetResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ChangeLeader(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ChangeLeaderRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void OfflineEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::OfflineEndpointRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Migrate(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::MigrateRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RecoverTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::RecoverTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RecoverEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::RecoverEndpointRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ConnectZK(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ConnectZKRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DisConnectZK(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DisConnectZKRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetTablePartition(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SetTablePartitionRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTablePartition(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::GetTablePartitionRequest* request,
                       ::openmldb::nameserver::GetTablePartitionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateTTL(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::UpdateTTLRequest* request,
                       ::openmldb::nameserver::UpdateTTLResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateTableAliveStatus(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::UpdateTableAliveRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddTableField(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddTableFieldRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddReplicaCluster(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ClusterAddress* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowReplicaCluster(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::GeneralRequest* request,
                       ::openmldb::nameserver::ShowReplicaClusterResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveReplicaCluster(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::RemoveReplicaOfRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddReplicaClusterByNs(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ReplicaClusterByNsRequest* request,
                       ::openmldb::nameserver::AddReplicaClusterByNsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RemoveReplicaClusterByNs(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ReplicaClusterByNsRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SwitchMode(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SwitchModeRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetTaskStatus(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::TaskStatusRequest* request,
                       ::openmldb::api::TaskStatusResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteOPTask(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::DeleteTaskRequest* request,
                       ::openmldb::api::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateTableInfo(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateTableInfoRequest* request,
                       ::openmldb::nameserver::CreateTableInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateTableInfoSimply(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateTableInfoRequest* request,
                       ::openmldb::nameserver::CreateTableInfoResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void LoadTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::LoadTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddReplicaNSFromRemote(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddReplicaNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SyncTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SyncTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void AddIndex(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddIndexRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteIndex(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DeleteIndexRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateDatabaseRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UseDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::UseDatabaseRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::GeneralRequest* request,
                       ::openmldb::nameserver::ShowDatabaseResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DropDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DropDatabaseRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void SetSdkEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SetSdkEndpointRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowSdkEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowSdkEndpointRequest* request,
                       ::openmldb::nameserver::ShowSdkEndpointResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowCatalog(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowCatalogRequest* request,
                       ::openmldb::nameserver::ShowCatalogResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void UpdateOfflineTableInfo(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::TableInfo* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateFunctionRequest* request,
                       ::openmldb::nameserver::CreateFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DropFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DropFunctionRequest* request,
                       ::openmldb::nameserver::DropFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowFunctionRequest* request,
                       ::openmldb::nameserver::ShowFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateProcedure(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::CreateProcedureRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DropProcedure(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::DropProcedureRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowProcedure(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::ShowProcedureRequest* request,
                       ::openmldb::api::ShowProcedureResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NameServer);
};

class NameServer_Stub : public NameServer {
 public:
  NameServer_Stub(::google::protobuf::RpcChannel* channel);
  NameServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~NameServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements NameServer ------------------------------------------

  void CreateTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void DropTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DropTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowTablet(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowTabletRequest* request,
                       ::openmldb::nameserver::ShowTabletResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowTableRequest* request,
                       ::openmldb::nameserver::ShowTableResponse* response,
                       ::google::protobuf::Closure* done);
  void MakeSnapshotNS(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::MakeSnapshotNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void AddReplicaNS(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddReplicaNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void DelReplicaNS(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DelReplicaNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowOPStatus(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowOPStatusRequest* request,
                       ::openmldb::nameserver::ShowOPStatusResponse* response,
                       ::google::protobuf::Closure* done);
  void CancelOP(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CancelOPRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ConfSet(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ConfSetRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ConfGet(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ConfGetRequest* request,
                       ::openmldb::nameserver::ConfGetResponse* response,
                       ::google::protobuf::Closure* done);
  void ChangeLeader(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ChangeLeaderRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void OfflineEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::OfflineEndpointRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void Migrate(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::MigrateRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void RecoverTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::RecoverTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void RecoverEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::RecoverEndpointRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ConnectZK(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ConnectZKRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void DisConnectZK(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DisConnectZKRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void SetTablePartition(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SetTablePartitionRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void GetTablePartition(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::GetTablePartitionRequest* request,
                       ::openmldb::nameserver::GetTablePartitionResponse* response,
                       ::google::protobuf::Closure* done);
  void UpdateTTL(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::UpdateTTLRequest* request,
                       ::openmldb::nameserver::UpdateTTLResponse* response,
                       ::google::protobuf::Closure* done);
  void UpdateTableAliveStatus(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::UpdateTableAliveRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void AddTableField(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddTableFieldRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void AddReplicaCluster(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ClusterAddress* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowReplicaCluster(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::GeneralRequest* request,
                       ::openmldb::nameserver::ShowReplicaClusterResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveReplicaCluster(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::RemoveReplicaOfRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void AddReplicaClusterByNs(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ReplicaClusterByNsRequest* request,
                       ::openmldb::nameserver::AddReplicaClusterByNsResponse* response,
                       ::google::protobuf::Closure* done);
  void RemoveReplicaClusterByNs(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ReplicaClusterByNsRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void SwitchMode(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SwitchModeRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void GetTaskStatus(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::TaskStatusRequest* request,
                       ::openmldb::api::TaskStatusResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteOPTask(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::DeleteTaskRequest* request,
                       ::openmldb::api::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateTableInfo(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateTableInfoRequest* request,
                       ::openmldb::nameserver::CreateTableInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateTableInfoSimply(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateTableInfoRequest* request,
                       ::openmldb::nameserver::CreateTableInfoResponse* response,
                       ::google::protobuf::Closure* done);
  void LoadTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::LoadTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void AddReplicaNSFromRemote(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddReplicaNSRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void SyncTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SyncTableRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void AddIndex(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::AddIndexRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteIndex(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DeleteIndexRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateDatabaseRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void UseDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::UseDatabaseRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::GeneralRequest* request,
                       ::openmldb::nameserver::ShowDatabaseResponse* response,
                       ::google::protobuf::Closure* done);
  void DropDatabase(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DropDatabaseRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void SetSdkEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::SetSdkEndpointRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowSdkEndpoint(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowSdkEndpointRequest* request,
                       ::openmldb::nameserver::ShowSdkEndpointResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowCatalog(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowCatalogRequest* request,
                       ::openmldb::nameserver::ShowCatalogResponse* response,
                       ::google::protobuf::Closure* done);
  void UpdateOfflineTableInfo(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::TableInfo* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::CreateFunctionRequest* request,
                       ::openmldb::nameserver::CreateFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  void DropFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::DropFunctionRequest* request,
                       ::openmldb::nameserver::DropFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::nameserver::ShowFunctionRequest* request,
                       ::openmldb::nameserver::ShowFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateProcedure(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::CreateProcedureRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void DropProcedure(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::DropProcedureRequest* request,
                       ::openmldb::nameserver::GeneralResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowProcedure(::google::protobuf::RpcController* controller,
                       const ::openmldb::api::ShowProcedureRequest* request,
                       ::openmldb::api::ShowProcedureResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(NameServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PartitionMeta

// required string endpoint = 1;
inline bool PartitionMeta::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PartitionMeta::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PartitionMeta::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PartitionMeta::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& PartitionMeta::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.endpoint)
  return endpoint_.GetNoArena();
}
inline void PartitionMeta::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.endpoint)
}
#if LANG_CXX11
inline void PartitionMeta::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.PartitionMeta.endpoint)
}
#endif
inline void PartitionMeta::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.PartitionMeta.endpoint)
}
inline void PartitionMeta::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.PartitionMeta.endpoint)
}
inline ::std::string* PartitionMeta::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.PartitionMeta.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionMeta::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.PartitionMeta.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionMeta::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.PartitionMeta.endpoint)
}

// required bool is_leader = 2;
inline bool PartitionMeta::has_is_leader() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PartitionMeta::set_has_is_leader() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PartitionMeta::clear_has_is_leader() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PartitionMeta::clear_is_leader() {
  is_leader_ = false;
  clear_has_is_leader();
}
inline bool PartitionMeta::is_leader() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.is_leader)
  return is_leader_;
}
inline void PartitionMeta::set_is_leader(bool value) {
  set_has_is_leader();
  is_leader_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.is_leader)
}

// optional bool is_alive = 3 [default = true];
inline bool PartitionMeta::has_is_alive() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PartitionMeta::set_has_is_alive() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PartitionMeta::clear_has_is_alive() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PartitionMeta::clear_is_alive() {
  is_alive_ = true;
  clear_has_is_alive();
}
inline bool PartitionMeta::is_alive() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.is_alive)
  return is_alive_;
}
inline void PartitionMeta::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.is_alive)
}

// optional uint64 offset = 4;
inline bool PartitionMeta::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PartitionMeta::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PartitionMeta::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PartitionMeta::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 PartitionMeta::offset() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.offset)
  return offset_;
}
inline void PartitionMeta::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.offset)
}

// optional uint64 record_cnt = 5;
inline bool PartitionMeta::has_record_cnt() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PartitionMeta::set_has_record_cnt() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PartitionMeta::clear_has_record_cnt() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PartitionMeta::clear_record_cnt() {
  record_cnt_ = GOOGLE_ULONGLONG(0);
  clear_has_record_cnt();
}
inline ::google::protobuf::uint64 PartitionMeta::record_cnt() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.record_cnt)
  return record_cnt_;
}
inline void PartitionMeta::set_record_cnt(::google::protobuf::uint64 value) {
  set_has_record_cnt();
  record_cnt_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.record_cnt)
}

// optional uint64 record_byte_size = 6;
inline bool PartitionMeta::has_record_byte_size() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PartitionMeta::set_has_record_byte_size() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PartitionMeta::clear_has_record_byte_size() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PartitionMeta::clear_record_byte_size() {
  record_byte_size_ = GOOGLE_ULONGLONG(0);
  clear_has_record_byte_size();
}
inline ::google::protobuf::uint64 PartitionMeta::record_byte_size() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.record_byte_size)
  return record_byte_size_;
}
inline void PartitionMeta::set_record_byte_size(::google::protobuf::uint64 value) {
  set_has_record_byte_size();
  record_byte_size_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.record_byte_size)
}

// optional bool tablet_has_partition = 7 [default = true];
inline bool PartitionMeta::has_tablet_has_partition() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PartitionMeta::set_has_tablet_has_partition() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PartitionMeta::clear_has_tablet_has_partition() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PartitionMeta::clear_tablet_has_partition() {
  tablet_has_partition_ = true;
  clear_has_tablet_has_partition();
}
inline bool PartitionMeta::tablet_has_partition() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.tablet_has_partition)
  return tablet_has_partition_;
}
inline void PartitionMeta::set_tablet_has_partition(bool value) {
  set_has_tablet_has_partition();
  tablet_has_partition_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.tablet_has_partition)
}

// optional uint64 diskused = 8 [default = 0];
inline bool PartitionMeta::has_diskused() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PartitionMeta::set_has_diskused() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PartitionMeta::clear_has_diskused() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PartitionMeta::clear_diskused() {
  diskused_ = GOOGLE_ULONGLONG(0);
  clear_has_diskused();
}
inline ::google::protobuf::uint64 PartitionMeta::diskused() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.diskused)
  return diskused_;
}
inline void PartitionMeta::set_diskused(::google::protobuf::uint64 value) {
  set_has_diskused();
  diskused_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.diskused)
}

// optional uint32 remote_tid = 9 [default = 4294967295];
inline bool PartitionMeta::has_remote_tid() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PartitionMeta::set_has_remote_tid() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PartitionMeta::clear_has_remote_tid() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PartitionMeta::clear_remote_tid() {
  remote_tid_ = 4294967295u;
  clear_has_remote_tid();
}
inline ::google::protobuf::uint32 PartitionMeta::remote_tid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.remote_tid)
  return remote_tid_;
}
inline void PartitionMeta::set_remote_tid(::google::protobuf::uint32 value) {
  set_has_remote_tid();
  remote_tid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.remote_tid)
}

// optional string alias = 10;
inline bool PartitionMeta::has_alias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PartitionMeta::set_has_alias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PartitionMeta::clear_has_alias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PartitionMeta::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& PartitionMeta::alias() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.PartitionMeta.alias)
  return alias_.GetNoArena();
}
inline void PartitionMeta::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.PartitionMeta.alias)
}
#if LANG_CXX11
inline void PartitionMeta::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.PartitionMeta.alias)
}
#endif
inline void PartitionMeta::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.PartitionMeta.alias)
}
inline void PartitionMeta::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.PartitionMeta.alias)
}
inline ::std::string* PartitionMeta::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.PartitionMeta.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PartitionMeta::release_alias() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.PartitionMeta.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PartitionMeta::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.PartitionMeta.alias)
}

// -------------------------------------------------------------------

// TermPair

// required uint64 term = 1;
inline bool TermPair::has_term() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TermPair::set_has_term() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TermPair::clear_has_term() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TermPair::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 TermPair::term() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TermPair.term)
  return term_;
}
inline void TermPair::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TermPair.term)
}

// required uint64 offset = 2;
inline bool TermPair::has_offset() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TermPair::set_has_offset() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TermPair::clear_has_offset() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TermPair::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 TermPair::offset() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TermPair.offset)
  return offset_;
}
inline void TermPair::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TermPair.offset)
}

// -------------------------------------------------------------------

// TablePartition

// required uint32 pid = 1;
inline bool TablePartition::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TablePartition::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TablePartition::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TablePartition::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 TablePartition::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TablePartition.pid)
  return pid_;
}
inline void TablePartition::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TablePartition.pid)
}

// repeated .openmldb.nameserver.PartitionMeta partition_meta = 2;
inline int TablePartition::partition_meta_size() const {
  return partition_meta_.size();
}
inline void TablePartition::clear_partition_meta() {
  partition_meta_.Clear();
}
inline ::openmldb::nameserver::PartitionMeta* TablePartition::mutable_partition_meta(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TablePartition.partition_meta)
  return partition_meta_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >*
TablePartition::mutable_partition_meta() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TablePartition.partition_meta)
  return &partition_meta_;
}
inline const ::openmldb::nameserver::PartitionMeta& TablePartition::partition_meta(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TablePartition.partition_meta)
  return partition_meta_.Get(index);
}
inline ::openmldb::nameserver::PartitionMeta* TablePartition::add_partition_meta() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TablePartition.partition_meta)
  return partition_meta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >&
TablePartition::partition_meta() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TablePartition.partition_meta)
  return partition_meta_;
}

// repeated .openmldb.nameserver.TermPair term_offset = 3;
inline int TablePartition::term_offset_size() const {
  return term_offset_.size();
}
inline void TablePartition::clear_term_offset() {
  term_offset_.Clear();
}
inline ::openmldb::nameserver::TermPair* TablePartition::mutable_term_offset(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TablePartition.term_offset)
  return term_offset_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TermPair >*
TablePartition::mutable_term_offset() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TablePartition.term_offset)
  return &term_offset_;
}
inline const ::openmldb::nameserver::TermPair& TablePartition::term_offset(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TablePartition.term_offset)
  return term_offset_.Get(index);
}
inline ::openmldb::nameserver::TermPair* TablePartition::add_term_offset() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TablePartition.term_offset)
  return term_offset_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TermPair >&
TablePartition::term_offset() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TablePartition.term_offset)
  return term_offset_;
}

// optional uint64 record_cnt = 4;
inline bool TablePartition::has_record_cnt() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TablePartition::set_has_record_cnt() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TablePartition::clear_has_record_cnt() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TablePartition::clear_record_cnt() {
  record_cnt_ = GOOGLE_ULONGLONG(0);
  clear_has_record_cnt();
}
inline ::google::protobuf::uint64 TablePartition::record_cnt() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TablePartition.record_cnt)
  return record_cnt_;
}
inline void TablePartition::set_record_cnt(::google::protobuf::uint64 value) {
  set_has_record_cnt();
  record_cnt_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TablePartition.record_cnt)
}

// optional uint64 record_byte_size = 5;
inline bool TablePartition::has_record_byte_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TablePartition::set_has_record_byte_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TablePartition::clear_has_record_byte_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TablePartition::clear_record_byte_size() {
  record_byte_size_ = GOOGLE_ULONGLONG(0);
  clear_has_record_byte_size();
}
inline ::google::protobuf::uint64 TablePartition::record_byte_size() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TablePartition.record_byte_size)
  return record_byte_size_;
}
inline void TablePartition::set_record_byte_size(::google::protobuf::uint64 value) {
  set_has_record_byte_size();
  record_byte_size_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TablePartition.record_byte_size)
}

// optional uint64 diskused = 6 [default = 0];
inline bool TablePartition::has_diskused() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TablePartition::set_has_diskused() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TablePartition::clear_has_diskused() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TablePartition::clear_diskused() {
  diskused_ = GOOGLE_ULONGLONG(0);
  clear_has_diskused();
}
inline ::google::protobuf::uint64 TablePartition::diskused() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TablePartition.diskused)
  return diskused_;
}
inline void TablePartition::set_diskused(::google::protobuf::uint64 value) {
  set_has_diskused();
  diskused_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TablePartition.diskused)
}

// repeated .openmldb.nameserver.PartitionMeta remote_partition_meta = 7;
inline int TablePartition::remote_partition_meta_size() const {
  return remote_partition_meta_.size();
}
inline void TablePartition::clear_remote_partition_meta() {
  remote_partition_meta_.Clear();
}
inline ::openmldb::nameserver::PartitionMeta* TablePartition::mutable_remote_partition_meta(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TablePartition.remote_partition_meta)
  return remote_partition_meta_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >*
TablePartition::mutable_remote_partition_meta() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TablePartition.remote_partition_meta)
  return &remote_partition_meta_;
}
inline const ::openmldb::nameserver::PartitionMeta& TablePartition::remote_partition_meta(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TablePartition.remote_partition_meta)
  return remote_partition_meta_.Get(index);
}
inline ::openmldb::nameserver::PartitionMeta* TablePartition::add_remote_partition_meta() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TablePartition.remote_partition_meta)
  return remote_partition_meta_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::PartitionMeta >&
TablePartition::remote_partition_meta() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TablePartition.remote_partition_meta)
  return remote_partition_meta_;
}

// -------------------------------------------------------------------

// UpdateTTLRequest

// optional string name = 1;
inline bool UpdateTTLRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateTTLRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateTTLRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateTTLRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UpdateTTLRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTTLRequest.name)
  return name_.GetNoArena();
}
inline void UpdateTTLRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTTLRequest.name)
}
#if LANG_CXX11
inline void UpdateTTLRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UpdateTTLRequest.name)
}
#endif
inline void UpdateTTLRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UpdateTTLRequest.name)
}
inline void UpdateTTLRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UpdateTTLRequest.name)
}
inline ::std::string* UpdateTTLRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTTLRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTTLRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTTLRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTTLRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTTLRequest.name)
}

// optional string db = 2 [default = ""];
inline bool UpdateTTLRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateTTLRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateTTLRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateTTLRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& UpdateTTLRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTTLRequest.db)
  return db_.GetNoArena();
}
inline void UpdateTTLRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTTLRequest.db)
}
#if LANG_CXX11
inline void UpdateTTLRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UpdateTTLRequest.db)
}
#endif
inline void UpdateTTLRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UpdateTTLRequest.db)
}
inline void UpdateTTLRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UpdateTTLRequest.db)
}
inline ::std::string* UpdateTTLRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTTLRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTTLRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTTLRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTTLRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTTLRequest.db)
}

// optional string index_name = 3;
inline bool UpdateTTLRequest::has_index_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateTTLRequest::set_has_index_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateTTLRequest::clear_has_index_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateTTLRequest::clear_index_name() {
  index_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_index_name();
}
inline const ::std::string& UpdateTTLRequest::index_name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTTLRequest.index_name)
  return index_name_.GetNoArena();
}
inline void UpdateTTLRequest::set_index_name(const ::std::string& value) {
  set_has_index_name();
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTTLRequest.index_name)
}
#if LANG_CXX11
inline void UpdateTTLRequest::set_index_name(::std::string&& value) {
  set_has_index_name();
  index_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UpdateTTLRequest.index_name)
}
#endif
inline void UpdateTTLRequest::set_index_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_index_name();
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UpdateTTLRequest.index_name)
}
inline void UpdateTTLRequest::set_index_name(const char* value, size_t size) {
  set_has_index_name();
  index_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UpdateTTLRequest.index_name)
}
inline ::std::string* UpdateTTLRequest::mutable_index_name() {
  set_has_index_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTTLRequest.index_name)
  return index_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTTLRequest::release_index_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTTLRequest.index_name)
  if (!has_index_name()) {
    return NULL;
  }
  clear_has_index_name();
  return index_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTTLRequest::set_allocated_index_name(::std::string* index_name) {
  if (index_name != NULL) {
    set_has_index_name();
  } else {
    clear_has_index_name();
  }
  index_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), index_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTTLRequest.index_name)
}

// optional .openmldb.common.TTLSt ttl_desc = 4;
inline bool UpdateTTLRequest::has_ttl_desc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateTTLRequest::set_has_ttl_desc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateTTLRequest::clear_has_ttl_desc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::openmldb::common::TTLSt& UpdateTTLRequest::_internal_ttl_desc() const {
  return *ttl_desc_;
}
inline const ::openmldb::common::TTLSt& UpdateTTLRequest::ttl_desc() const {
  const ::openmldb::common::TTLSt* p = ttl_desc_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTTLRequest.ttl_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::common::TTLSt*>(
      &::openmldb::common::_TTLSt_default_instance_);
}
inline ::openmldb::common::TTLSt* UpdateTTLRequest::release_ttl_desc() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTTLRequest.ttl_desc)
  clear_has_ttl_desc();
  ::openmldb::common::TTLSt* temp = ttl_desc_;
  ttl_desc_ = NULL;
  return temp;
}
inline ::openmldb::common::TTLSt* UpdateTTLRequest::mutable_ttl_desc() {
  set_has_ttl_desc();
  if (ttl_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::common::TTLSt>(GetArenaNoVirtual());
    ttl_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTTLRequest.ttl_desc)
  return ttl_desc_;
}
inline void UpdateTTLRequest::set_allocated_ttl_desc(::openmldb::common::TTLSt* ttl_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(ttl_desc_);
  }
  if (ttl_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      ttl_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, ttl_desc, submessage_arena);
    }
    set_has_ttl_desc();
  } else {
    clear_has_ttl_desc();
  }
  ttl_desc_ = ttl_desc;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTTLRequest.ttl_desc)
}

// -------------------------------------------------------------------

// UpdateTTLResponse

// optional int32 code = 1;
inline bool UpdateTTLResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateTTLResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateTTLResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateTTLResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 UpdateTTLResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTTLResponse.code)
  return code_;
}
inline void UpdateTTLResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTTLResponse.code)
}

// optional string msg = 2;
inline bool UpdateTTLResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateTTLResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateTTLResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateTTLResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& UpdateTTLResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTTLResponse.msg)
  return msg_.GetNoArena();
}
inline void UpdateTTLResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTTLResponse.msg)
}
#if LANG_CXX11
inline void UpdateTTLResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UpdateTTLResponse.msg)
}
#endif
inline void UpdateTTLResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UpdateTTLResponse.msg)
}
inline void UpdateTTLResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UpdateTTLResponse.msg)
}
inline ::std::string* UpdateTTLResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTTLResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTTLResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTTLResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTTLResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTTLResponse.msg)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// OfflineTableInfo

// required string path = 1;
inline bool OfflineTableInfo::has_path() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineTableInfo::set_has_path() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineTableInfo::clear_has_path() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineTableInfo::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_path();
}
inline const ::std::string& OfflineTableInfo::path() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OfflineTableInfo.path)
  return path_.GetNoArena();
}
inline void OfflineTableInfo::set_path(const ::std::string& value) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OfflineTableInfo.path)
}
#if LANG_CXX11
inline void OfflineTableInfo::set_path(::std::string&& value) {
  set_has_path();
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OfflineTableInfo.path)
}
#endif
inline void OfflineTableInfo::set_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OfflineTableInfo.path)
}
inline void OfflineTableInfo::set_path(const char* value, size_t size) {
  set_has_path();
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OfflineTableInfo.path)
}
inline ::std::string* OfflineTableInfo::mutable_path() {
  set_has_path();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OfflineTableInfo.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineTableInfo::release_path() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OfflineTableInfo.path)
  if (!has_path()) {
    return NULL;
  }
  clear_has_path();
  return path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineTableInfo::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    set_has_path();
  } else {
    clear_has_path();
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OfflineTableInfo.path)
}

// required string format = 2;
inline bool OfflineTableInfo::has_format() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineTableInfo::set_has_format() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineTableInfo::clear_has_format() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineTableInfo::clear_format() {
  format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_format();
}
inline const ::std::string& OfflineTableInfo::format() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OfflineTableInfo.format)
  return format_.GetNoArena();
}
inline void OfflineTableInfo::set_format(const ::std::string& value) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OfflineTableInfo.format)
}
#if LANG_CXX11
inline void OfflineTableInfo::set_format(::std::string&& value) {
  set_has_format();
  format_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OfflineTableInfo.format)
}
#endif
inline void OfflineTableInfo::set_format(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OfflineTableInfo.format)
}
inline void OfflineTableInfo::set_format(const char* value, size_t size) {
  set_has_format();
  format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OfflineTableInfo.format)
}
inline ::std::string* OfflineTableInfo::mutable_format() {
  set_has_format();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OfflineTableInfo.format)
  return format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineTableInfo::release_format() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OfflineTableInfo.format)
  if (!has_format()) {
    return NULL;
  }
  clear_has_format();
  return format_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineTableInfo::set_allocated_format(::std::string* format) {
  if (format != NULL) {
    set_has_format();
  } else {
    clear_has_format();
  }
  format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OfflineTableInfo.format)
}

// optional bool deep_copy = 3 [default = true];
inline bool OfflineTableInfo::has_deep_copy() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OfflineTableInfo::set_has_deep_copy() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OfflineTableInfo::clear_has_deep_copy() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OfflineTableInfo::clear_deep_copy() {
  deep_copy_ = true;
  clear_has_deep_copy();
}
inline bool OfflineTableInfo::deep_copy() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OfflineTableInfo.deep_copy)
  return deep_copy_;
}
inline void OfflineTableInfo::set_deep_copy(bool value) {
  set_has_deep_copy();
  deep_copy_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OfflineTableInfo.deep_copy)
}

// map<string, string> options = 4;
inline int OfflineTableInfo::options_size() const {
  return options_.size();
}
inline void OfflineTableInfo::clear_options() {
  options_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
OfflineTableInfo::options() const {
  // @@protoc_insertion_point(field_map:openmldb.nameserver.OfflineTableInfo.options)
  return options_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
OfflineTableInfo::mutable_options() {
  // @@protoc_insertion_point(field_mutable_map:openmldb.nameserver.OfflineTableInfo.options)
  return options_.MutableMap();
}

// -------------------------------------------------------------------

// TableInfo

// optional string name = 1;
inline bool TableInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TableInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TableInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TableInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& TableInfo::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.name)
  return name_.GetNoArena();
}
inline void TableInfo::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.name)
}
#if LANG_CXX11
inline void TableInfo::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.TableInfo.name)
}
#endif
inline void TableInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.TableInfo.name)
}
inline void TableInfo::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.TableInfo.name)
}
inline ::std::string* TableInfo::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableInfo::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.TableInfo.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.TableInfo.name)
}

// optional uint32 seg_cnt = 2 [default = 8];
inline bool TableInfo::has_seg_cnt() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TableInfo::set_has_seg_cnt() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TableInfo::clear_has_seg_cnt() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TableInfo::clear_seg_cnt() {
  seg_cnt_ = 8u;
  clear_has_seg_cnt();
}
inline ::google::protobuf::uint32 TableInfo::seg_cnt() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.seg_cnt)
  return seg_cnt_;
}
inline void TableInfo::set_seg_cnt(::google::protobuf::uint32 value) {
  set_has_seg_cnt();
  seg_cnt_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.seg_cnt)
}

// repeated .openmldb.nameserver.TablePartition table_partition = 3;
inline int TableInfo::table_partition_size() const {
  return table_partition_.size();
}
inline void TableInfo::clear_table_partition() {
  table_partition_.Clear();
}
inline ::openmldb::nameserver::TablePartition* TableInfo::mutable_table_partition(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.table_partition)
  return table_partition_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TablePartition >*
TableInfo::mutable_table_partition() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TableInfo.table_partition)
  return &table_partition_;
}
inline const ::openmldb::nameserver::TablePartition& TableInfo::table_partition(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.table_partition)
  return table_partition_.Get(index);
}
inline ::openmldb::nameserver::TablePartition* TableInfo::add_table_partition() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TableInfo.table_partition)
  return table_partition_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TablePartition >&
TableInfo::table_partition() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TableInfo.table_partition)
  return table_partition_;
}

// optional uint32 tid = 4;
inline bool TableInfo::has_tid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TableInfo::set_has_tid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TableInfo::clear_has_tid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TableInfo::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 TableInfo::tid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.tid)
  return tid_;
}
inline void TableInfo::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.tid)
}

// optional uint32 partition_num = 5;
inline bool TableInfo::has_partition_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TableInfo::set_has_partition_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TableInfo::clear_has_partition_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TableInfo::clear_partition_num() {
  partition_num_ = 0u;
  clear_has_partition_num();
}
inline ::google::protobuf::uint32 TableInfo::partition_num() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.partition_num)
  return partition_num_;
}
inline void TableInfo::set_partition_num(::google::protobuf::uint32 value) {
  set_has_partition_num();
  partition_num_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.partition_num)
}

// optional uint32 replica_num = 6;
inline bool TableInfo::has_replica_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TableInfo::set_has_replica_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TableInfo::clear_has_replica_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TableInfo::clear_replica_num() {
  replica_num_ = 0u;
  clear_has_replica_num();
}
inline ::google::protobuf::uint32 TableInfo::replica_num() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.replica_num)
  return replica_num_;
}
inline void TableInfo::set_replica_num(::google::protobuf::uint32 value) {
  set_has_replica_num();
  replica_num_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.replica_num)
}

// optional .openmldb.type.CompressType compress_type = 7 [default = kNoCompress];
inline bool TableInfo::has_compress_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TableInfo::set_has_compress_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TableInfo::clear_has_compress_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TableInfo::clear_compress_type() {
  compress_type_ = 0;
  clear_has_compress_type();
}
inline ::openmldb::type::CompressType TableInfo::compress_type() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.compress_type)
  return static_cast< ::openmldb::type::CompressType >(compress_type_);
}
inline void TableInfo::set_compress_type(::openmldb::type::CompressType value) {
  assert(::openmldb::type::CompressType_IsValid(value));
  set_has_compress_type();
  compress_type_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.compress_type)
}

// optional uint32 key_entry_max_height = 8;
inline bool TableInfo::has_key_entry_max_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TableInfo::set_has_key_entry_max_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TableInfo::clear_has_key_entry_max_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TableInfo::clear_key_entry_max_height() {
  key_entry_max_height_ = 0u;
  clear_has_key_entry_max_height();
}
inline ::google::protobuf::uint32 TableInfo::key_entry_max_height() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.key_entry_max_height)
  return key_entry_max_height_;
}
inline void TableInfo::set_key_entry_max_height(::google::protobuf::uint32 value) {
  set_has_key_entry_max_height();
  key_entry_max_height_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.key_entry_max_height)
}

// repeated .openmldb.common.ColumnDesc column_desc = 9;
inline int TableInfo::column_desc_size() const {
  return column_desc_.size();
}
inline ::openmldb::common::ColumnDesc* TableInfo::mutable_column_desc(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.column_desc)
  return column_desc_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
TableInfo::mutable_column_desc() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TableInfo.column_desc)
  return &column_desc_;
}
inline const ::openmldb::common::ColumnDesc& TableInfo::column_desc(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.column_desc)
  return column_desc_.Get(index);
}
inline ::openmldb::common::ColumnDesc* TableInfo::add_column_desc() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TableInfo.column_desc)
  return column_desc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
TableInfo::column_desc() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TableInfo.column_desc)
  return column_desc_;
}

// repeated .openmldb.common.ColumnKey column_key = 10;
inline int TableInfo::column_key_size() const {
  return column_key_.size();
}
inline ::openmldb::common::ColumnKey* TableInfo::mutable_column_key(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.column_key)
  return column_key_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >*
TableInfo::mutable_column_key() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TableInfo.column_key)
  return &column_key_;
}
inline const ::openmldb::common::ColumnKey& TableInfo::column_key(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.column_key)
  return column_key_.Get(index);
}
inline ::openmldb::common::ColumnKey* TableInfo::add_column_key() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TableInfo.column_key)
  return column_key_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >&
TableInfo::column_key() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TableInfo.column_key)
  return column_key_;
}

// repeated .openmldb.common.ColumnDesc added_column_desc = 11;
inline int TableInfo::added_column_desc_size() const {
  return added_column_desc_.size();
}
inline ::openmldb::common::ColumnDesc* TableInfo::mutable_added_column_desc(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.added_column_desc)
  return added_column_desc_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
TableInfo::mutable_added_column_desc() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TableInfo.added_column_desc)
  return &added_column_desc_;
}
inline const ::openmldb::common::ColumnDesc& TableInfo::added_column_desc(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.added_column_desc)
  return added_column_desc_.Get(index);
}
inline ::openmldb::common::ColumnDesc* TableInfo::add_added_column_desc() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TableInfo.added_column_desc)
  return added_column_desc_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
TableInfo::added_column_desc() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TableInfo.added_column_desc)
  return added_column_desc_;
}

// optional uint32 format_version = 12 [default = 1];
inline bool TableInfo::has_format_version() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TableInfo::set_has_format_version() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TableInfo::clear_has_format_version() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TableInfo::clear_format_version() {
  format_version_ = 1u;
  clear_has_format_version();
}
inline ::google::protobuf::uint32 TableInfo::format_version() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.format_version)
  return format_version_;
}
inline void TableInfo::set_format_version(::google::protobuf::uint32 value) {
  set_has_format_version();
  format_version_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.format_version)
}

// optional string db = 13 [default = ""];
inline bool TableInfo::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TableInfo::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TableInfo::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TableInfo::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& TableInfo::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.db)
  return db_.GetNoArena();
}
inline void TableInfo::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.db)
}
#if LANG_CXX11
inline void TableInfo::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.TableInfo.db)
}
#endif
inline void TableInfo::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.TableInfo.db)
}
inline void TableInfo::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.TableInfo.db)
}
inline ::std::string* TableInfo::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TableInfo::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.TableInfo.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TableInfo::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.TableInfo.db)
}

// repeated string partition_key = 14;
inline int TableInfo::partition_key_size() const {
  return partition_key_.size();
}
inline void TableInfo::clear_partition_key() {
  partition_key_.Clear();
}
inline const ::std::string& TableInfo::partition_key(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.partition_key)
  return partition_key_.Get(index);
}
inline ::std::string* TableInfo::mutable_partition_key(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.partition_key)
  return partition_key_.Mutable(index);
}
inline void TableInfo::set_partition_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.partition_key)
  partition_key_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TableInfo::set_partition_key(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.partition_key)
  partition_key_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TableInfo::set_partition_key(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  partition_key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.TableInfo.partition_key)
}
inline void TableInfo::set_partition_key(int index, const char* value, size_t size) {
  partition_key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.TableInfo.partition_key)
}
inline ::std::string* TableInfo::add_partition_key() {
  // @@protoc_insertion_point(field_add_mutable:openmldb.nameserver.TableInfo.partition_key)
  return partition_key_.Add();
}
inline void TableInfo::add_partition_key(const ::std::string& value) {
  partition_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TableInfo.partition_key)
}
#if LANG_CXX11
inline void TableInfo::add_partition_key(::std::string&& value) {
  partition_key_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TableInfo.partition_key)
}
#endif
inline void TableInfo::add_partition_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  partition_key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openmldb.nameserver.TableInfo.partition_key)
}
inline void TableInfo::add_partition_key(const char* value, size_t size) {
  partition_key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openmldb.nameserver.TableInfo.partition_key)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TableInfo::partition_key() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TableInfo.partition_key)
  return partition_key_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TableInfo::mutable_partition_key() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TableInfo.partition_key)
  return &partition_key_;
}

// repeated .openmldb.common.VersionPair schema_versions = 15;
inline int TableInfo::schema_versions_size() const {
  return schema_versions_.size();
}
inline ::openmldb::common::VersionPair* TableInfo::mutable_schema_versions(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.schema_versions)
  return schema_versions_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::VersionPair >*
TableInfo::mutable_schema_versions() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.TableInfo.schema_versions)
  return &schema_versions_;
}
inline const ::openmldb::common::VersionPair& TableInfo::schema_versions(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.schema_versions)
  return schema_versions_.Get(index);
}
inline ::openmldb::common::VersionPair* TableInfo::add_schema_versions() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.TableInfo.schema_versions)
  return schema_versions_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::VersionPair >&
TableInfo::schema_versions() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.TableInfo.schema_versions)
  return schema_versions_;
}

// optional .openmldb.nameserver.OfflineTableInfo offline_table_info = 16;
inline bool TableInfo::has_offline_table_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TableInfo::set_has_offline_table_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TableInfo::clear_has_offline_table_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TableInfo::clear_offline_table_info() {
  if (offline_table_info_ != NULL) offline_table_info_->Clear();
  clear_has_offline_table_info();
}
inline const ::openmldb::nameserver::OfflineTableInfo& TableInfo::_internal_offline_table_info() const {
  return *offline_table_info_;
}
inline const ::openmldb::nameserver::OfflineTableInfo& TableInfo::offline_table_info() const {
  const ::openmldb::nameserver::OfflineTableInfo* p = offline_table_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.offline_table_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::OfflineTableInfo*>(
      &::openmldb::nameserver::_OfflineTableInfo_default_instance_);
}
inline ::openmldb::nameserver::OfflineTableInfo* TableInfo::release_offline_table_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.TableInfo.offline_table_info)
  clear_has_offline_table_info();
  ::openmldb::nameserver::OfflineTableInfo* temp = offline_table_info_;
  offline_table_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::OfflineTableInfo* TableInfo::mutable_offline_table_info() {
  set_has_offline_table_info();
  if (offline_table_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::OfflineTableInfo>(GetArenaNoVirtual());
    offline_table_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TableInfo.offline_table_info)
  return offline_table_info_;
}
inline void TableInfo::set_allocated_offline_table_info(::openmldb::nameserver::OfflineTableInfo* offline_table_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete offline_table_info_;
  }
  if (offline_table_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      offline_table_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, offline_table_info, submessage_arena);
    }
    set_has_offline_table_info();
  } else {
    clear_has_offline_table_info();
  }
  offline_table_info_ = offline_table_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.TableInfo.offline_table_info)
}

// optional .openmldb.common.StorageMode storage_mode = 17 [default = kMemory];
inline bool TableInfo::has_storage_mode() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TableInfo::set_has_storage_mode() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TableInfo::clear_has_storage_mode() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TableInfo::clear_storage_mode() {
  storage_mode_ = 1;
  clear_has_storage_mode();
}
inline ::openmldb::common::StorageMode TableInfo::storage_mode() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.storage_mode)
  return static_cast< ::openmldb::common::StorageMode >(storage_mode_);
}
inline void TableInfo::set_storage_mode(::openmldb::common::StorageMode value) {
  assert(::openmldb::common::StorageMode_IsValid(value));
  set_has_storage_mode();
  storage_mode_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.storage_mode)
}

// optional uint32 base_table_tid = 18 [default = 0];
inline bool TableInfo::has_base_table_tid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TableInfo::set_has_base_table_tid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TableInfo::clear_has_base_table_tid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TableInfo::clear_base_table_tid() {
  base_table_tid_ = 0u;
  clear_has_base_table_tid();
}
inline ::google::protobuf::uint32 TableInfo::base_table_tid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TableInfo.base_table_tid)
  return base_table_tid_;
}
inline void TableInfo::set_base_table_tid(::google::protobuf::uint32 value) {
  set_has_base_table_tid();
  base_table_tid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TableInfo.base_table_tid)
}

// -------------------------------------------------------------------

// CreateTableRequest

// required .openmldb.nameserver.TableInfo table_info = 1;
inline bool CreateTableRequest::has_table_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTableRequest::set_has_table_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTableRequest::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTableRequest::clear_table_info() {
  if (table_info_ != NULL) table_info_->Clear();
  clear_has_table_info();
}
inline const ::openmldb::nameserver::TableInfo& CreateTableRequest::_internal_table_info() const {
  return *table_info_;
}
inline const ::openmldb::nameserver::TableInfo& CreateTableRequest::table_info() const {
  const ::openmldb::nameserver::TableInfo* p = table_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableRequest.table_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TableInfo*>(
      &::openmldb::nameserver::_TableInfo_default_instance_);
}
inline ::openmldb::nameserver::TableInfo* CreateTableRequest::release_table_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableRequest.table_info)
  clear_has_table_info();
  ::openmldb::nameserver::TableInfo* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TableInfo* CreateTableRequest::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TableInfo>(GetArenaNoVirtual());
    table_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableRequest.table_info)
  return table_info_;
}
inline void CreateTableRequest::set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_info_;
  }
  if (table_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableRequest.table_info)
}

// optional .openmldb.nameserver.ZoneInfo zone_info = 2;
inline bool CreateTableRequest::has_zone_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTableRequest::set_has_zone_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTableRequest::clear_has_zone_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTableRequest::clear_zone_info() {
  if (zone_info_ != NULL) zone_info_->Clear();
  clear_has_zone_info();
}
inline const ::openmldb::nameserver::ZoneInfo& CreateTableRequest::_internal_zone_info() const {
  return *zone_info_;
}
inline const ::openmldb::nameserver::ZoneInfo& CreateTableRequest::zone_info() const {
  const ::openmldb::nameserver::ZoneInfo* p = zone_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableRequest.zone_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::ZoneInfo*>(
      &::openmldb::nameserver::_ZoneInfo_default_instance_);
}
inline ::openmldb::nameserver::ZoneInfo* CreateTableRequest::release_zone_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableRequest.zone_info)
  clear_has_zone_info();
  ::openmldb::nameserver::ZoneInfo* temp = zone_info_;
  zone_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::ZoneInfo* CreateTableRequest::mutable_zone_info() {
  set_has_zone_info();
  if (zone_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::ZoneInfo>(GetArenaNoVirtual());
    zone_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableRequest.zone_info)
  return zone_info_;
}
inline void CreateTableRequest::set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zone_info_;
  }
  if (zone_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zone_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone_info, submessage_arena);
    }
    set_has_zone_info();
  } else {
    clear_has_zone_info();
  }
  zone_info_ = zone_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableRequest.zone_info)
}

// optional .openmldb.api.TaskInfo task_info = 3;
inline bool CreateTableRequest::has_task_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTableRequest::set_has_task_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTableRequest::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::openmldb::api::TaskInfo& CreateTableRequest::_internal_task_info() const {
  return *task_info_;
}
inline const ::openmldb::api::TaskInfo& CreateTableRequest::task_info() const {
  const ::openmldb::api::TaskInfo* p = task_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableRequest.task_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::api::TaskInfo*>(
      &::openmldb::api::_TaskInfo_default_instance_);
}
inline ::openmldb::api::TaskInfo* CreateTableRequest::release_task_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableRequest.task_info)
  clear_has_task_info();
  ::openmldb::api::TaskInfo* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline ::openmldb::api::TaskInfo* CreateTableRequest::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::api::TaskInfo>(GetArenaNoVirtual());
    task_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableRequest.task_info)
  return task_info_;
}
inline void CreateTableRequest::set_allocated_task_info(::openmldb::api::TaskInfo* task_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_info_);
  }
  if (task_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_info, submessage_arena);
    }
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
  task_info_ = task_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableRequest.task_info)
}

// optional bool create_if_not_exist = 4 [default = false];
inline bool CreateTableRequest::has_create_if_not_exist() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateTableRequest::set_has_create_if_not_exist() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateTableRequest::clear_has_create_if_not_exist() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateTableRequest::clear_create_if_not_exist() {
  create_if_not_exist_ = false;
  clear_has_create_if_not_exist();
}
inline bool CreateTableRequest::create_if_not_exist() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableRequest.create_if_not_exist)
  return create_if_not_exist_;
}
inline void CreateTableRequest::set_create_if_not_exist(bool value) {
  set_has_create_if_not_exist();
  create_if_not_exist_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateTableRequest.create_if_not_exist)
}

// -------------------------------------------------------------------

// DropTableRequest

// required string name = 1;
inline bool DropTableRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropTableRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropTableRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DropTableRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropTableRequest.name)
  return name_.GetNoArena();
}
inline void DropTableRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DropTableRequest.name)
}
#if LANG_CXX11
inline void DropTableRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DropTableRequest.name)
}
#endif
inline void DropTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DropTableRequest.name)
}
inline void DropTableRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DropTableRequest.name)
}
inline ::std::string* DropTableRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DropTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DropTableRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DropTableRequest.name)
}

// optional .openmldb.nameserver.ZoneInfo zone_info = 2;
inline bool DropTableRequest::has_zone_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DropTableRequest::set_has_zone_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DropTableRequest::clear_has_zone_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DropTableRequest::clear_zone_info() {
  if (zone_info_ != NULL) zone_info_->Clear();
  clear_has_zone_info();
}
inline const ::openmldb::nameserver::ZoneInfo& DropTableRequest::_internal_zone_info() const {
  return *zone_info_;
}
inline const ::openmldb::nameserver::ZoneInfo& DropTableRequest::zone_info() const {
  const ::openmldb::nameserver::ZoneInfo* p = zone_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropTableRequest.zone_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::ZoneInfo*>(
      &::openmldb::nameserver::_ZoneInfo_default_instance_);
}
inline ::openmldb::nameserver::ZoneInfo* DropTableRequest::release_zone_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DropTableRequest.zone_info)
  clear_has_zone_info();
  ::openmldb::nameserver::ZoneInfo* temp = zone_info_;
  zone_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::ZoneInfo* DropTableRequest::mutable_zone_info() {
  set_has_zone_info();
  if (zone_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::ZoneInfo>(GetArenaNoVirtual());
    zone_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DropTableRequest.zone_info)
  return zone_info_;
}
inline void DropTableRequest::set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zone_info_;
  }
  if (zone_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zone_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone_info, submessage_arena);
    }
    set_has_zone_info();
  } else {
    clear_has_zone_info();
  }
  zone_info_ = zone_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DropTableRequest.zone_info)
}

// optional .openmldb.api.TaskInfo task_info = 3;
inline bool DropTableRequest::has_task_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DropTableRequest::set_has_task_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DropTableRequest::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::openmldb::api::TaskInfo& DropTableRequest::_internal_task_info() const {
  return *task_info_;
}
inline const ::openmldb::api::TaskInfo& DropTableRequest::task_info() const {
  const ::openmldb::api::TaskInfo* p = task_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropTableRequest.task_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::api::TaskInfo*>(
      &::openmldb::api::_TaskInfo_default_instance_);
}
inline ::openmldb::api::TaskInfo* DropTableRequest::release_task_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DropTableRequest.task_info)
  clear_has_task_info();
  ::openmldb::api::TaskInfo* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline ::openmldb::api::TaskInfo* DropTableRequest::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::api::TaskInfo>(GetArenaNoVirtual());
    task_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DropTableRequest.task_info)
  return task_info_;
}
inline void DropTableRequest::set_allocated_task_info(::openmldb::api::TaskInfo* task_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_info_);
  }
  if (task_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_info, submessage_arena);
    }
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
  task_info_ = task_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DropTableRequest.task_info)
}

// optional string db = 4 [default = ""];
inline bool DropTableRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropTableRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropTableRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropTableRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& DropTableRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropTableRequest.db)
  return db_.GetNoArena();
}
inline void DropTableRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DropTableRequest.db)
}
#if LANG_CXX11
inline void DropTableRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DropTableRequest.db)
}
#endif
inline void DropTableRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DropTableRequest.db)
}
inline void DropTableRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DropTableRequest.db)
}
inline ::std::string* DropTableRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DropTableRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropTableRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DropTableRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropTableRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DropTableRequest.db)
}

// -------------------------------------------------------------------

// LoadTableRequest

// optional string name = 1;
inline bool LoadTableRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoadTableRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoadTableRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoadTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& LoadTableRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.LoadTableRequest.name)
  return name_.GetNoArena();
}
inline void LoadTableRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.LoadTableRequest.name)
}
#if LANG_CXX11
inline void LoadTableRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.LoadTableRequest.name)
}
#endif
inline void LoadTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.LoadTableRequest.name)
}
inline void LoadTableRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.LoadTableRequest.name)
}
inline ::std::string* LoadTableRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.LoadTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.LoadTableRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.LoadTableRequest.name)
}

// optional string endpoint = 2;
inline bool LoadTableRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LoadTableRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LoadTableRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LoadTableRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& LoadTableRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.LoadTableRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void LoadTableRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.LoadTableRequest.endpoint)
}
#if LANG_CXX11
inline void LoadTableRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.LoadTableRequest.endpoint)
}
#endif
inline void LoadTableRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.LoadTableRequest.endpoint)
}
inline void LoadTableRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.LoadTableRequest.endpoint)
}
inline ::std::string* LoadTableRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.LoadTableRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadTableRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.LoadTableRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadTableRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.LoadTableRequest.endpoint)
}

// optional uint32 pid = 3;
inline bool LoadTableRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LoadTableRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LoadTableRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LoadTableRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 LoadTableRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.LoadTableRequest.pid)
  return pid_;
}
inline void LoadTableRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.LoadTableRequest.pid)
}

// optional .openmldb.nameserver.ZoneInfo zone_info = 4;
inline bool LoadTableRequest::has_zone_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LoadTableRequest::set_has_zone_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LoadTableRequest::clear_has_zone_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LoadTableRequest::clear_zone_info() {
  if (zone_info_ != NULL) zone_info_->Clear();
  clear_has_zone_info();
}
inline const ::openmldb::nameserver::ZoneInfo& LoadTableRequest::_internal_zone_info() const {
  return *zone_info_;
}
inline const ::openmldb::nameserver::ZoneInfo& LoadTableRequest::zone_info() const {
  const ::openmldb::nameserver::ZoneInfo* p = zone_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.LoadTableRequest.zone_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::ZoneInfo*>(
      &::openmldb::nameserver::_ZoneInfo_default_instance_);
}
inline ::openmldb::nameserver::ZoneInfo* LoadTableRequest::release_zone_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.LoadTableRequest.zone_info)
  clear_has_zone_info();
  ::openmldb::nameserver::ZoneInfo* temp = zone_info_;
  zone_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::ZoneInfo* LoadTableRequest::mutable_zone_info() {
  set_has_zone_info();
  if (zone_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::ZoneInfo>(GetArenaNoVirtual());
    zone_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.LoadTableRequest.zone_info)
  return zone_info_;
}
inline void LoadTableRequest::set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zone_info_;
  }
  if (zone_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zone_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone_info, submessage_arena);
    }
    set_has_zone_info();
  } else {
    clear_has_zone_info();
  }
  zone_info_ = zone_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.LoadTableRequest.zone_info)
}

// optional .openmldb.api.TaskInfo task_info = 5;
inline bool LoadTableRequest::has_task_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LoadTableRequest::set_has_task_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LoadTableRequest::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::openmldb::api::TaskInfo& LoadTableRequest::_internal_task_info() const {
  return *task_info_;
}
inline const ::openmldb::api::TaskInfo& LoadTableRequest::task_info() const {
  const ::openmldb::api::TaskInfo* p = task_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.LoadTableRequest.task_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::api::TaskInfo*>(
      &::openmldb::api::_TaskInfo_default_instance_);
}
inline ::openmldb::api::TaskInfo* LoadTableRequest::release_task_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.LoadTableRequest.task_info)
  clear_has_task_info();
  ::openmldb::api::TaskInfo* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline ::openmldb::api::TaskInfo* LoadTableRequest::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::api::TaskInfo>(GetArenaNoVirtual());
    task_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.LoadTableRequest.task_info)
  return task_info_;
}
inline void LoadTableRequest::set_allocated_task_info(::openmldb::api::TaskInfo* task_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_info_);
  }
  if (task_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_info, submessage_arena);
    }
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
  task_info_ = task_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.LoadTableRequest.task_info)
}

// optional string db = 6 [default = ""];
inline bool LoadTableRequest::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LoadTableRequest::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LoadTableRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LoadTableRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& LoadTableRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.LoadTableRequest.db)
  return db_.GetNoArena();
}
inline void LoadTableRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.LoadTableRequest.db)
}
#if LANG_CXX11
inline void LoadTableRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.LoadTableRequest.db)
}
#endif
inline void LoadTableRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.LoadTableRequest.db)
}
inline void LoadTableRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.LoadTableRequest.db)
}
inline ::std::string* LoadTableRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.LoadTableRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LoadTableRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.LoadTableRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LoadTableRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.LoadTableRequest.db)
}

// -------------------------------------------------------------------

// CreateTableInfoRequest

// optional .openmldb.nameserver.TableInfo table_info = 1;
inline bool CreateTableInfoRequest::has_table_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTableInfoRequest::set_has_table_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTableInfoRequest::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTableInfoRequest::clear_table_info() {
  if (table_info_ != NULL) table_info_->Clear();
  clear_has_table_info();
}
inline const ::openmldb::nameserver::TableInfo& CreateTableInfoRequest::_internal_table_info() const {
  return *table_info_;
}
inline const ::openmldb::nameserver::TableInfo& CreateTableInfoRequest::table_info() const {
  const ::openmldb::nameserver::TableInfo* p = table_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableInfoRequest.table_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TableInfo*>(
      &::openmldb::nameserver::_TableInfo_default_instance_);
}
inline ::openmldb::nameserver::TableInfo* CreateTableInfoRequest::release_table_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableInfoRequest.table_info)
  clear_has_table_info();
  ::openmldb::nameserver::TableInfo* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TableInfo* CreateTableInfoRequest::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TableInfo>(GetArenaNoVirtual());
    table_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableInfoRequest.table_info)
  return table_info_;
}
inline void CreateTableInfoRequest::set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_info_;
  }
  if (table_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableInfoRequest.table_info)
}

// optional .openmldb.nameserver.ZoneInfo zone_info = 2;
inline bool CreateTableInfoRequest::has_zone_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTableInfoRequest::set_has_zone_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTableInfoRequest::clear_has_zone_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTableInfoRequest::clear_zone_info() {
  if (zone_info_ != NULL) zone_info_->Clear();
  clear_has_zone_info();
}
inline const ::openmldb::nameserver::ZoneInfo& CreateTableInfoRequest::_internal_zone_info() const {
  return *zone_info_;
}
inline const ::openmldb::nameserver::ZoneInfo& CreateTableInfoRequest::zone_info() const {
  const ::openmldb::nameserver::ZoneInfo* p = zone_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableInfoRequest.zone_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::ZoneInfo*>(
      &::openmldb::nameserver::_ZoneInfo_default_instance_);
}
inline ::openmldb::nameserver::ZoneInfo* CreateTableInfoRequest::release_zone_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableInfoRequest.zone_info)
  clear_has_zone_info();
  ::openmldb::nameserver::ZoneInfo* temp = zone_info_;
  zone_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::ZoneInfo* CreateTableInfoRequest::mutable_zone_info() {
  set_has_zone_info();
  if (zone_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::ZoneInfo>(GetArenaNoVirtual());
    zone_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableInfoRequest.zone_info)
  return zone_info_;
}
inline void CreateTableInfoRequest::set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zone_info_;
  }
  if (zone_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zone_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone_info, submessage_arena);
    }
    set_has_zone_info();
  } else {
    clear_has_zone_info();
  }
  zone_info_ = zone_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableInfoRequest.zone_info)
}

// -------------------------------------------------------------------

// ShowTableRequest

// optional string name = 1;
inline bool ShowTableRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowTableRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowTableRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ShowTableRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTableRequest.name)
  return name_.GetNoArena();
}
inline void ShowTableRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowTableRequest.name)
}
#if LANG_CXX11
inline void ShowTableRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowTableRequest.name)
}
#endif
inline void ShowTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowTableRequest.name)
}
inline void ShowTableRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowTableRequest.name)
}
inline ::std::string* ShowTableRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowTableRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowTableRequest.name)
}

// optional string db = 2 [default = ""];
inline bool ShowTableRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowTableRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowTableRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowTableRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& ShowTableRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTableRequest.db)
  return db_.GetNoArena();
}
inline void ShowTableRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowTableRequest.db)
}
#if LANG_CXX11
inline void ShowTableRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowTableRequest.db)
}
#endif
inline void ShowTableRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowTableRequest.db)
}
inline void ShowTableRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowTableRequest.db)
}
inline ::std::string* ShowTableRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowTableRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowTableRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowTableRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowTableRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowTableRequest.db)
}

// optional bool show_all = 3 [default = false];
inline bool ShowTableRequest::has_show_all() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShowTableRequest::set_has_show_all() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShowTableRequest::clear_has_show_all() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShowTableRequest::clear_show_all() {
  show_all_ = false;
  clear_has_show_all();
}
inline bool ShowTableRequest::show_all() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTableRequest.show_all)
  return show_all_;
}
inline void ShowTableRequest::set_show_all(bool value) {
  set_has_show_all();
  show_all_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowTableRequest.show_all)
}

// -------------------------------------------------------------------

// ShowTableResponse

// repeated .openmldb.nameserver.TableInfo table_info = 1;
inline int ShowTableResponse::table_info_size() const {
  return table_info_.size();
}
inline void ShowTableResponse::clear_table_info() {
  table_info_.Clear();
}
inline ::openmldb::nameserver::TableInfo* ShowTableResponse::mutable_table_info(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowTableResponse.table_info)
  return table_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >*
ShowTableResponse::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowTableResponse.table_info)
  return &table_info_;
}
inline const ::openmldb::nameserver::TableInfo& ShowTableResponse::table_info(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTableResponse.table_info)
  return table_info_.Get(index);
}
inline ::openmldb::nameserver::TableInfo* ShowTableResponse::add_table_info() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowTableResponse.table_info)
  return table_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >&
ShowTableResponse::table_info() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowTableResponse.table_info)
  return table_info_;
}

// required int32 code = 2;
inline bool ShowTableResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowTableResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowTableResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowTableResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowTableResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTableResponse.code)
  return code_;
}
inline void ShowTableResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowTableResponse.code)
}

// optional string msg = 3;
inline bool ShowTableResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowTableResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowTableResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowTableResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowTableResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTableResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowTableResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowTableResponse.msg)
}
#if LANG_CXX11
inline void ShowTableResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowTableResponse.msg)
}
#endif
inline void ShowTableResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowTableResponse.msg)
}
inline void ShowTableResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowTableResponse.msg)
}
inline ::std::string* ShowTableResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowTableResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowTableResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowTableResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowTableResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowTableResponse.msg)
}

// -------------------------------------------------------------------

// MakeSnapshotNSRequest

// required string name = 1;
inline bool MakeSnapshotNSRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MakeSnapshotNSRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MakeSnapshotNSRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MakeSnapshotNSRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MakeSnapshotNSRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MakeSnapshotNSRequest.name)
  return name_.GetNoArena();
}
inline void MakeSnapshotNSRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MakeSnapshotNSRequest.name)
}
#if LANG_CXX11
inline void MakeSnapshotNSRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MakeSnapshotNSRequest.name)
}
#endif
inline void MakeSnapshotNSRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MakeSnapshotNSRequest.name)
}
inline void MakeSnapshotNSRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MakeSnapshotNSRequest.name)
}
inline ::std::string* MakeSnapshotNSRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MakeSnapshotNSRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MakeSnapshotNSRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MakeSnapshotNSRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MakeSnapshotNSRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MakeSnapshotNSRequest.name)
}

// required uint32 pid = 2;
inline bool MakeSnapshotNSRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MakeSnapshotNSRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MakeSnapshotNSRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MakeSnapshotNSRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 MakeSnapshotNSRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MakeSnapshotNSRequest.pid)
  return pid_;
}
inline void MakeSnapshotNSRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MakeSnapshotNSRequest.pid)
}

// optional uint64 offset = 3;
inline bool MakeSnapshotNSRequest::has_offset() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MakeSnapshotNSRequest::set_has_offset() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MakeSnapshotNSRequest::clear_has_offset() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MakeSnapshotNSRequest::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 MakeSnapshotNSRequest::offset() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MakeSnapshotNSRequest.offset)
  return offset_;
}
inline void MakeSnapshotNSRequest::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MakeSnapshotNSRequest.offset)
}

// optional string db = 4 [default = ""];
inline bool MakeSnapshotNSRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MakeSnapshotNSRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MakeSnapshotNSRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MakeSnapshotNSRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& MakeSnapshotNSRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MakeSnapshotNSRequest.db)
  return db_.GetNoArena();
}
inline void MakeSnapshotNSRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MakeSnapshotNSRequest.db)
}
#if LANG_CXX11
inline void MakeSnapshotNSRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MakeSnapshotNSRequest.db)
}
#endif
inline void MakeSnapshotNSRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MakeSnapshotNSRequest.db)
}
inline void MakeSnapshotNSRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MakeSnapshotNSRequest.db)
}
inline ::std::string* MakeSnapshotNSRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MakeSnapshotNSRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MakeSnapshotNSRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MakeSnapshotNSRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MakeSnapshotNSRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MakeSnapshotNSRequest.db)
}

// -------------------------------------------------------------------

// AddReplicaData

// required string name = 1;
inline bool AddReplicaData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddReplicaData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddReplicaData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddReplicaData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AddReplicaData::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaData.name)
  return name_.GetNoArena();
}
inline void AddReplicaData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaData.name)
}
#if LANG_CXX11
inline void AddReplicaData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaData.name)
}
#endif
inline void AddReplicaData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaData.name)
}
inline void AddReplicaData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaData.name)
}
inline ::std::string* AddReplicaData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaData::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaData.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaData.name)
}

// required uint32 pid = 2;
inline bool AddReplicaData::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddReplicaData::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddReplicaData::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddReplicaData::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 AddReplicaData::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaData.pid)
  return pid_;
}
inline void AddReplicaData::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaData.pid)
}

// optional string endpoint = 3;
inline bool AddReplicaData::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddReplicaData::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddReplicaData::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddReplicaData::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& AddReplicaData::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaData.endpoint)
  return endpoint_.GetNoArena();
}
inline void AddReplicaData::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaData.endpoint)
}
#if LANG_CXX11
inline void AddReplicaData::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaData.endpoint)
}
#endif
inline void AddReplicaData::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaData.endpoint)
}
inline void AddReplicaData::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaData.endpoint)
}
inline ::std::string* AddReplicaData::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaData.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaData::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaData.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaData::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaData.endpoint)
}

// optional uint32 remote_tid = 4;
inline bool AddReplicaData::has_remote_tid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AddReplicaData::set_has_remote_tid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AddReplicaData::clear_has_remote_tid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AddReplicaData::clear_remote_tid() {
  remote_tid_ = 0u;
  clear_has_remote_tid();
}
inline ::google::protobuf::uint32 AddReplicaData::remote_tid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaData.remote_tid)
  return remote_tid_;
}
inline void AddReplicaData::set_remote_tid(::google::protobuf::uint32 value) {
  set_has_remote_tid();
  remote_tid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaData.remote_tid)
}

// optional string alias = 5;
inline bool AddReplicaData::has_alias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddReplicaData::set_has_alias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddReplicaData::clear_has_alias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddReplicaData::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& AddReplicaData::alias() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaData.alias)
  return alias_.GetNoArena();
}
inline void AddReplicaData::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaData.alias)
}
#if LANG_CXX11
inline void AddReplicaData::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaData.alias)
}
#endif
inline void AddReplicaData::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaData.alias)
}
inline void AddReplicaData::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaData.alias)
}
inline ::std::string* AddReplicaData::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaData.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaData::release_alias() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaData.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaData::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaData.alias)
}

// optional .openmldb.nameserver.TablePartition table_partition = 6;
inline bool AddReplicaData::has_table_partition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddReplicaData::set_has_table_partition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddReplicaData::clear_has_table_partition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddReplicaData::clear_table_partition() {
  if (table_partition_ != NULL) table_partition_->Clear();
  clear_has_table_partition();
}
inline const ::openmldb::nameserver::TablePartition& AddReplicaData::_internal_table_partition() const {
  return *table_partition_;
}
inline const ::openmldb::nameserver::TablePartition& AddReplicaData::table_partition() const {
  const ::openmldb::nameserver::TablePartition* p = table_partition_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaData.table_partition)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TablePartition*>(
      &::openmldb::nameserver::_TablePartition_default_instance_);
}
inline ::openmldb::nameserver::TablePartition* AddReplicaData::release_table_partition() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaData.table_partition)
  clear_has_table_partition();
  ::openmldb::nameserver::TablePartition* temp = table_partition_;
  table_partition_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TablePartition* AddReplicaData::mutable_table_partition() {
  set_has_table_partition();
  if (table_partition_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TablePartition>(GetArenaNoVirtual());
    table_partition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaData.table_partition)
  return table_partition_;
}
inline void AddReplicaData::set_allocated_table_partition(::openmldb::nameserver::TablePartition* table_partition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_partition_;
  }
  if (table_partition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_partition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_partition, submessage_arena);
    }
    set_has_table_partition();
  } else {
    clear_has_table_partition();
  }
  table_partition_ = table_partition;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaData.table_partition)
}

// optional string db = 7 [default = ""];
inline bool AddReplicaData::has_db() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddReplicaData::set_has_db() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddReplicaData::clear_has_db() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddReplicaData::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& AddReplicaData::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaData.db)
  return db_.GetNoArena();
}
inline void AddReplicaData::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaData.db)
}
#if LANG_CXX11
inline void AddReplicaData::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaData.db)
}
#endif
inline void AddReplicaData::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaData.db)
}
inline void AddReplicaData::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaData.db)
}
inline ::std::string* AddReplicaData::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaData.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaData::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaData.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaData::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaData.db)
}

// -------------------------------------------------------------------

// AddReplicaNSRequest

// required string name = 1;
inline bool AddReplicaNSRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddReplicaNSRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddReplicaNSRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddReplicaNSRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AddReplicaNSRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.name)
  return name_.GetNoArena();
}
inline void AddReplicaNSRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaNSRequest.name)
}
#if LANG_CXX11
inline void AddReplicaNSRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaNSRequest.name)
}
#endif
inline void AddReplicaNSRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaNSRequest.name)
}
inline void AddReplicaNSRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaNSRequest.name)
}
inline ::std::string* AddReplicaNSRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaNSRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaNSRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaNSRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaNSRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaNSRequest.name)
}

// required uint32 pid = 2;
inline bool AddReplicaNSRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddReplicaNSRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddReplicaNSRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddReplicaNSRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 AddReplicaNSRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.pid)
  return pid_;
}
inline void AddReplicaNSRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaNSRequest.pid)
}

// required string endpoint = 3;
inline bool AddReplicaNSRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddReplicaNSRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddReplicaNSRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddReplicaNSRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& AddReplicaNSRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void AddReplicaNSRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaNSRequest.endpoint)
}
#if LANG_CXX11
inline void AddReplicaNSRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaNSRequest.endpoint)
}
#endif
inline void AddReplicaNSRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaNSRequest.endpoint)
}
inline void AddReplicaNSRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaNSRequest.endpoint)
}
inline ::std::string* AddReplicaNSRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaNSRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaNSRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaNSRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaNSRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaNSRequest.endpoint)
}

// repeated uint32 pid_group = 4;
inline int AddReplicaNSRequest::pid_group_size() const {
  return pid_group_.size();
}
inline void AddReplicaNSRequest::clear_pid_group() {
  pid_group_.Clear();
}
inline ::google::protobuf::uint32 AddReplicaNSRequest::pid_group(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.pid_group)
  return pid_group_.Get(index);
}
inline void AddReplicaNSRequest::set_pid_group(int index, ::google::protobuf::uint32 value) {
  pid_group_.Set(index, value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaNSRequest.pid_group)
}
inline void AddReplicaNSRequest::add_pid_group(::google::protobuf::uint32 value) {
  pid_group_.Add(value);
  // @@protoc_insertion_point(field_add:openmldb.nameserver.AddReplicaNSRequest.pid_group)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
AddReplicaNSRequest::pid_group() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.AddReplicaNSRequest.pid_group)
  return pid_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
AddReplicaNSRequest::mutable_pid_group() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.AddReplicaNSRequest.pid_group)
  return &pid_group_;
}

// repeated string endpoint_group = 5;
inline int AddReplicaNSRequest::endpoint_group_size() const {
  return endpoint_group_.size();
}
inline void AddReplicaNSRequest::clear_endpoint_group() {
  endpoint_group_.Clear();
}
inline const ::std::string& AddReplicaNSRequest::endpoint_group(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
  return endpoint_group_.Get(index);
}
inline ::std::string* AddReplicaNSRequest::mutable_endpoint_group(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
  return endpoint_group_.Mutable(index);
}
inline void AddReplicaNSRequest::set_endpoint_group(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
  endpoint_group_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void AddReplicaNSRequest::set_endpoint_group(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
  endpoint_group_.Mutable(index)->assign(std::move(value));
}
#endif
inline void AddReplicaNSRequest::set_endpoint_group(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  endpoint_group_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
}
inline void AddReplicaNSRequest::set_endpoint_group(int index, const char* value, size_t size) {
  endpoint_group_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
}
inline ::std::string* AddReplicaNSRequest::add_endpoint_group() {
  // @@protoc_insertion_point(field_add_mutable:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
  return endpoint_group_.Add();
}
inline void AddReplicaNSRequest::add_endpoint_group(const ::std::string& value) {
  endpoint_group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
}
#if LANG_CXX11
inline void AddReplicaNSRequest::add_endpoint_group(::std::string&& value) {
  endpoint_group_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
}
#endif
inline void AddReplicaNSRequest::add_endpoint_group(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  endpoint_group_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
}
inline void AddReplicaNSRequest::add_endpoint_group(const char* value, size_t size) {
  endpoint_group_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AddReplicaNSRequest::endpoint_group() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
  return endpoint_group_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AddReplicaNSRequest::mutable_endpoint_group() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.AddReplicaNSRequest.endpoint_group)
  return &endpoint_group_;
}

// optional .openmldb.nameserver.ZoneInfo zone_info = 6;
inline bool AddReplicaNSRequest::has_zone_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddReplicaNSRequest::set_has_zone_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddReplicaNSRequest::clear_has_zone_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddReplicaNSRequest::clear_zone_info() {
  if (zone_info_ != NULL) zone_info_->Clear();
  clear_has_zone_info();
}
inline const ::openmldb::nameserver::ZoneInfo& AddReplicaNSRequest::_internal_zone_info() const {
  return *zone_info_;
}
inline const ::openmldb::nameserver::ZoneInfo& AddReplicaNSRequest::zone_info() const {
  const ::openmldb::nameserver::ZoneInfo* p = zone_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.zone_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::ZoneInfo*>(
      &::openmldb::nameserver::_ZoneInfo_default_instance_);
}
inline ::openmldb::nameserver::ZoneInfo* AddReplicaNSRequest::release_zone_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaNSRequest.zone_info)
  clear_has_zone_info();
  ::openmldb::nameserver::ZoneInfo* temp = zone_info_;
  zone_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::ZoneInfo* AddReplicaNSRequest::mutable_zone_info() {
  set_has_zone_info();
  if (zone_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::ZoneInfo>(GetArenaNoVirtual());
    zone_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaNSRequest.zone_info)
  return zone_info_;
}
inline void AddReplicaNSRequest::set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zone_info_;
  }
  if (zone_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zone_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone_info, submessage_arena);
    }
    set_has_zone_info();
  } else {
    clear_has_zone_info();
  }
  zone_info_ = zone_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaNSRequest.zone_info)
}

// optional .openmldb.api.TaskInfo task_info = 7;
inline bool AddReplicaNSRequest::has_task_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddReplicaNSRequest::set_has_task_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddReplicaNSRequest::clear_has_task_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::openmldb::api::TaskInfo& AddReplicaNSRequest::_internal_task_info() const {
  return *task_info_;
}
inline const ::openmldb::api::TaskInfo& AddReplicaNSRequest::task_info() const {
  const ::openmldb::api::TaskInfo* p = task_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.task_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::api::TaskInfo*>(
      &::openmldb::api::_TaskInfo_default_instance_);
}
inline ::openmldb::api::TaskInfo* AddReplicaNSRequest::release_task_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaNSRequest.task_info)
  clear_has_task_info();
  ::openmldb::api::TaskInfo* temp = task_info_;
  task_info_ = NULL;
  return temp;
}
inline ::openmldb::api::TaskInfo* AddReplicaNSRequest::mutable_task_info() {
  set_has_task_info();
  if (task_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::api::TaskInfo>(GetArenaNoVirtual());
    task_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaNSRequest.task_info)
  return task_info_;
}
inline void AddReplicaNSRequest::set_allocated_task_info(::openmldb::api::TaskInfo* task_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(task_info_);
  }
  if (task_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task_info, submessage_arena);
    }
    set_has_task_info();
  } else {
    clear_has_task_info();
  }
  task_info_ = task_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaNSRequest.task_info)
}

// optional string db = 8 [default = ""];
inline bool AddReplicaNSRequest::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddReplicaNSRequest::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddReplicaNSRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddReplicaNSRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& AddReplicaNSRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaNSRequest.db)
  return db_.GetNoArena();
}
inline void AddReplicaNSRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaNSRequest.db)
}
#if LANG_CXX11
inline void AddReplicaNSRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaNSRequest.db)
}
#endif
inline void AddReplicaNSRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaNSRequest.db)
}
inline void AddReplicaNSRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaNSRequest.db)
}
inline ::std::string* AddReplicaNSRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaNSRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaNSRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaNSRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaNSRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaNSRequest.db)
}

// -------------------------------------------------------------------

// Pair

// required string key = 1;
inline bool Pair::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Pair::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Pair::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Pair::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& Pair::key() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.Pair.key)
  return key_.GetNoArena();
}
inline void Pair::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.Pair.key)
}
#if LANG_CXX11
inline void Pair::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.Pair.key)
}
#endif
inline void Pair::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.Pair.key)
}
inline void Pair::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.Pair.key)
}
inline ::std::string* Pair::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.Pair.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pair::release_key() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.Pair.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pair::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.Pair.key)
}

// required string value = 2;
inline bool Pair::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Pair::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Pair::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Pair::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& Pair::value() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.Pair.value)
  return value_.GetNoArena();
}
inline void Pair::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.Pair.value)
}
#if LANG_CXX11
inline void Pair::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.Pair.value)
}
#endif
inline void Pair::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.Pair.value)
}
inline void Pair::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.Pair.value)
}
inline ::std::string* Pair::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.Pair.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Pair::release_value() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.Pair.value)
  if (!has_value()) {
    return NULL;
  }
  clear_has_value();
  return value_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Pair::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.Pair.value)
}

// -------------------------------------------------------------------

// ConfSetRequest

// required .openmldb.nameserver.Pair conf = 1;
inline bool ConfSetRequest::has_conf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfSetRequest::set_has_conf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfSetRequest::clear_has_conf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfSetRequest::clear_conf() {
  if (conf_ != NULL) conf_->Clear();
  clear_has_conf();
}
inline const ::openmldb::nameserver::Pair& ConfSetRequest::_internal_conf() const {
  return *conf_;
}
inline const ::openmldb::nameserver::Pair& ConfSetRequest::conf() const {
  const ::openmldb::nameserver::Pair* p = conf_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ConfSetRequest.conf)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::Pair*>(
      &::openmldb::nameserver::_Pair_default_instance_);
}
inline ::openmldb::nameserver::Pair* ConfSetRequest::release_conf() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ConfSetRequest.conf)
  clear_has_conf();
  ::openmldb::nameserver::Pair* temp = conf_;
  conf_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::Pair* ConfSetRequest::mutable_conf() {
  set_has_conf();
  if (conf_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::Pair>(GetArenaNoVirtual());
    conf_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ConfSetRequest.conf)
  return conf_;
}
inline void ConfSetRequest::set_allocated_conf(::openmldb::nameserver::Pair* conf) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete conf_;
  }
  if (conf) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      conf = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, conf, submessage_arena);
    }
    set_has_conf();
  } else {
    clear_has_conf();
  }
  conf_ = conf;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ConfSetRequest.conf)
}

// -------------------------------------------------------------------

// ConfGetRequest

// -------------------------------------------------------------------

// ConfGetResponse

// required int32 code = 1;
inline bool ConfGetResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConfGetResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConfGetResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConfGetResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ConfGetResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ConfGetResponse.code)
  return code_;
}
inline void ConfGetResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ConfGetResponse.code)
}

// optional string msg = 2;
inline bool ConfGetResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConfGetResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConfGetResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConfGetResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ConfGetResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ConfGetResponse.msg)
  return msg_.GetNoArena();
}
inline void ConfGetResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ConfGetResponse.msg)
}
#if LANG_CXX11
inline void ConfGetResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ConfGetResponse.msg)
}
#endif
inline void ConfGetResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ConfGetResponse.msg)
}
inline void ConfGetResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ConfGetResponse.msg)
}
inline ::std::string* ConfGetResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ConfGetResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ConfGetResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ConfGetResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ConfGetResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ConfGetResponse.msg)
}

// repeated .openmldb.nameserver.Pair conf = 3;
inline int ConfGetResponse::conf_size() const {
  return conf_.size();
}
inline void ConfGetResponse::clear_conf() {
  conf_.Clear();
}
inline ::openmldb::nameserver::Pair* ConfGetResponse::mutable_conf(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ConfGetResponse.conf)
  return conf_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::Pair >*
ConfGetResponse::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ConfGetResponse.conf)
  return &conf_;
}
inline const ::openmldb::nameserver::Pair& ConfGetResponse::conf(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ConfGetResponse.conf)
  return conf_.Get(index);
}
inline ::openmldb::nameserver::Pair* ConfGetResponse::add_conf() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ConfGetResponse.conf)
  return conf_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::Pair >&
ConfGetResponse::conf() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ConfGetResponse.conf)
  return conf_;
}

// -------------------------------------------------------------------

// ChangeLeaderRequest

// required string name = 1;
inline bool ChangeLeaderRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeLeaderRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeLeaderRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeLeaderRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChangeLeaderRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderRequest.name)
  return name_.GetNoArena();
}
inline void ChangeLeaderRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderRequest.name)
}
#if LANG_CXX11
inline void ChangeLeaderRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ChangeLeaderRequest.name)
}
#endif
inline void ChangeLeaderRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderRequest.name)
}
inline void ChangeLeaderRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderRequest.name)
}
inline ::std::string* ChangeLeaderRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLeaderRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ChangeLeaderRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLeaderRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ChangeLeaderRequest.name)
}

// required uint32 pid = 2;
inline bool ChangeLeaderRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeLeaderRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeLeaderRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeLeaderRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 ChangeLeaderRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderRequest.pid)
  return pid_;
}
inline void ChangeLeaderRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderRequest.pid)
}

// optional string candidate_leader = 3;
inline bool ChangeLeaderRequest::has_candidate_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeLeaderRequest::set_has_candidate_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeLeaderRequest::clear_has_candidate_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeLeaderRequest::clear_candidate_leader() {
  candidate_leader_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_candidate_leader();
}
inline const ::std::string& ChangeLeaderRequest::candidate_leader() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
  return candidate_leader_.GetNoArena();
}
inline void ChangeLeaderRequest::set_candidate_leader(const ::std::string& value) {
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
}
#if LANG_CXX11
inline void ChangeLeaderRequest::set_candidate_leader(::std::string&& value) {
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
}
#endif
inline void ChangeLeaderRequest::set_candidate_leader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
}
inline void ChangeLeaderRequest::set_candidate_leader(const char* value, size_t size) {
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
}
inline ::std::string* ChangeLeaderRequest::mutable_candidate_leader() {
  set_has_candidate_leader();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
  return candidate_leader_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLeaderRequest::release_candidate_leader() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
  if (!has_candidate_leader()) {
    return NULL;
  }
  clear_has_candidate_leader();
  return candidate_leader_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLeaderRequest::set_allocated_candidate_leader(::std::string* candidate_leader) {
  if (candidate_leader != NULL) {
    set_has_candidate_leader();
  } else {
    clear_has_candidate_leader();
  }
  candidate_leader_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_leader);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ChangeLeaderRequest.candidate_leader)
}

// optional string db = 4 [default = ""];
inline bool ChangeLeaderRequest::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeLeaderRequest::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeLeaderRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeLeaderRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& ChangeLeaderRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderRequest.db)
  return db_.GetNoArena();
}
inline void ChangeLeaderRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderRequest.db)
}
#if LANG_CXX11
inline void ChangeLeaderRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ChangeLeaderRequest.db)
}
#endif
inline void ChangeLeaderRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderRequest.db)
}
inline void ChangeLeaderRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderRequest.db)
}
inline ::std::string* ChangeLeaderRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLeaderRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ChangeLeaderRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLeaderRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ChangeLeaderRequest.db)
}

// -------------------------------------------------------------------

// OfflineEndpointRequest

// required string endpoint = 1;
inline bool OfflineEndpointRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OfflineEndpointRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OfflineEndpointRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OfflineEndpointRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& OfflineEndpointRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OfflineEndpointRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void OfflineEndpointRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OfflineEndpointRequest.endpoint)
}
#if LANG_CXX11
inline void OfflineEndpointRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OfflineEndpointRequest.endpoint)
}
#endif
inline void OfflineEndpointRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OfflineEndpointRequest.endpoint)
}
inline void OfflineEndpointRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OfflineEndpointRequest.endpoint)
}
inline ::std::string* OfflineEndpointRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OfflineEndpointRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OfflineEndpointRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OfflineEndpointRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OfflineEndpointRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OfflineEndpointRequest.endpoint)
}

// optional uint32 concurrency = 2;
inline bool OfflineEndpointRequest::has_concurrency() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OfflineEndpointRequest::set_has_concurrency() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OfflineEndpointRequest::clear_has_concurrency() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OfflineEndpointRequest::clear_concurrency() {
  concurrency_ = 0u;
  clear_has_concurrency();
}
inline ::google::protobuf::uint32 OfflineEndpointRequest::concurrency() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OfflineEndpointRequest.concurrency)
  return concurrency_;
}
inline void OfflineEndpointRequest::set_concurrency(::google::protobuf::uint32 value) {
  set_has_concurrency();
  concurrency_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OfflineEndpointRequest.concurrency)
}

// -------------------------------------------------------------------

// RecoverEndpointRequest

// required string endpoint = 1;
inline bool RecoverEndpointRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoverEndpointRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoverEndpointRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoverEndpointRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& RecoverEndpointRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverEndpointRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void RecoverEndpointRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverEndpointRequest.endpoint)
}
#if LANG_CXX11
inline void RecoverEndpointRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.RecoverEndpointRequest.endpoint)
}
#endif
inline void RecoverEndpointRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.RecoverEndpointRequest.endpoint)
}
inline void RecoverEndpointRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.RecoverEndpointRequest.endpoint)
}
inline ::std::string* RecoverEndpointRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.RecoverEndpointRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoverEndpointRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.RecoverEndpointRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverEndpointRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.RecoverEndpointRequest.endpoint)
}

// optional bool need_restore = 2;
inline bool RecoverEndpointRequest::has_need_restore() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoverEndpointRequest::set_has_need_restore() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoverEndpointRequest::clear_has_need_restore() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoverEndpointRequest::clear_need_restore() {
  need_restore_ = false;
  clear_has_need_restore();
}
inline bool RecoverEndpointRequest::need_restore() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverEndpointRequest.need_restore)
  return need_restore_;
}
inline void RecoverEndpointRequest::set_need_restore(bool value) {
  set_has_need_restore();
  need_restore_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverEndpointRequest.need_restore)
}

// optional uint32 concurrency = 3;
inline bool RecoverEndpointRequest::has_concurrency() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecoverEndpointRequest::set_has_concurrency() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecoverEndpointRequest::clear_has_concurrency() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecoverEndpointRequest::clear_concurrency() {
  concurrency_ = 0u;
  clear_has_concurrency();
}
inline ::google::protobuf::uint32 RecoverEndpointRequest::concurrency() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverEndpointRequest.concurrency)
  return concurrency_;
}
inline void RecoverEndpointRequest::set_concurrency(::google::protobuf::uint32 value) {
  set_has_concurrency();
  concurrency_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverEndpointRequest.concurrency)
}

// -------------------------------------------------------------------

// GeneralResponse

// required int32 code = 1;
inline bool GeneralResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeneralResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeneralResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeneralResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GeneralResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GeneralResponse.code)
  return code_;
}
inline void GeneralResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.GeneralResponse.code)
}

// optional string msg = 2;
inline bool GeneralResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& GeneralResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GeneralResponse.msg)
  return msg_.GetNoArena();
}
inline void GeneralResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.GeneralResponse.msg)
}
#if LANG_CXX11
inline void GeneralResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.GeneralResponse.msg)
}
#endif
inline void GeneralResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.GeneralResponse.msg)
}
inline void GeneralResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.GeneralResponse.msg)
}
inline ::std::string* GeneralResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.GeneralResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GeneralResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.GeneralResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GeneralResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.GeneralResponse.msg)
}

// -------------------------------------------------------------------

// CreateTableInfoResponse

// optional .openmldb.nameserver.TableInfo table_info = 1;
inline bool CreateTableInfoResponse::has_table_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTableInfoResponse::set_has_table_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTableInfoResponse::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTableInfoResponse::clear_table_info() {
  if (table_info_ != NULL) table_info_->Clear();
  clear_has_table_info();
}
inline const ::openmldb::nameserver::TableInfo& CreateTableInfoResponse::_internal_table_info() const {
  return *table_info_;
}
inline const ::openmldb::nameserver::TableInfo& CreateTableInfoResponse::table_info() const {
  const ::openmldb::nameserver::TableInfo* p = table_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableInfoResponse.table_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TableInfo*>(
      &::openmldb::nameserver::_TableInfo_default_instance_);
}
inline ::openmldb::nameserver::TableInfo* CreateTableInfoResponse::release_table_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableInfoResponse.table_info)
  clear_has_table_info();
  ::openmldb::nameserver::TableInfo* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TableInfo* CreateTableInfoResponse::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TableInfo>(GetArenaNoVirtual());
    table_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableInfoResponse.table_info)
  return table_info_;
}
inline void CreateTableInfoResponse::set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_info_;
  }
  if (table_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableInfoResponse.table_info)
}

// required int32 code = 2;
inline bool CreateTableInfoResponse::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTableInfoResponse::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTableInfoResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateTableInfoResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 CreateTableInfoResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableInfoResponse.code)
  return code_;
}
inline void CreateTableInfoResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateTableInfoResponse.code)
}

// optional string msg = 3;
inline bool CreateTableInfoResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTableInfoResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTableInfoResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTableInfoResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& CreateTableInfoResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableInfoResponse.msg)
  return msg_.GetNoArena();
}
inline void CreateTableInfoResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateTableInfoResponse.msg)
}
#if LANG_CXX11
inline void CreateTableInfoResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.CreateTableInfoResponse.msg)
}
#endif
inline void CreateTableInfoResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.CreateTableInfoResponse.msg)
}
inline void CreateTableInfoResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.CreateTableInfoResponse.msg)
}
inline ::std::string* CreateTableInfoResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableInfoResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTableInfoResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableInfoResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableInfoResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableInfoResponse.msg)
}

// -------------------------------------------------------------------

// ShowTabletRequest

// -------------------------------------------------------------------

// AddTableFieldRequest

// optional string name = 1;
inline bool AddTableFieldRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddTableFieldRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddTableFieldRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddTableFieldRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AddTableFieldRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddTableFieldRequest.name)
  return name_.GetNoArena();
}
inline void AddTableFieldRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddTableFieldRequest.name)
}
#if LANG_CXX11
inline void AddTableFieldRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddTableFieldRequest.name)
}
#endif
inline void AddTableFieldRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddTableFieldRequest.name)
}
inline void AddTableFieldRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddTableFieldRequest.name)
}
inline ::std::string* AddTableFieldRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddTableFieldRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddTableFieldRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddTableFieldRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddTableFieldRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddTableFieldRequest.name)
}

// optional .openmldb.common.ColumnDesc column_desc = 2;
inline bool AddTableFieldRequest::has_column_desc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddTableFieldRequest::set_has_column_desc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddTableFieldRequest::clear_has_column_desc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::openmldb::common::ColumnDesc& AddTableFieldRequest::_internal_column_desc() const {
  return *column_desc_;
}
inline const ::openmldb::common::ColumnDesc& AddTableFieldRequest::column_desc() const {
  const ::openmldb::common::ColumnDesc* p = column_desc_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddTableFieldRequest.column_desc)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::common::ColumnDesc*>(
      &::openmldb::common::_ColumnDesc_default_instance_);
}
inline ::openmldb::common::ColumnDesc* AddTableFieldRequest::release_column_desc() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddTableFieldRequest.column_desc)
  clear_has_column_desc();
  ::openmldb::common::ColumnDesc* temp = column_desc_;
  column_desc_ = NULL;
  return temp;
}
inline ::openmldb::common::ColumnDesc* AddTableFieldRequest::mutable_column_desc() {
  set_has_column_desc();
  if (column_desc_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::common::ColumnDesc>(GetArenaNoVirtual());
    column_desc_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddTableFieldRequest.column_desc)
  return column_desc_;
}
inline void AddTableFieldRequest::set_allocated_column_desc(::openmldb::common::ColumnDesc* column_desc) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_desc_);
  }
  if (column_desc) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column_desc = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column_desc, submessage_arena);
    }
    set_has_column_desc();
  } else {
    clear_has_column_desc();
  }
  column_desc_ = column_desc;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddTableFieldRequest.column_desc)
}

// optional string db = 3 [default = ""];
inline bool AddTableFieldRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddTableFieldRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddTableFieldRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddTableFieldRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& AddTableFieldRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddTableFieldRequest.db)
  return db_.GetNoArena();
}
inline void AddTableFieldRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddTableFieldRequest.db)
}
#if LANG_CXX11
inline void AddTableFieldRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddTableFieldRequest.db)
}
#endif
inline void AddTableFieldRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddTableFieldRequest.db)
}
inline void AddTableFieldRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddTableFieldRequest.db)
}
inline ::std::string* AddTableFieldRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddTableFieldRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddTableFieldRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddTableFieldRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddTableFieldRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddTableFieldRequest.db)
}

// -------------------------------------------------------------------

// TabletStatus

// optional string endpoint = 1;
inline bool TabletStatus::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TabletStatus::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TabletStatus::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TabletStatus::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& TabletStatus::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TabletStatus.endpoint)
  return endpoint_.GetNoArena();
}
inline void TabletStatus::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TabletStatus.endpoint)
}
#if LANG_CXX11
inline void TabletStatus::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.TabletStatus.endpoint)
}
#endif
inline void TabletStatus::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.TabletStatus.endpoint)
}
inline void TabletStatus::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.TabletStatus.endpoint)
}
inline ::std::string* TabletStatus::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TabletStatus.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabletStatus::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.TabletStatus.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabletStatus::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.TabletStatus.endpoint)
}

// optional string state = 2;
inline bool TabletStatus::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TabletStatus::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TabletStatus::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TabletStatus::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& TabletStatus::state() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TabletStatus.state)
  return state_.GetNoArena();
}
inline void TabletStatus::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TabletStatus.state)
}
#if LANG_CXX11
inline void TabletStatus::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.TabletStatus.state)
}
#endif
inline void TabletStatus::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.TabletStatus.state)
}
inline void TabletStatus::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.TabletStatus.state)
}
inline ::std::string* TabletStatus::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TabletStatus.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabletStatus::release_state() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.TabletStatus.state)
  if (!has_state()) {
    return NULL;
  }
  clear_has_state();
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabletStatus::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.TabletStatus.state)
}

// optional uint64 age = 3;
inline bool TabletStatus::has_age() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TabletStatus::set_has_age() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TabletStatus::clear_has_age() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TabletStatus::clear_age() {
  age_ = GOOGLE_ULONGLONG(0);
  clear_has_age();
}
inline ::google::protobuf::uint64 TabletStatus::age() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TabletStatus.age)
  return age_;
}
inline void TabletStatus::set_age(::google::protobuf::uint64 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TabletStatus.age)
}

// optional string real_endpoint = 4;
inline bool TabletStatus::has_real_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TabletStatus::set_has_real_endpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TabletStatus::clear_has_real_endpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TabletStatus::clear_real_endpoint() {
  real_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_real_endpoint();
}
inline const ::std::string& TabletStatus::real_endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.TabletStatus.real_endpoint)
  return real_endpoint_.GetNoArena();
}
inline void TabletStatus::set_real_endpoint(const ::std::string& value) {
  set_has_real_endpoint();
  real_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.TabletStatus.real_endpoint)
}
#if LANG_CXX11
inline void TabletStatus::set_real_endpoint(::std::string&& value) {
  set_has_real_endpoint();
  real_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.TabletStatus.real_endpoint)
}
#endif
inline void TabletStatus::set_real_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_real_endpoint();
  real_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.TabletStatus.real_endpoint)
}
inline void TabletStatus::set_real_endpoint(const char* value, size_t size) {
  set_has_real_endpoint();
  real_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.TabletStatus.real_endpoint)
}
inline ::std::string* TabletStatus::mutable_real_endpoint() {
  set_has_real_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.TabletStatus.real_endpoint)
  return real_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TabletStatus::release_real_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.TabletStatus.real_endpoint)
  if (!has_real_endpoint()) {
    return NULL;
  }
  clear_has_real_endpoint();
  return real_endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TabletStatus::set_allocated_real_endpoint(::std::string* real_endpoint) {
  if (real_endpoint != NULL) {
    set_has_real_endpoint();
  } else {
    clear_has_real_endpoint();
  }
  real_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), real_endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.TabletStatus.real_endpoint)
}

// -------------------------------------------------------------------

// ShowTabletResponse

// repeated .openmldb.nameserver.TabletStatus tablets = 1;
inline int ShowTabletResponse::tablets_size() const {
  return tablets_.size();
}
inline void ShowTabletResponse::clear_tablets() {
  tablets_.Clear();
}
inline ::openmldb::nameserver::TabletStatus* ShowTabletResponse::mutable_tablets(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowTabletResponse.tablets)
  return tablets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >*
ShowTabletResponse::mutable_tablets() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowTabletResponse.tablets)
  return &tablets_;
}
inline const ::openmldb::nameserver::TabletStatus& ShowTabletResponse::tablets(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTabletResponse.tablets)
  return tablets_.Get(index);
}
inline ::openmldb::nameserver::TabletStatus* ShowTabletResponse::add_tablets() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowTabletResponse.tablets)
  return tablets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >&
ShowTabletResponse::tablets() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowTabletResponse.tablets)
  return tablets_;
}

// optional int32 code = 2;
inline bool ShowTabletResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowTabletResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowTabletResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowTabletResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowTabletResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTabletResponse.code)
  return code_;
}
inline void ShowTabletResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowTabletResponse.code)
}

// optional string msg = 3;
inline bool ShowTabletResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowTabletResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowTabletResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowTabletResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowTabletResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowTabletResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowTabletResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowTabletResponse.msg)
}
#if LANG_CXX11
inline void ShowTabletResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowTabletResponse.msg)
}
#endif
inline void ShowTabletResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowTabletResponse.msg)
}
inline void ShowTabletResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowTabletResponse.msg)
}
inline ::std::string* ShowTabletResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowTabletResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowTabletResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowTabletResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowTabletResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowTabletResponse.msg)
}

// -------------------------------------------------------------------

// RecoverTableRequest

// required string name = 1;
inline bool RecoverTableRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoverTableRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoverTableRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoverTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& RecoverTableRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableRequest.name)
  return name_.GetNoArena();
}
inline void RecoverTableRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableRequest.name)
}
#if LANG_CXX11
inline void RecoverTableRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.RecoverTableRequest.name)
}
#endif
inline void RecoverTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.RecoverTableRequest.name)
}
inline void RecoverTableRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.RecoverTableRequest.name)
}
inline ::std::string* RecoverTableRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.RecoverTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoverTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.RecoverTableRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.RecoverTableRequest.name)
}

// required uint32 pid = 2;
inline bool RecoverTableRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecoverTableRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecoverTableRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecoverTableRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 RecoverTableRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableRequest.pid)
  return pid_;
}
inline void RecoverTableRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableRequest.pid)
}

// required string endpoint = 3;
inline bool RecoverTableRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoverTableRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoverTableRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoverTableRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& RecoverTableRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void RecoverTableRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableRequest.endpoint)
}
#if LANG_CXX11
inline void RecoverTableRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.RecoverTableRequest.endpoint)
}
#endif
inline void RecoverTableRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.RecoverTableRequest.endpoint)
}
inline void RecoverTableRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.RecoverTableRequest.endpoint)
}
inline ::std::string* RecoverTableRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.RecoverTableRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoverTableRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.RecoverTableRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverTableRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.RecoverTableRequest.endpoint)
}

// optional string db = 4 [default = ""];
inline bool RecoverTableRequest::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecoverTableRequest::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecoverTableRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecoverTableRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& RecoverTableRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableRequest.db)
  return db_.GetNoArena();
}
inline void RecoverTableRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableRequest.db)
}
#if LANG_CXX11
inline void RecoverTableRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.RecoverTableRequest.db)
}
#endif
inline void RecoverTableRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.RecoverTableRequest.db)
}
inline void RecoverTableRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.RecoverTableRequest.db)
}
inline ::std::string* RecoverTableRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.RecoverTableRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoverTableRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.RecoverTableRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverTableRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.RecoverTableRequest.db)
}

// -------------------------------------------------------------------

// DelReplicaNSRequest

// required string name = 1;
inline bool DelReplicaNSRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DelReplicaNSRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DelReplicaNSRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DelReplicaNSRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DelReplicaNSRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DelReplicaNSRequest.name)
  return name_.GetNoArena();
}
inline void DelReplicaNSRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DelReplicaNSRequest.name)
}
#if LANG_CXX11
inline void DelReplicaNSRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DelReplicaNSRequest.name)
}
#endif
inline void DelReplicaNSRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DelReplicaNSRequest.name)
}
inline void DelReplicaNSRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DelReplicaNSRequest.name)
}
inline ::std::string* DelReplicaNSRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DelReplicaNSRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelReplicaNSRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DelReplicaNSRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelReplicaNSRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DelReplicaNSRequest.name)
}

// required uint32 pid = 2;
inline bool DelReplicaNSRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DelReplicaNSRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DelReplicaNSRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DelReplicaNSRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 DelReplicaNSRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DelReplicaNSRequest.pid)
  return pid_;
}
inline void DelReplicaNSRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DelReplicaNSRequest.pid)
}

// required string endpoint = 3;
inline bool DelReplicaNSRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DelReplicaNSRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DelReplicaNSRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DelReplicaNSRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& DelReplicaNSRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DelReplicaNSRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void DelReplicaNSRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DelReplicaNSRequest.endpoint)
}
#if LANG_CXX11
inline void DelReplicaNSRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DelReplicaNSRequest.endpoint)
}
#endif
inline void DelReplicaNSRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DelReplicaNSRequest.endpoint)
}
inline void DelReplicaNSRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DelReplicaNSRequest.endpoint)
}
inline ::std::string* DelReplicaNSRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DelReplicaNSRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelReplicaNSRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DelReplicaNSRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelReplicaNSRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DelReplicaNSRequest.endpoint)
}

// repeated uint32 pid_group = 4;
inline int DelReplicaNSRequest::pid_group_size() const {
  return pid_group_.size();
}
inline void DelReplicaNSRequest::clear_pid_group() {
  pid_group_.Clear();
}
inline ::google::protobuf::uint32 DelReplicaNSRequest::pid_group(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DelReplicaNSRequest.pid_group)
  return pid_group_.Get(index);
}
inline void DelReplicaNSRequest::set_pid_group(int index, ::google::protobuf::uint32 value) {
  pid_group_.Set(index, value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DelReplicaNSRequest.pid_group)
}
inline void DelReplicaNSRequest::add_pid_group(::google::protobuf::uint32 value) {
  pid_group_.Add(value);
  // @@protoc_insertion_point(field_add:openmldb.nameserver.DelReplicaNSRequest.pid_group)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
DelReplicaNSRequest::pid_group() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.DelReplicaNSRequest.pid_group)
  return pid_group_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
DelReplicaNSRequest::mutable_pid_group() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.DelReplicaNSRequest.pid_group)
  return &pid_group_;
}

// optional string db = 5 [default = ""];
inline bool DelReplicaNSRequest::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DelReplicaNSRequest::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DelReplicaNSRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DelReplicaNSRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& DelReplicaNSRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DelReplicaNSRequest.db)
  return db_.GetNoArena();
}
inline void DelReplicaNSRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DelReplicaNSRequest.db)
}
#if LANG_CXX11
inline void DelReplicaNSRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DelReplicaNSRequest.db)
}
#endif
inline void DelReplicaNSRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DelReplicaNSRequest.db)
}
inline void DelReplicaNSRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DelReplicaNSRequest.db)
}
inline ::std::string* DelReplicaNSRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DelReplicaNSRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DelReplicaNSRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DelReplicaNSRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DelReplicaNSRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DelReplicaNSRequest.db)
}

// -------------------------------------------------------------------

// MigrateRequest

// required string src_endpoint = 1;
inline bool MigrateRequest::has_src_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MigrateRequest::set_has_src_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MigrateRequest::clear_has_src_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MigrateRequest::clear_src_endpoint() {
  src_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_endpoint();
}
inline const ::std::string& MigrateRequest::src_endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MigrateRequest.src_endpoint)
  return src_endpoint_.GetNoArena();
}
inline void MigrateRequest::set_src_endpoint(const ::std::string& value) {
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MigrateRequest.src_endpoint)
}
#if LANG_CXX11
inline void MigrateRequest::set_src_endpoint(::std::string&& value) {
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MigrateRequest.src_endpoint)
}
#endif
inline void MigrateRequest::set_src_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MigrateRequest.src_endpoint)
}
inline void MigrateRequest::set_src_endpoint(const char* value, size_t size) {
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MigrateRequest.src_endpoint)
}
inline ::std::string* MigrateRequest::mutable_src_endpoint() {
  set_has_src_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MigrateRequest.src_endpoint)
  return src_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MigrateRequest::release_src_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MigrateRequest.src_endpoint)
  if (!has_src_endpoint()) {
    return NULL;
  }
  clear_has_src_endpoint();
  return src_endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MigrateRequest::set_allocated_src_endpoint(::std::string* src_endpoint) {
  if (src_endpoint != NULL) {
    set_has_src_endpoint();
  } else {
    clear_has_src_endpoint();
  }
  src_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MigrateRequest.src_endpoint)
}

// required string name = 2;
inline bool MigrateRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MigrateRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MigrateRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MigrateRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& MigrateRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MigrateRequest.name)
  return name_.GetNoArena();
}
inline void MigrateRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MigrateRequest.name)
}
#if LANG_CXX11
inline void MigrateRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MigrateRequest.name)
}
#endif
inline void MigrateRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MigrateRequest.name)
}
inline void MigrateRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MigrateRequest.name)
}
inline ::std::string* MigrateRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MigrateRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MigrateRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MigrateRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MigrateRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MigrateRequest.name)
}

// repeated uint32 pid = 3;
inline int MigrateRequest::pid_size() const {
  return pid_.size();
}
inline void MigrateRequest::clear_pid() {
  pid_.Clear();
}
inline ::google::protobuf::uint32 MigrateRequest::pid(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MigrateRequest.pid)
  return pid_.Get(index);
}
inline void MigrateRequest::set_pid(int index, ::google::protobuf::uint32 value) {
  pid_.Set(index, value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MigrateRequest.pid)
}
inline void MigrateRequest::add_pid(::google::protobuf::uint32 value) {
  pid_.Add(value);
  // @@protoc_insertion_point(field_add:openmldb.nameserver.MigrateRequest.pid)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
MigrateRequest::pid() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.MigrateRequest.pid)
  return pid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
MigrateRequest::mutable_pid() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.MigrateRequest.pid)
  return &pid_;
}

// required string des_endpoint = 4;
inline bool MigrateRequest::has_des_endpoint() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MigrateRequest::set_has_des_endpoint() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MigrateRequest::clear_has_des_endpoint() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MigrateRequest::clear_des_endpoint() {
  des_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_des_endpoint();
}
inline const ::std::string& MigrateRequest::des_endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MigrateRequest.des_endpoint)
  return des_endpoint_.GetNoArena();
}
inline void MigrateRequest::set_des_endpoint(const ::std::string& value) {
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MigrateRequest.des_endpoint)
}
#if LANG_CXX11
inline void MigrateRequest::set_des_endpoint(::std::string&& value) {
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MigrateRequest.des_endpoint)
}
#endif
inline void MigrateRequest::set_des_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MigrateRequest.des_endpoint)
}
inline void MigrateRequest::set_des_endpoint(const char* value, size_t size) {
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MigrateRequest.des_endpoint)
}
inline ::std::string* MigrateRequest::mutable_des_endpoint() {
  set_has_des_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MigrateRequest.des_endpoint)
  return des_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MigrateRequest::release_des_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MigrateRequest.des_endpoint)
  if (!has_des_endpoint()) {
    return NULL;
  }
  clear_has_des_endpoint();
  return des_endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MigrateRequest::set_allocated_des_endpoint(::std::string* des_endpoint) {
  if (des_endpoint != NULL) {
    set_has_des_endpoint();
  } else {
    clear_has_des_endpoint();
  }
  des_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), des_endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MigrateRequest.des_endpoint)
}

// optional string db = 5 [default = ""];
inline bool MigrateRequest::has_db() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MigrateRequest::set_has_db() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MigrateRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MigrateRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& MigrateRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MigrateRequest.db)
  return db_.GetNoArena();
}
inline void MigrateRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MigrateRequest.db)
}
#if LANG_CXX11
inline void MigrateRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MigrateRequest.db)
}
#endif
inline void MigrateRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MigrateRequest.db)
}
inline void MigrateRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MigrateRequest.db)
}
inline ::std::string* MigrateRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MigrateRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MigrateRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MigrateRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MigrateRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MigrateRequest.db)
}

// -------------------------------------------------------------------

// MigrateInfo

// optional string src_endpoint = 1;
inline bool MigrateInfo::has_src_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MigrateInfo::set_has_src_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MigrateInfo::clear_has_src_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MigrateInfo::clear_src_endpoint() {
  src_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_src_endpoint();
}
inline const ::std::string& MigrateInfo::src_endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MigrateInfo.src_endpoint)
  return src_endpoint_.GetNoArena();
}
inline void MigrateInfo::set_src_endpoint(const ::std::string& value) {
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MigrateInfo.src_endpoint)
}
#if LANG_CXX11
inline void MigrateInfo::set_src_endpoint(::std::string&& value) {
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MigrateInfo.src_endpoint)
}
#endif
inline void MigrateInfo::set_src_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MigrateInfo.src_endpoint)
}
inline void MigrateInfo::set_src_endpoint(const char* value, size_t size) {
  set_has_src_endpoint();
  src_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MigrateInfo.src_endpoint)
}
inline ::std::string* MigrateInfo::mutable_src_endpoint() {
  set_has_src_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MigrateInfo.src_endpoint)
  return src_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MigrateInfo::release_src_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MigrateInfo.src_endpoint)
  if (!has_src_endpoint()) {
    return NULL;
  }
  clear_has_src_endpoint();
  return src_endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MigrateInfo::set_allocated_src_endpoint(::std::string* src_endpoint) {
  if (src_endpoint != NULL) {
    set_has_src_endpoint();
  } else {
    clear_has_src_endpoint();
  }
  src_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), src_endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MigrateInfo.src_endpoint)
}

// optional string des_endpoint = 2;
inline bool MigrateInfo::has_des_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MigrateInfo::set_has_des_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MigrateInfo::clear_has_des_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MigrateInfo::clear_des_endpoint() {
  des_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_des_endpoint();
}
inline const ::std::string& MigrateInfo::des_endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.MigrateInfo.des_endpoint)
  return des_endpoint_.GetNoArena();
}
inline void MigrateInfo::set_des_endpoint(const ::std::string& value) {
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.MigrateInfo.des_endpoint)
}
#if LANG_CXX11
inline void MigrateInfo::set_des_endpoint(::std::string&& value) {
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.MigrateInfo.des_endpoint)
}
#endif
inline void MigrateInfo::set_des_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.MigrateInfo.des_endpoint)
}
inline void MigrateInfo::set_des_endpoint(const char* value, size_t size) {
  set_has_des_endpoint();
  des_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.MigrateInfo.des_endpoint)
}
inline ::std::string* MigrateInfo::mutable_des_endpoint() {
  set_has_des_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.MigrateInfo.des_endpoint)
  return des_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MigrateInfo::release_des_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.MigrateInfo.des_endpoint)
  if (!has_des_endpoint()) {
    return NULL;
  }
  clear_has_des_endpoint();
  return des_endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MigrateInfo::set_allocated_des_endpoint(::std::string* des_endpoint) {
  if (des_endpoint != NULL) {
    set_has_des_endpoint();
  } else {
    clear_has_des_endpoint();
  }
  des_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), des_endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.MigrateInfo.des_endpoint)
}

// -------------------------------------------------------------------

// EndpointStatusData

// optional string endpoint = 1;
inline bool EndpointStatusData::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EndpointStatusData::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EndpointStatusData::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EndpointStatusData::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& EndpointStatusData::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.EndpointStatusData.endpoint)
  return endpoint_.GetNoArena();
}
inline void EndpointStatusData::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.EndpointStatusData.endpoint)
}
#if LANG_CXX11
inline void EndpointStatusData::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.EndpointStatusData.endpoint)
}
#endif
inline void EndpointStatusData::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.EndpointStatusData.endpoint)
}
inline void EndpointStatusData::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.EndpointStatusData.endpoint)
}
inline ::std::string* EndpointStatusData::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.EndpointStatusData.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* EndpointStatusData::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.EndpointStatusData.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void EndpointStatusData::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.EndpointStatusData.endpoint)
}

// optional bool is_leader = 2;
inline bool EndpointStatusData::has_is_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void EndpointStatusData::set_has_is_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void EndpointStatusData::clear_has_is_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void EndpointStatusData::clear_is_leader() {
  is_leader_ = false;
  clear_has_is_leader();
}
inline bool EndpointStatusData::is_leader() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.EndpointStatusData.is_leader)
  return is_leader_;
}
inline void EndpointStatusData::set_is_leader(bool value) {
  set_has_is_leader();
  is_leader_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.EndpointStatusData.is_leader)
}

// optional bool is_alive = 3;
inline bool EndpointStatusData::has_is_alive() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void EndpointStatusData::set_has_is_alive() {
  _has_bits_[0] |= 0x00000004u;
}
inline void EndpointStatusData::clear_has_is_alive() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void EndpointStatusData::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
inline bool EndpointStatusData::is_alive() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.EndpointStatusData.is_alive)
  return is_alive_;
}
inline void EndpointStatusData::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.EndpointStatusData.is_alive)
}

// -------------------------------------------------------------------

// RecoverTableData

// optional string endpoint = 1;
inline bool RecoverTableData::has_endpoint() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RecoverTableData::set_has_endpoint() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RecoverTableData::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RecoverTableData::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& RecoverTableData::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableData.endpoint)
  return endpoint_.GetNoArena();
}
inline void RecoverTableData::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableData.endpoint)
}
#if LANG_CXX11
inline void RecoverTableData::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.RecoverTableData.endpoint)
}
#endif
inline void RecoverTableData::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.RecoverTableData.endpoint)
}
inline void RecoverTableData::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.RecoverTableData.endpoint)
}
inline ::std::string* RecoverTableData::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.RecoverTableData.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RecoverTableData::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.RecoverTableData.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RecoverTableData::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.RecoverTableData.endpoint)
}

// optional uint64 offset_delta = 2;
inline bool RecoverTableData::has_offset_delta() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RecoverTableData::set_has_offset_delta() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RecoverTableData::clear_has_offset_delta() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RecoverTableData::clear_offset_delta() {
  offset_delta_ = GOOGLE_ULONGLONG(0);
  clear_has_offset_delta();
}
inline ::google::protobuf::uint64 RecoverTableData::offset_delta() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableData.offset_delta)
  return offset_delta_;
}
inline void RecoverTableData::set_offset_delta(::google::protobuf::uint64 value) {
  set_has_offset_delta();
  offset_delta_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableData.offset_delta)
}

// optional bool is_leader = 3;
inline bool RecoverTableData::has_is_leader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RecoverTableData::set_has_is_leader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RecoverTableData::clear_has_is_leader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RecoverTableData::clear_is_leader() {
  is_leader_ = false;
  clear_has_is_leader();
}
inline bool RecoverTableData::is_leader() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableData.is_leader)
  return is_leader_;
}
inline void RecoverTableData::set_is_leader(bool value) {
  set_has_is_leader();
  is_leader_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableData.is_leader)
}

// optional uint32 concurrency = 4;
inline bool RecoverTableData::has_concurrency() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RecoverTableData::set_has_concurrency() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RecoverTableData::clear_has_concurrency() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RecoverTableData::clear_concurrency() {
  concurrency_ = 0u;
  clear_has_concurrency();
}
inline ::google::protobuf::uint32 RecoverTableData::concurrency() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RecoverTableData.concurrency)
  return concurrency_;
}
inline void RecoverTableData::set_concurrency(::google::protobuf::uint32 value) {
  set_has_concurrency();
  concurrency_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RecoverTableData.concurrency)
}

// -------------------------------------------------------------------

// CreateTableData

// optional string alias = 1;
inline bool CreateTableData::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTableData::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTableData::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTableData::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& CreateTableData::alias() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableData.alias)
  return alias_.GetNoArena();
}
inline void CreateTableData::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateTableData.alias)
}
#if LANG_CXX11
inline void CreateTableData::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.CreateTableData.alias)
}
#endif
inline void CreateTableData::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.CreateTableData.alias)
}
inline void CreateTableData::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.CreateTableData.alias)
}
inline ::std::string* CreateTableData::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableData.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTableData::release_alias() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableData.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableData::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableData.alias)
}

// optional .openmldb.nameserver.TableInfo table_info = 2;
inline bool CreateTableData::has_table_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTableData::set_has_table_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTableData::clear_has_table_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateTableData::clear_table_info() {
  if (table_info_ != NULL) table_info_->Clear();
  clear_has_table_info();
}
inline const ::openmldb::nameserver::TableInfo& CreateTableData::_internal_table_info() const {
  return *table_info_;
}
inline const ::openmldb::nameserver::TableInfo& CreateTableData::table_info() const {
  const ::openmldb::nameserver::TableInfo* p = table_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableData.table_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TableInfo*>(
      &::openmldb::nameserver::_TableInfo_default_instance_);
}
inline ::openmldb::nameserver::TableInfo* CreateTableData::release_table_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableData.table_info)
  clear_has_table_info();
  ::openmldb::nameserver::TableInfo* temp = table_info_;
  table_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TableInfo* CreateTableData::mutable_table_info() {
  set_has_table_info();
  if (table_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TableInfo>(GetArenaNoVirtual());
    table_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableData.table_info)
  return table_info_;
}
inline void CreateTableData::set_allocated_table_info(::openmldb::nameserver::TableInfo* table_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_info_;
  }
  if (table_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_info, submessage_arena);
    }
    set_has_table_info();
  } else {
    clear_has_table_info();
  }
  table_info_ = table_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableData.table_info)
}

// optional .openmldb.nameserver.TableInfo remote_table_info = 3;
inline bool CreateTableData::has_remote_table_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTableData::set_has_remote_table_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTableData::clear_has_remote_table_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateTableData::clear_remote_table_info() {
  if (remote_table_info_ != NULL) remote_table_info_->Clear();
  clear_has_remote_table_info();
}
inline const ::openmldb::nameserver::TableInfo& CreateTableData::_internal_remote_table_info() const {
  return *remote_table_info_;
}
inline const ::openmldb::nameserver::TableInfo& CreateTableData::remote_table_info() const {
  const ::openmldb::nameserver::TableInfo* p = remote_table_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateTableData.remote_table_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TableInfo*>(
      &::openmldb::nameserver::_TableInfo_default_instance_);
}
inline ::openmldb::nameserver::TableInfo* CreateTableData::release_remote_table_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateTableData.remote_table_info)
  clear_has_remote_table_info();
  ::openmldb::nameserver::TableInfo* temp = remote_table_info_;
  remote_table_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TableInfo* CreateTableData::mutable_remote_table_info() {
  set_has_remote_table_info();
  if (remote_table_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TableInfo>(GetArenaNoVirtual());
    remote_table_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateTableData.remote_table_info)
  return remote_table_info_;
}
inline void CreateTableData::set_allocated_remote_table_info(::openmldb::nameserver::TableInfo* remote_table_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete remote_table_info_;
  }
  if (remote_table_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      remote_table_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, remote_table_info, submessage_arena);
    }
    set_has_remote_table_info();
  } else {
    clear_has_remote_table_info();
  }
  remote_table_info_ = remote_table_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateTableData.remote_table_info)
}

// -------------------------------------------------------------------

// ChangeLeaderData

// optional string name = 1;
inline bool ChangeLeaderData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChangeLeaderData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChangeLeaderData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChangeLeaderData::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ChangeLeaderData::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.name)
  return name_.GetNoArena();
}
inline void ChangeLeaderData::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.name)
}
#if LANG_CXX11
inline void ChangeLeaderData::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ChangeLeaderData.name)
}
#endif
inline void ChangeLeaderData::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderData.name)
}
inline void ChangeLeaderData::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderData.name)
}
inline ::std::string* ChangeLeaderData::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderData.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLeaderData::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ChangeLeaderData.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLeaderData::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ChangeLeaderData.name)
}

// optional uint32 tid = 2;
inline bool ChangeLeaderData::has_tid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ChangeLeaderData::set_has_tid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ChangeLeaderData::clear_has_tid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ChangeLeaderData::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 ChangeLeaderData::tid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.tid)
  return tid_;
}
inline void ChangeLeaderData::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.tid)
}

// optional uint32 pid = 3;
inline bool ChangeLeaderData::has_pid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ChangeLeaderData::set_has_pid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ChangeLeaderData::clear_has_pid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ChangeLeaderData::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 ChangeLeaderData::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.pid)
  return pid_;
}
inline void ChangeLeaderData::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.pid)
}

// optional uint64 term = 4;
inline bool ChangeLeaderData::has_term() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ChangeLeaderData::set_has_term() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ChangeLeaderData::clear_has_term() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ChangeLeaderData::clear_term() {
  term_ = GOOGLE_ULONGLONG(0);
  clear_has_term();
}
inline ::google::protobuf::uint64 ChangeLeaderData::term() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.term)
  return term_;
}
inline void ChangeLeaderData::set_term(::google::protobuf::uint64 value) {
  set_has_term();
  term_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.term)
}

// optional uint64 offset = 5;
inline bool ChangeLeaderData::has_offset() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ChangeLeaderData::set_has_offset() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ChangeLeaderData::clear_has_offset() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ChangeLeaderData::clear_offset() {
  offset_ = GOOGLE_ULONGLONG(0);
  clear_has_offset();
}
inline ::google::protobuf::uint64 ChangeLeaderData::offset() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.offset)
  return offset_;
}
inline void ChangeLeaderData::set_offset(::google::protobuf::uint64 value) {
  set_has_offset();
  offset_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.offset)
}

// optional string leader = 6;
inline bool ChangeLeaderData::has_leader() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChangeLeaderData::set_has_leader() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChangeLeaderData::clear_has_leader() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChangeLeaderData::clear_leader() {
  leader_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_leader();
}
inline const ::std::string& ChangeLeaderData::leader() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.leader)
  return leader_.GetNoArena();
}
inline void ChangeLeaderData::set_leader(const ::std::string& value) {
  set_has_leader();
  leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.leader)
}
#if LANG_CXX11
inline void ChangeLeaderData::set_leader(::std::string&& value) {
  set_has_leader();
  leader_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ChangeLeaderData.leader)
}
#endif
inline void ChangeLeaderData::set_leader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_leader();
  leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderData.leader)
}
inline void ChangeLeaderData::set_leader(const char* value, size_t size) {
  set_has_leader();
  leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderData.leader)
}
inline ::std::string* ChangeLeaderData::mutable_leader() {
  set_has_leader();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderData.leader)
  return leader_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLeaderData::release_leader() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ChangeLeaderData.leader)
  if (!has_leader()) {
    return NULL;
  }
  clear_has_leader();
  return leader_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLeaderData::set_allocated_leader(::std::string* leader) {
  if (leader != NULL) {
    set_has_leader();
  } else {
    clear_has_leader();
  }
  leader_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), leader);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ChangeLeaderData.leader)
}

// repeated string follower = 7;
inline int ChangeLeaderData::follower_size() const {
  return follower_.size();
}
inline void ChangeLeaderData::clear_follower() {
  follower_.Clear();
}
inline const ::std::string& ChangeLeaderData::follower(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.follower)
  return follower_.Get(index);
}
inline ::std::string* ChangeLeaderData::mutable_follower(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderData.follower)
  return follower_.Mutable(index);
}
inline void ChangeLeaderData::set_follower(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.follower)
  follower_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ChangeLeaderData::set_follower(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.follower)
  follower_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ChangeLeaderData::set_follower(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  follower_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderData.follower)
}
inline void ChangeLeaderData::set_follower(int index, const char* value, size_t size) {
  follower_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderData.follower)
}
inline ::std::string* ChangeLeaderData::add_follower() {
  // @@protoc_insertion_point(field_add_mutable:openmldb.nameserver.ChangeLeaderData.follower)
  return follower_.Add();
}
inline void ChangeLeaderData::add_follower(const ::std::string& value) {
  follower_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ChangeLeaderData.follower)
}
#if LANG_CXX11
inline void ChangeLeaderData::add_follower(::std::string&& value) {
  follower_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ChangeLeaderData.follower)
}
#endif
inline void ChangeLeaderData::add_follower(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  follower_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openmldb.nameserver.ChangeLeaderData.follower)
}
inline void ChangeLeaderData::add_follower(const char* value, size_t size) {
  follower_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openmldb.nameserver.ChangeLeaderData.follower)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ChangeLeaderData::follower() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ChangeLeaderData.follower)
  return follower_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ChangeLeaderData::mutable_follower() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ChangeLeaderData.follower)
  return &follower_;
}

// optional string candidate_leader = 8;
inline bool ChangeLeaderData::has_candidate_leader() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ChangeLeaderData::set_has_candidate_leader() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ChangeLeaderData::clear_has_candidate_leader() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ChangeLeaderData::clear_candidate_leader() {
  candidate_leader_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_candidate_leader();
}
inline const ::std::string& ChangeLeaderData::candidate_leader() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.candidate_leader)
  return candidate_leader_.GetNoArena();
}
inline void ChangeLeaderData::set_candidate_leader(const ::std::string& value) {
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.candidate_leader)
}
#if LANG_CXX11
inline void ChangeLeaderData::set_candidate_leader(::std::string&& value) {
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ChangeLeaderData.candidate_leader)
}
#endif
inline void ChangeLeaderData::set_candidate_leader(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderData.candidate_leader)
}
inline void ChangeLeaderData::set_candidate_leader(const char* value, size_t size) {
  set_has_candidate_leader();
  candidate_leader_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderData.candidate_leader)
}
inline ::std::string* ChangeLeaderData::mutable_candidate_leader() {
  set_has_candidate_leader();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderData.candidate_leader)
  return candidate_leader_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLeaderData::release_candidate_leader() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ChangeLeaderData.candidate_leader)
  if (!has_candidate_leader()) {
    return NULL;
  }
  clear_has_candidate_leader();
  return candidate_leader_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLeaderData::set_allocated_candidate_leader(::std::string* candidate_leader) {
  if (candidate_leader != NULL) {
    set_has_candidate_leader();
  } else {
    clear_has_candidate_leader();
  }
  candidate_leader_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), candidate_leader);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ChangeLeaderData.candidate_leader)
}

// repeated .openmldb.common.EndpointAndTid remote_follower = 9;
inline int ChangeLeaderData::remote_follower_size() const {
  return remote_follower_.size();
}
inline ::openmldb::common::EndpointAndTid* ChangeLeaderData::mutable_remote_follower(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderData.remote_follower)
  return remote_follower_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::EndpointAndTid >*
ChangeLeaderData::mutable_remote_follower() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ChangeLeaderData.remote_follower)
  return &remote_follower_;
}
inline const ::openmldb::common::EndpointAndTid& ChangeLeaderData::remote_follower(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.remote_follower)
  return remote_follower_.Get(index);
}
inline ::openmldb::common::EndpointAndTid* ChangeLeaderData::add_remote_follower() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ChangeLeaderData.remote_follower)
  return remote_follower_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::EndpointAndTid >&
ChangeLeaderData::remote_follower() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ChangeLeaderData.remote_follower)
  return remote_follower_;
}

// optional string db = 10 [default = ""];
inline bool ChangeLeaderData::has_db() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ChangeLeaderData::set_has_db() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ChangeLeaderData::clear_has_db() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ChangeLeaderData::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& ChangeLeaderData::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ChangeLeaderData.db)
  return db_.GetNoArena();
}
inline void ChangeLeaderData::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ChangeLeaderData.db)
}
#if LANG_CXX11
inline void ChangeLeaderData::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ChangeLeaderData.db)
}
#endif
inline void ChangeLeaderData::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ChangeLeaderData.db)
}
inline void ChangeLeaderData::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ChangeLeaderData.db)
}
inline ::std::string* ChangeLeaderData::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ChangeLeaderData.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChangeLeaderData::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ChangeLeaderData.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChangeLeaderData::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ChangeLeaderData.db)
}

// -------------------------------------------------------------------

// OPStatus

// required uint64 op_id = 1;
inline bool OPStatus::has_op_id() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OPStatus::set_has_op_id() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OPStatus::clear_has_op_id() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OPStatus::clear_op_id() {
  op_id_ = GOOGLE_ULONGLONG(0);
  clear_has_op_id();
}
inline ::google::protobuf::uint64 OPStatus::op_id() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.op_id)
  return op_id_;
}
inline void OPStatus::set_op_id(::google::protobuf::uint64 value) {
  set_has_op_id();
  op_id_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.op_id)
}

// required string op_type = 2;
inline bool OPStatus::has_op_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OPStatus::set_has_op_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OPStatus::clear_has_op_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OPStatus::clear_op_type() {
  op_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_op_type();
}
inline const ::std::string& OPStatus::op_type() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.op_type)
  return op_type_.GetNoArena();
}
inline void OPStatus::set_op_type(const ::std::string& value) {
  set_has_op_type();
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.op_type)
}
#if LANG_CXX11
inline void OPStatus::set_op_type(::std::string&& value) {
  set_has_op_type();
  op_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OPStatus.op_type)
}
#endif
inline void OPStatus::set_op_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_op_type();
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OPStatus.op_type)
}
inline void OPStatus::set_op_type(const char* value, size_t size) {
  set_has_op_type();
  op_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OPStatus.op_type)
}
inline ::std::string* OPStatus::mutable_op_type() {
  set_has_op_type();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OPStatus.op_type)
  return op_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OPStatus::release_op_type() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OPStatus.op_type)
  if (!has_op_type()) {
    return NULL;
  }
  clear_has_op_type();
  return op_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OPStatus::set_allocated_op_type(::std::string* op_type) {
  if (op_type != NULL) {
    set_has_op_type();
  } else {
    clear_has_op_type();
  }
  op_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), op_type);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OPStatus.op_type)
}

// required string status = 3;
inline bool OPStatus::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OPStatus::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OPStatus::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OPStatus::clear_status() {
  status_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_status();
}
inline const ::std::string& OPStatus::status() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.status)
  return status_.GetNoArena();
}
inline void OPStatus::set_status(const ::std::string& value) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.status)
}
#if LANG_CXX11
inline void OPStatus::set_status(::std::string&& value) {
  set_has_status();
  status_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OPStatus.status)
}
#endif
inline void OPStatus::set_status(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OPStatus.status)
}
inline void OPStatus::set_status(const char* value, size_t size) {
  set_has_status();
  status_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OPStatus.status)
}
inline ::std::string* OPStatus::mutable_status() {
  set_has_status();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OPStatus.status)
  return status_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OPStatus::release_status() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OPStatus.status)
  if (!has_status()) {
    return NULL;
  }
  clear_has_status();
  return status_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OPStatus::set_allocated_status(::std::string* status) {
  if (status != NULL) {
    set_has_status();
  } else {
    clear_has_status();
  }
  status_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), status);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OPStatus.status)
}

// required uint64 start_time = 4;
inline bool OPStatus::has_start_time() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OPStatus::set_has_start_time() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OPStatus::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OPStatus::clear_start_time() {
  start_time_ = GOOGLE_ULONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::uint64 OPStatus::start_time() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.start_time)
  return start_time_;
}
inline void OPStatus::set_start_time(::google::protobuf::uint64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.start_time)
}

// required uint64 end_time = 5;
inline bool OPStatus::has_end_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OPStatus::set_has_end_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OPStatus::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OPStatus::clear_end_time() {
  end_time_ = GOOGLE_ULONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::uint64 OPStatus::end_time() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.end_time)
  return end_time_;
}
inline void OPStatus::set_end_time(::google::protobuf::uint64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.end_time)
}

// required string task_type = 6;
inline bool OPStatus::has_task_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OPStatus::set_has_task_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OPStatus::clear_has_task_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OPStatus::clear_task_type() {
  task_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_task_type();
}
inline const ::std::string& OPStatus::task_type() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.task_type)
  return task_type_.GetNoArena();
}
inline void OPStatus::set_task_type(const ::std::string& value) {
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.task_type)
}
#if LANG_CXX11
inline void OPStatus::set_task_type(::std::string&& value) {
  set_has_task_type();
  task_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OPStatus.task_type)
}
#endif
inline void OPStatus::set_task_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OPStatus.task_type)
}
inline void OPStatus::set_task_type(const char* value, size_t size) {
  set_has_task_type();
  task_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OPStatus.task_type)
}
inline ::std::string* OPStatus::mutable_task_type() {
  set_has_task_type();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OPStatus.task_type)
  return task_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OPStatus::release_task_type() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OPStatus.task_type)
  if (!has_task_type()) {
    return NULL;
  }
  clear_has_task_type();
  return task_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OPStatus::set_allocated_task_type(::std::string* task_type) {
  if (task_type != NULL) {
    set_has_task_type();
  } else {
    clear_has_task_type();
  }
  task_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), task_type);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OPStatus.task_type)
}

// optional string name = 7;
inline bool OPStatus::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OPStatus::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OPStatus::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OPStatus::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& OPStatus::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.name)
  return name_.GetNoArena();
}
inline void OPStatus::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.name)
}
#if LANG_CXX11
inline void OPStatus::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OPStatus.name)
}
#endif
inline void OPStatus::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OPStatus.name)
}
inline void OPStatus::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OPStatus.name)
}
inline ::std::string* OPStatus::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OPStatus.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OPStatus::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OPStatus.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OPStatus::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OPStatus.name)
}

// optional uint32 pid = 8;
inline bool OPStatus::has_pid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OPStatus::set_has_pid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OPStatus::clear_has_pid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OPStatus::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 OPStatus::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.pid)
  return pid_;
}
inline void OPStatus::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.pid)
}

// optional int32 for_replica_cluster = 9 [default = 0];
inline bool OPStatus::has_for_replica_cluster() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OPStatus::set_has_for_replica_cluster() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OPStatus::clear_has_for_replica_cluster() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OPStatus::clear_for_replica_cluster() {
  for_replica_cluster_ = 0;
  clear_has_for_replica_cluster();
}
inline ::google::protobuf::int32 OPStatus::for_replica_cluster() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.for_replica_cluster)
  return for_replica_cluster_;
}
inline void OPStatus::set_for_replica_cluster(::google::protobuf::int32 value) {
  set_has_for_replica_cluster();
  for_replica_cluster_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.for_replica_cluster)
}

// optional string db = 10 [default = ""];
inline bool OPStatus::has_db() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OPStatus::set_has_db() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OPStatus::clear_has_db() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OPStatus::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& OPStatus::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.OPStatus.db)
  return db_.GetNoArena();
}
inline void OPStatus::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.OPStatus.db)
}
#if LANG_CXX11
inline void OPStatus::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.OPStatus.db)
}
#endif
inline void OPStatus::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.OPStatus.db)
}
inline void OPStatus::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.OPStatus.db)
}
inline ::std::string* OPStatus::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.OPStatus.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OPStatus::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.OPStatus.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OPStatus::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.OPStatus.db)
}

// -------------------------------------------------------------------

// GetTablePartitionRequest

// optional string name = 1;
inline bool GetTablePartitionRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablePartitionRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablePartitionRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablePartitionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GetTablePartitionRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GetTablePartitionRequest.name)
  return name_.GetNoArena();
}
inline void GetTablePartitionRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.GetTablePartitionRequest.name)
}
#if LANG_CXX11
inline void GetTablePartitionRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.GetTablePartitionRequest.name)
}
#endif
inline void GetTablePartitionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.GetTablePartitionRequest.name)
}
inline void GetTablePartitionRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.GetTablePartitionRequest.name)
}
inline ::std::string* GetTablePartitionRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.GetTablePartitionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTablePartitionRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.GetTablePartitionRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTablePartitionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.GetTablePartitionRequest.name)
}

// optional uint32 pid = 2;
inline bool GetTablePartitionRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTablePartitionRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTablePartitionRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTablePartitionRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 GetTablePartitionRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GetTablePartitionRequest.pid)
  return pid_;
}
inline void GetTablePartitionRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.GetTablePartitionRequest.pid)
}

// optional string db = 3 [default = ""];
inline bool GetTablePartitionRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTablePartitionRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTablePartitionRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTablePartitionRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& GetTablePartitionRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GetTablePartitionRequest.db)
  return db_.GetNoArena();
}
inline void GetTablePartitionRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.GetTablePartitionRequest.db)
}
#if LANG_CXX11
inline void GetTablePartitionRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.GetTablePartitionRequest.db)
}
#endif
inline void GetTablePartitionRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.GetTablePartitionRequest.db)
}
inline void GetTablePartitionRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.GetTablePartitionRequest.db)
}
inline ::std::string* GetTablePartitionRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.GetTablePartitionRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTablePartitionRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.GetTablePartitionRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTablePartitionRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.GetTablePartitionRequest.db)
}

// -------------------------------------------------------------------

// GetTablePartitionResponse

// optional int32 code = 1;
inline bool GetTablePartitionResponse::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTablePartitionResponse::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTablePartitionResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetTablePartitionResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetTablePartitionResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GetTablePartitionResponse.code)
  return code_;
}
inline void GetTablePartitionResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.GetTablePartitionResponse.code)
}

// optional string msg = 2;
inline bool GetTablePartitionResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablePartitionResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablePartitionResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablePartitionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& GetTablePartitionResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GetTablePartitionResponse.msg)
  return msg_.GetNoArena();
}
inline void GetTablePartitionResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.GetTablePartitionResponse.msg)
}
#if LANG_CXX11
inline void GetTablePartitionResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.GetTablePartitionResponse.msg)
}
#endif
inline void GetTablePartitionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.GetTablePartitionResponse.msg)
}
inline void GetTablePartitionResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.GetTablePartitionResponse.msg)
}
inline ::std::string* GetTablePartitionResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.GetTablePartitionResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTablePartitionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.GetTablePartitionResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTablePartitionResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.GetTablePartitionResponse.msg)
}

// optional .openmldb.nameserver.TablePartition table_partition = 3;
inline bool GetTablePartitionResponse::has_table_partition() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTablePartitionResponse::set_has_table_partition() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTablePartitionResponse::clear_has_table_partition() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTablePartitionResponse::clear_table_partition() {
  if (table_partition_ != NULL) table_partition_->Clear();
  clear_has_table_partition();
}
inline const ::openmldb::nameserver::TablePartition& GetTablePartitionResponse::_internal_table_partition() const {
  return *table_partition_;
}
inline const ::openmldb::nameserver::TablePartition& GetTablePartitionResponse::table_partition() const {
  const ::openmldb::nameserver::TablePartition* p = table_partition_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.GetTablePartitionResponse.table_partition)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TablePartition*>(
      &::openmldb::nameserver::_TablePartition_default_instance_);
}
inline ::openmldb::nameserver::TablePartition* GetTablePartitionResponse::release_table_partition() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.GetTablePartitionResponse.table_partition)
  clear_has_table_partition();
  ::openmldb::nameserver::TablePartition* temp = table_partition_;
  table_partition_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TablePartition* GetTablePartitionResponse::mutable_table_partition() {
  set_has_table_partition();
  if (table_partition_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TablePartition>(GetArenaNoVirtual());
    table_partition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.GetTablePartitionResponse.table_partition)
  return table_partition_;
}
inline void GetTablePartitionResponse::set_allocated_table_partition(::openmldb::nameserver::TablePartition* table_partition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_partition_;
  }
  if (table_partition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_partition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_partition, submessage_arena);
    }
    set_has_table_partition();
  } else {
    clear_has_table_partition();
  }
  table_partition_ = table_partition;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.GetTablePartitionResponse.table_partition)
}

// -------------------------------------------------------------------

// SetTablePartitionRequest

// optional string name = 1;
inline bool SetTablePartitionRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetTablePartitionRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetTablePartitionRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetTablePartitionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SetTablePartitionRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SetTablePartitionRequest.name)
  return name_.GetNoArena();
}
inline void SetTablePartitionRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SetTablePartitionRequest.name)
}
#if LANG_CXX11
inline void SetTablePartitionRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.SetTablePartitionRequest.name)
}
#endif
inline void SetTablePartitionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.SetTablePartitionRequest.name)
}
inline void SetTablePartitionRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.SetTablePartitionRequest.name)
}
inline ::std::string* SetTablePartitionRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SetTablePartitionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTablePartitionRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SetTablePartitionRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTablePartitionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SetTablePartitionRequest.name)
}

// optional .openmldb.nameserver.TablePartition table_partition = 2;
inline bool SetTablePartitionRequest::has_table_partition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SetTablePartitionRequest::set_has_table_partition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SetTablePartitionRequest::clear_has_table_partition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SetTablePartitionRequest::clear_table_partition() {
  if (table_partition_ != NULL) table_partition_->Clear();
  clear_has_table_partition();
}
inline const ::openmldb::nameserver::TablePartition& SetTablePartitionRequest::_internal_table_partition() const {
  return *table_partition_;
}
inline const ::openmldb::nameserver::TablePartition& SetTablePartitionRequest::table_partition() const {
  const ::openmldb::nameserver::TablePartition* p = table_partition_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SetTablePartitionRequest.table_partition)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::TablePartition*>(
      &::openmldb::nameserver::_TablePartition_default_instance_);
}
inline ::openmldb::nameserver::TablePartition* SetTablePartitionRequest::release_table_partition() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SetTablePartitionRequest.table_partition)
  clear_has_table_partition();
  ::openmldb::nameserver::TablePartition* temp = table_partition_;
  table_partition_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::TablePartition* SetTablePartitionRequest::mutable_table_partition() {
  set_has_table_partition();
  if (table_partition_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::TablePartition>(GetArenaNoVirtual());
    table_partition_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SetTablePartitionRequest.table_partition)
  return table_partition_;
}
inline void SetTablePartitionRequest::set_allocated_table_partition(::openmldb::nameserver::TablePartition* table_partition) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete table_partition_;
  }
  if (table_partition) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table_partition = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table_partition, submessage_arena);
    }
    set_has_table_partition();
  } else {
    clear_has_table_partition();
  }
  table_partition_ = table_partition;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SetTablePartitionRequest.table_partition)
}

// optional string db = 3 [default = ""];
inline bool SetTablePartitionRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetTablePartitionRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetTablePartitionRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetTablePartitionRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& SetTablePartitionRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SetTablePartitionRequest.db)
  return db_.GetNoArena();
}
inline void SetTablePartitionRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SetTablePartitionRequest.db)
}
#if LANG_CXX11
inline void SetTablePartitionRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.SetTablePartitionRequest.db)
}
#endif
inline void SetTablePartitionRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.SetTablePartitionRequest.db)
}
inline void SetTablePartitionRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.SetTablePartitionRequest.db)
}
inline ::std::string* SetTablePartitionRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SetTablePartitionRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetTablePartitionRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SetTablePartitionRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetTablePartitionRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SetTablePartitionRequest.db)
}

// -------------------------------------------------------------------

// UpdateTableAliveRequest

// optional string name = 1;
inline bool UpdateTableAliveRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateTableAliveRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateTableAliveRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateTableAliveRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& UpdateTableAliveRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTableAliveRequest.name)
  return name_.GetNoArena();
}
inline void UpdateTableAliveRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTableAliveRequest.name)
}
#if LANG_CXX11
inline void UpdateTableAliveRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UpdateTableAliveRequest.name)
}
#endif
inline void UpdateTableAliveRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UpdateTableAliveRequest.name)
}
inline void UpdateTableAliveRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UpdateTableAliveRequest.name)
}
inline ::std::string* UpdateTableAliveRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTableAliveRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTableAliveRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTableAliveRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTableAliveRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTableAliveRequest.name)
}

// optional string endpoint = 2;
inline bool UpdateTableAliveRequest::has_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateTableAliveRequest::set_has_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateTableAliveRequest::clear_has_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateTableAliveRequest::clear_endpoint() {
  endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_endpoint();
}
inline const ::std::string& UpdateTableAliveRequest::endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
  return endpoint_.GetNoArena();
}
inline void UpdateTableAliveRequest::set_endpoint(const ::std::string& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
}
#if LANG_CXX11
inline void UpdateTableAliveRequest::set_endpoint(::std::string&& value) {
  set_has_endpoint();
  endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
}
#endif
inline void UpdateTableAliveRequest::set_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
}
inline void UpdateTableAliveRequest::set_endpoint(const char* value, size_t size) {
  set_has_endpoint();
  endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
}
inline ::std::string* UpdateTableAliveRequest::mutable_endpoint() {
  set_has_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
  return endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTableAliveRequest::release_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
  if (!has_endpoint()) {
    return NULL;
  }
  clear_has_endpoint();
  return endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTableAliveRequest::set_allocated_endpoint(::std::string* endpoint) {
  if (endpoint != NULL) {
    set_has_endpoint();
  } else {
    clear_has_endpoint();
  }
  endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTableAliveRequest.endpoint)
}

// optional uint32 pid = 3;
inline bool UpdateTableAliveRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpdateTableAliveRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpdateTableAliveRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpdateTableAliveRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 UpdateTableAliveRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTableAliveRequest.pid)
  return pid_;
}
inline void UpdateTableAliveRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTableAliveRequest.pid)
}

// optional bool is_alive = 4;
inline bool UpdateTableAliveRequest::has_is_alive() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UpdateTableAliveRequest::set_has_is_alive() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UpdateTableAliveRequest::clear_has_is_alive() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UpdateTableAliveRequest::clear_is_alive() {
  is_alive_ = false;
  clear_has_is_alive();
}
inline bool UpdateTableAliveRequest::is_alive() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTableAliveRequest.is_alive)
  return is_alive_;
}
inline void UpdateTableAliveRequest::set_is_alive(bool value) {
  set_has_is_alive();
  is_alive_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTableAliveRequest.is_alive)
}

// optional string db = 5 [default = ""];
inline bool UpdateTableAliveRequest::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpdateTableAliveRequest::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpdateTableAliveRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpdateTableAliveRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& UpdateTableAliveRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UpdateTableAliveRequest.db)
  return db_.GetNoArena();
}
inline void UpdateTableAliveRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UpdateTableAliveRequest.db)
}
#if LANG_CXX11
inline void UpdateTableAliveRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UpdateTableAliveRequest.db)
}
#endif
inline void UpdateTableAliveRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UpdateTableAliveRequest.db)
}
inline void UpdateTableAliveRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UpdateTableAliveRequest.db)
}
inline ::std::string* UpdateTableAliveRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UpdateTableAliveRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UpdateTableAliveRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UpdateTableAliveRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UpdateTableAliveRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UpdateTableAliveRequest.db)
}

// -------------------------------------------------------------------

// ShowOPStatusRequest

// optional string name = 1;
inline bool ShowOPStatusRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowOPStatusRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowOPStatusRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowOPStatusRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ShowOPStatusRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowOPStatusRequest.name)
  return name_.GetNoArena();
}
inline void ShowOPStatusRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowOPStatusRequest.name)
}
#if LANG_CXX11
inline void ShowOPStatusRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowOPStatusRequest.name)
}
#endif
inline void ShowOPStatusRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowOPStatusRequest.name)
}
inline void ShowOPStatusRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowOPStatusRequest.name)
}
inline ::std::string* ShowOPStatusRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowOPStatusRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowOPStatusRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowOPStatusRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowOPStatusRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowOPStatusRequest.name)
}

// optional uint32 pid = 2;
inline bool ShowOPStatusRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShowOPStatusRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShowOPStatusRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShowOPStatusRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 ShowOPStatusRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowOPStatusRequest.pid)
  return pid_;
}
inline void ShowOPStatusRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowOPStatusRequest.pid)
}

// optional string db = 3;
inline bool ShowOPStatusRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowOPStatusRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowOPStatusRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowOPStatusRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& ShowOPStatusRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowOPStatusRequest.db)
  return db_.GetNoArena();
}
inline void ShowOPStatusRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowOPStatusRequest.db)
}
#if LANG_CXX11
inline void ShowOPStatusRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowOPStatusRequest.db)
}
#endif
inline void ShowOPStatusRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowOPStatusRequest.db)
}
inline void ShowOPStatusRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowOPStatusRequest.db)
}
inline ::std::string* ShowOPStatusRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowOPStatusRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowOPStatusRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowOPStatusRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowOPStatusRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowOPStatusRequest.db)
}

// -------------------------------------------------------------------

// ConnectZKRequest

// -------------------------------------------------------------------

// DisConnectZKRequest

// -------------------------------------------------------------------

// ShowOPStatusResponse

// optional int32 code = 1;
inline bool ShowOPStatusResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowOPStatusResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowOPStatusResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowOPStatusResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowOPStatusResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowOPStatusResponse.code)
  return code_;
}
inline void ShowOPStatusResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowOPStatusResponse.code)
}

// optional string msg = 2;
inline bool ShowOPStatusResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowOPStatusResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowOPStatusResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowOPStatusResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowOPStatusResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowOPStatusResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowOPStatusResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowOPStatusResponse.msg)
}
#if LANG_CXX11
inline void ShowOPStatusResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowOPStatusResponse.msg)
}
#endif
inline void ShowOPStatusResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowOPStatusResponse.msg)
}
inline void ShowOPStatusResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowOPStatusResponse.msg)
}
inline ::std::string* ShowOPStatusResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowOPStatusResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowOPStatusResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowOPStatusResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowOPStatusResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowOPStatusResponse.msg)
}

// repeated .openmldb.nameserver.OPStatus op_status = 3;
inline int ShowOPStatusResponse::op_status_size() const {
  return op_status_.size();
}
inline void ShowOPStatusResponse::clear_op_status() {
  op_status_.Clear();
}
inline ::openmldb::nameserver::OPStatus* ShowOPStatusResponse::mutable_op_status(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowOPStatusResponse.op_status)
  return op_status_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::OPStatus >*
ShowOPStatusResponse::mutable_op_status() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowOPStatusResponse.op_status)
  return &op_status_;
}
inline const ::openmldb::nameserver::OPStatus& ShowOPStatusResponse::op_status(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowOPStatusResponse.op_status)
  return op_status_.Get(index);
}
inline ::openmldb::nameserver::OPStatus* ShowOPStatusResponse::add_op_status() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowOPStatusResponse.op_status)
  return op_status_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::OPStatus >&
ShowOPStatusResponse::op_status() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowOPStatusResponse.op_status)
  return op_status_;
}

// -------------------------------------------------------------------

// CancelOPRequest

// optional uint64 op_id = 1;
inline bool CancelOPRequest::has_op_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CancelOPRequest::set_has_op_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CancelOPRequest::clear_has_op_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CancelOPRequest::clear_op_id() {
  op_id_ = GOOGLE_ULONGLONG(0);
  clear_has_op_id();
}
inline ::google::protobuf::uint64 CancelOPRequest::op_id() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CancelOPRequest.op_id)
  return op_id_;
}
inline void CancelOPRequest::set_op_id(::google::protobuf::uint64 value) {
  set_has_op_id();
  op_id_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CancelOPRequest.op_id)
}

// -------------------------------------------------------------------

// ClusterAddress

// optional string zk_endpoints = 1;
inline bool ClusterAddress::has_zk_endpoints() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterAddress::set_has_zk_endpoints() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterAddress::clear_has_zk_endpoints() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterAddress::clear_zk_endpoints() {
  zk_endpoints_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zk_endpoints();
}
inline const ::std::string& ClusterAddress::zk_endpoints() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ClusterAddress.zk_endpoints)
  return zk_endpoints_.GetNoArena();
}
inline void ClusterAddress::set_zk_endpoints(const ::std::string& value) {
  set_has_zk_endpoints();
  zk_endpoints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ClusterAddress.zk_endpoints)
}
#if LANG_CXX11
inline void ClusterAddress::set_zk_endpoints(::std::string&& value) {
  set_has_zk_endpoints();
  zk_endpoints_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ClusterAddress.zk_endpoints)
}
#endif
inline void ClusterAddress::set_zk_endpoints(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zk_endpoints();
  zk_endpoints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ClusterAddress.zk_endpoints)
}
inline void ClusterAddress::set_zk_endpoints(const char* value, size_t size) {
  set_has_zk_endpoints();
  zk_endpoints_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ClusterAddress.zk_endpoints)
}
inline ::std::string* ClusterAddress::mutable_zk_endpoints() {
  set_has_zk_endpoints();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ClusterAddress.zk_endpoints)
  return zk_endpoints_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterAddress::release_zk_endpoints() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ClusterAddress.zk_endpoints)
  if (!has_zk_endpoints()) {
    return NULL;
  }
  clear_has_zk_endpoints();
  return zk_endpoints_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterAddress::set_allocated_zk_endpoints(::std::string* zk_endpoints) {
  if (zk_endpoints != NULL) {
    set_has_zk_endpoints();
  } else {
    clear_has_zk_endpoints();
  }
  zk_endpoints_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zk_endpoints);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ClusterAddress.zk_endpoints)
}

// optional string zk_path = 2;
inline bool ClusterAddress::has_zk_path() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClusterAddress::set_has_zk_path() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClusterAddress::clear_has_zk_path() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClusterAddress::clear_zk_path() {
  zk_path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zk_path();
}
inline const ::std::string& ClusterAddress::zk_path() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ClusterAddress.zk_path)
  return zk_path_.GetNoArena();
}
inline void ClusterAddress::set_zk_path(const ::std::string& value) {
  set_has_zk_path();
  zk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ClusterAddress.zk_path)
}
#if LANG_CXX11
inline void ClusterAddress::set_zk_path(::std::string&& value) {
  set_has_zk_path();
  zk_path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ClusterAddress.zk_path)
}
#endif
inline void ClusterAddress::set_zk_path(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zk_path();
  zk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ClusterAddress.zk_path)
}
inline void ClusterAddress::set_zk_path(const char* value, size_t size) {
  set_has_zk_path();
  zk_path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ClusterAddress.zk_path)
}
inline ::std::string* ClusterAddress::mutable_zk_path() {
  set_has_zk_path();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ClusterAddress.zk_path)
  return zk_path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterAddress::release_zk_path() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ClusterAddress.zk_path)
  if (!has_zk_path()) {
    return NULL;
  }
  clear_has_zk_path();
  return zk_path_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterAddress::set_allocated_zk_path(::std::string* zk_path) {
  if (zk_path != NULL) {
    set_has_zk_path();
  } else {
    clear_has_zk_path();
  }
  zk_path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zk_path);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ClusterAddress.zk_path)
}

// optional string alias = 3;
inline bool ClusterAddress::has_alias() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClusterAddress::set_has_alias() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClusterAddress::clear_has_alias() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClusterAddress::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& ClusterAddress::alias() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ClusterAddress.alias)
  return alias_.GetNoArena();
}
inline void ClusterAddress::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ClusterAddress.alias)
}
#if LANG_CXX11
inline void ClusterAddress::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ClusterAddress.alias)
}
#endif
inline void ClusterAddress::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ClusterAddress.alias)
}
inline void ClusterAddress::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ClusterAddress.alias)
}
inline ::std::string* ClusterAddress::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ClusterAddress.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterAddress::release_alias() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ClusterAddress.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterAddress::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ClusterAddress.alias)
}

// -------------------------------------------------------------------

// GeneralRequest

// -------------------------------------------------------------------

// ClusterAddAge

// optional .openmldb.nameserver.ClusterAddress replica = 1;
inline bool ClusterAddAge::has_replica() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClusterAddAge::set_has_replica() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClusterAddAge::clear_has_replica() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClusterAddAge::clear_replica() {
  if (replica_ != NULL) replica_->Clear();
  clear_has_replica();
}
inline const ::openmldb::nameserver::ClusterAddress& ClusterAddAge::_internal_replica() const {
  return *replica_;
}
inline const ::openmldb::nameserver::ClusterAddress& ClusterAddAge::replica() const {
  const ::openmldb::nameserver::ClusterAddress* p = replica_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ClusterAddAge.replica)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::ClusterAddress*>(
      &::openmldb::nameserver::_ClusterAddress_default_instance_);
}
inline ::openmldb::nameserver::ClusterAddress* ClusterAddAge::release_replica() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ClusterAddAge.replica)
  clear_has_replica();
  ::openmldb::nameserver::ClusterAddress* temp = replica_;
  replica_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::ClusterAddress* ClusterAddAge::mutable_replica() {
  set_has_replica();
  if (replica_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::ClusterAddress>(GetArenaNoVirtual());
    replica_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ClusterAddAge.replica)
  return replica_;
}
inline void ClusterAddAge::set_allocated_replica(::openmldb::nameserver::ClusterAddress* replica) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete replica_;
  }
  if (replica) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      replica = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, replica, submessage_arena);
    }
    set_has_replica();
  } else {
    clear_has_replica();
  }
  replica_ = replica;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ClusterAddAge.replica)
}

// optional uint64 age = 2;
inline bool ClusterAddAge::has_age() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClusterAddAge::set_has_age() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClusterAddAge::clear_has_age() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClusterAddAge::clear_age() {
  age_ = GOOGLE_ULONGLONG(0);
  clear_has_age();
}
inline ::google::protobuf::uint64 ClusterAddAge::age() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ClusterAddAge.age)
  return age_;
}
inline void ClusterAddAge::set_age(::google::protobuf::uint64 value) {
  set_has_age();
  age_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ClusterAddAge.age)
}

// optional string state = 3;
inline bool ClusterAddAge::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClusterAddAge::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClusterAddAge::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClusterAddAge::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& ClusterAddAge::state() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ClusterAddAge.state)
  return state_.GetNoArena();
}
inline void ClusterAddAge::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ClusterAddAge.state)
}
#if LANG_CXX11
inline void ClusterAddAge::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ClusterAddAge.state)
}
#endif
inline void ClusterAddAge::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ClusterAddAge.state)
}
inline void ClusterAddAge::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ClusterAddAge.state)
}
inline ::std::string* ClusterAddAge::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ClusterAddAge.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClusterAddAge::release_state() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ClusterAddAge.state)
  if (!has_state()) {
    return NULL;
  }
  clear_has_state();
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClusterAddAge::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ClusterAddAge.state)
}

// -------------------------------------------------------------------

// ShowReplicaClusterResponse

// repeated .openmldb.nameserver.ClusterAddAge replicas = 1;
inline int ShowReplicaClusterResponse::replicas_size() const {
  return replicas_.size();
}
inline void ShowReplicaClusterResponse::clear_replicas() {
  replicas_.Clear();
}
inline ::openmldb::nameserver::ClusterAddAge* ShowReplicaClusterResponse::mutable_replicas(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowReplicaClusterResponse.replicas)
  return replicas_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::ClusterAddAge >*
ShowReplicaClusterResponse::mutable_replicas() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowReplicaClusterResponse.replicas)
  return &replicas_;
}
inline const ::openmldb::nameserver::ClusterAddAge& ShowReplicaClusterResponse::replicas(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowReplicaClusterResponse.replicas)
  return replicas_.Get(index);
}
inline ::openmldb::nameserver::ClusterAddAge* ShowReplicaClusterResponse::add_replicas() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowReplicaClusterResponse.replicas)
  return replicas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::ClusterAddAge >&
ShowReplicaClusterResponse::replicas() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowReplicaClusterResponse.replicas)
  return replicas_;
}

// optional int32 code = 2;
inline bool ShowReplicaClusterResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowReplicaClusterResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowReplicaClusterResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowReplicaClusterResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowReplicaClusterResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowReplicaClusterResponse.code)
  return code_;
}
inline void ShowReplicaClusterResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowReplicaClusterResponse.code)
}

// optional string msg = 3;
inline bool ShowReplicaClusterResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowReplicaClusterResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowReplicaClusterResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowReplicaClusterResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowReplicaClusterResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowReplicaClusterResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowReplicaClusterResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowReplicaClusterResponse.msg)
}
#if LANG_CXX11
inline void ShowReplicaClusterResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowReplicaClusterResponse.msg)
}
#endif
inline void ShowReplicaClusterResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowReplicaClusterResponse.msg)
}
inline void ShowReplicaClusterResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowReplicaClusterResponse.msg)
}
inline ::std::string* ShowReplicaClusterResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowReplicaClusterResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowReplicaClusterResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowReplicaClusterResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowReplicaClusterResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowReplicaClusterResponse.msg)
}

// -------------------------------------------------------------------

// RemoveReplicaOfRequest

// optional string alias = 1;
inline bool RemoveReplicaOfRequest::has_alias() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveReplicaOfRequest::set_has_alias() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveReplicaOfRequest::clear_has_alias() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveReplicaOfRequest::clear_alias() {
  alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_alias();
}
inline const ::std::string& RemoveReplicaOfRequest::alias() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.RemoveReplicaOfRequest.alias)
  return alias_.GetNoArena();
}
inline void RemoveReplicaOfRequest::set_alias(const ::std::string& value) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.RemoveReplicaOfRequest.alias)
}
#if LANG_CXX11
inline void RemoveReplicaOfRequest::set_alias(::std::string&& value) {
  set_has_alias();
  alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.RemoveReplicaOfRequest.alias)
}
#endif
inline void RemoveReplicaOfRequest::set_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.RemoveReplicaOfRequest.alias)
}
inline void RemoveReplicaOfRequest::set_alias(const char* value, size_t size) {
  set_has_alias();
  alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.RemoveReplicaOfRequest.alias)
}
inline ::std::string* RemoveReplicaOfRequest::mutable_alias() {
  set_has_alias();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.RemoveReplicaOfRequest.alias)
  return alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RemoveReplicaOfRequest::release_alias() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.RemoveReplicaOfRequest.alias)
  if (!has_alias()) {
    return NULL;
  }
  clear_has_alias();
  return alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RemoveReplicaOfRequest::set_allocated_alias(::std::string* alias) {
  if (alias != NULL) {
    set_has_alias();
  } else {
    clear_has_alias();
  }
  alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), alias);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.RemoveReplicaOfRequest.alias)
}

// -------------------------------------------------------------------

// ReplicaClusterByNsRequest

// optional .openmldb.nameserver.ZoneInfo zone_info = 1;
inline bool ReplicaClusterByNsRequest::has_zone_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReplicaClusterByNsRequest::set_has_zone_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReplicaClusterByNsRequest::clear_has_zone_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReplicaClusterByNsRequest::clear_zone_info() {
  if (zone_info_ != NULL) zone_info_->Clear();
  clear_has_zone_info();
}
inline const ::openmldb::nameserver::ZoneInfo& ReplicaClusterByNsRequest::_internal_zone_info() const {
  return *zone_info_;
}
inline const ::openmldb::nameserver::ZoneInfo& ReplicaClusterByNsRequest::zone_info() const {
  const ::openmldb::nameserver::ZoneInfo* p = zone_info_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ReplicaClusterByNsRequest.zone_info)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::nameserver::ZoneInfo*>(
      &::openmldb::nameserver::_ZoneInfo_default_instance_);
}
inline ::openmldb::nameserver::ZoneInfo* ReplicaClusterByNsRequest::release_zone_info() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ReplicaClusterByNsRequest.zone_info)
  clear_has_zone_info();
  ::openmldb::nameserver::ZoneInfo* temp = zone_info_;
  zone_info_ = NULL;
  return temp;
}
inline ::openmldb::nameserver::ZoneInfo* ReplicaClusterByNsRequest::mutable_zone_info() {
  set_has_zone_info();
  if (zone_info_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::nameserver::ZoneInfo>(GetArenaNoVirtual());
    zone_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ReplicaClusterByNsRequest.zone_info)
  return zone_info_;
}
inline void ReplicaClusterByNsRequest::set_allocated_zone_info(::openmldb::nameserver::ZoneInfo* zone_info) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete zone_info_;
  }
  if (zone_info) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      zone_info = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, zone_info, submessage_arena);
    }
    set_has_zone_info();
  } else {
    clear_has_zone_info();
  }
  zone_info_ = zone_info;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ReplicaClusterByNsRequest.zone_info)
}

// -------------------------------------------------------------------

// ZoneInfo

// optional string zone_name = 1;
inline bool ZoneInfo::has_zone_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZoneInfo::set_has_zone_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZoneInfo::clear_has_zone_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZoneInfo::clear_zone_name() {
  zone_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_zone_name();
}
inline const ::std::string& ZoneInfo::zone_name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ZoneInfo.zone_name)
  return zone_name_.GetNoArena();
}
inline void ZoneInfo::set_zone_name(const ::std::string& value) {
  set_has_zone_name();
  zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ZoneInfo.zone_name)
}
#if LANG_CXX11
inline void ZoneInfo::set_zone_name(::std::string&& value) {
  set_has_zone_name();
  zone_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ZoneInfo.zone_name)
}
#endif
inline void ZoneInfo::set_zone_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_zone_name();
  zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ZoneInfo.zone_name)
}
inline void ZoneInfo::set_zone_name(const char* value, size_t size) {
  set_has_zone_name();
  zone_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ZoneInfo.zone_name)
}
inline ::std::string* ZoneInfo::mutable_zone_name() {
  set_has_zone_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ZoneInfo.zone_name)
  return zone_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZoneInfo::release_zone_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ZoneInfo.zone_name)
  if (!has_zone_name()) {
    return NULL;
  }
  clear_has_zone_name();
  return zone_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZoneInfo::set_allocated_zone_name(::std::string* zone_name) {
  if (zone_name != NULL) {
    set_has_zone_name();
  } else {
    clear_has_zone_name();
  }
  zone_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), zone_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ZoneInfo.zone_name)
}

// optional string replica_alias = 2;
inline bool ZoneInfo::has_replica_alias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZoneInfo::set_has_replica_alias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZoneInfo::clear_has_replica_alias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZoneInfo::clear_replica_alias() {
  replica_alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_replica_alias();
}
inline const ::std::string& ZoneInfo::replica_alias() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ZoneInfo.replica_alias)
  return replica_alias_.GetNoArena();
}
inline void ZoneInfo::set_replica_alias(const ::std::string& value) {
  set_has_replica_alias();
  replica_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ZoneInfo.replica_alias)
}
#if LANG_CXX11
inline void ZoneInfo::set_replica_alias(::std::string&& value) {
  set_has_replica_alias();
  replica_alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ZoneInfo.replica_alias)
}
#endif
inline void ZoneInfo::set_replica_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_replica_alias();
  replica_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ZoneInfo.replica_alias)
}
inline void ZoneInfo::set_replica_alias(const char* value, size_t size) {
  set_has_replica_alias();
  replica_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ZoneInfo.replica_alias)
}
inline ::std::string* ZoneInfo::mutable_replica_alias() {
  set_has_replica_alias();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ZoneInfo.replica_alias)
  return replica_alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ZoneInfo::release_replica_alias() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ZoneInfo.replica_alias)
  if (!has_replica_alias()) {
    return NULL;
  }
  clear_has_replica_alias();
  return replica_alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ZoneInfo::set_allocated_replica_alias(::std::string* replica_alias) {
  if (replica_alias != NULL) {
    set_has_replica_alias();
  } else {
    clear_has_replica_alias();
  }
  replica_alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), replica_alias);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ZoneInfo.replica_alias)
}

// optional uint64 zone_term = 3;
inline bool ZoneInfo::has_zone_term() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZoneInfo::set_has_zone_term() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZoneInfo::clear_has_zone_term() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZoneInfo::clear_zone_term() {
  zone_term_ = GOOGLE_ULONGLONG(0);
  clear_has_zone_term();
}
inline ::google::protobuf::uint64 ZoneInfo::zone_term() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ZoneInfo.zone_term)
  return zone_term_;
}
inline void ZoneInfo::set_zone_term(::google::protobuf::uint64 value) {
  set_has_zone_term();
  zone_term_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ZoneInfo.zone_term)
}

// optional .openmldb.nameserver.ServerMode mode = 4;
inline bool ZoneInfo::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZoneInfo::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZoneInfo::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZoneInfo::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::openmldb::nameserver::ServerMode ZoneInfo::mode() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ZoneInfo.mode)
  return static_cast< ::openmldb::nameserver::ServerMode >(mode_);
}
inline void ZoneInfo::set_mode(::openmldb::nameserver::ServerMode value) {
  assert(::openmldb::nameserver::ServerMode_IsValid(value));
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ZoneInfo.mode)
}

// -------------------------------------------------------------------

// AddReplicaClusterByNsResponse

// repeated .openmldb.nameserver.TabletStatus tablets = 1;
inline int AddReplicaClusterByNsResponse::tablets_size() const {
  return tablets_.size();
}
inline void AddReplicaClusterByNsResponse::clear_tablets() {
  tablets_.Clear();
}
inline ::openmldb::nameserver::TabletStatus* AddReplicaClusterByNsResponse::mutable_tablets(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaClusterByNsResponse.tablets)
  return tablets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >*
AddReplicaClusterByNsResponse::mutable_tablets() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.AddReplicaClusterByNsResponse.tablets)
  return &tablets_;
}
inline const ::openmldb::nameserver::TabletStatus& AddReplicaClusterByNsResponse::tablets(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaClusterByNsResponse.tablets)
  return tablets_.Get(index);
}
inline ::openmldb::nameserver::TabletStatus* AddReplicaClusterByNsResponse::add_tablets() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.AddReplicaClusterByNsResponse.tablets)
  return tablets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >&
AddReplicaClusterByNsResponse::tablets() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.AddReplicaClusterByNsResponse.tablets)
  return tablets_;
}

// repeated .openmldb.nameserver.TableInfo table_info = 2;
inline int AddReplicaClusterByNsResponse::table_info_size() const {
  return table_info_.size();
}
inline void AddReplicaClusterByNsResponse::clear_table_info() {
  table_info_.Clear();
}
inline ::openmldb::nameserver::TableInfo* AddReplicaClusterByNsResponse::mutable_table_info(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaClusterByNsResponse.table_info)
  return table_info_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >*
AddReplicaClusterByNsResponse::mutable_table_info() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.AddReplicaClusterByNsResponse.table_info)
  return &table_info_;
}
inline const ::openmldb::nameserver::TableInfo& AddReplicaClusterByNsResponse::table_info(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaClusterByNsResponse.table_info)
  return table_info_.Get(index);
}
inline ::openmldb::nameserver::TableInfo* AddReplicaClusterByNsResponse::add_table_info() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.AddReplicaClusterByNsResponse.table_info)
  return table_info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TableInfo >&
AddReplicaClusterByNsResponse::table_info() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.AddReplicaClusterByNsResponse.table_info)
  return table_info_;
}

// required int32 code = 3;
inline bool AddReplicaClusterByNsResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddReplicaClusterByNsResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddReplicaClusterByNsResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddReplicaClusterByNsResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AddReplicaClusterByNsResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaClusterByNsResponse.code)
  return code_;
}
inline void AddReplicaClusterByNsResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaClusterByNsResponse.code)
}

// optional string msg = 4;
inline bool AddReplicaClusterByNsResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddReplicaClusterByNsResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddReplicaClusterByNsResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddReplicaClusterByNsResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& AddReplicaClusterByNsResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
  return msg_.GetNoArena();
}
inline void AddReplicaClusterByNsResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
}
#if LANG_CXX11
inline void AddReplicaClusterByNsResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
}
#endif
inline void AddReplicaClusterByNsResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
}
inline void AddReplicaClusterByNsResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
}
inline ::std::string* AddReplicaClusterByNsResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddReplicaClusterByNsResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddReplicaClusterByNsResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddReplicaClusterByNsResponse.msg)
}

// -------------------------------------------------------------------

// SwitchModeRequest

// optional .openmldb.nameserver.ServerMode sm = 1;
inline bool SwitchModeRequest::has_sm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SwitchModeRequest::set_has_sm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SwitchModeRequest::clear_has_sm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SwitchModeRequest::clear_sm() {
  sm_ = 0;
  clear_has_sm();
}
inline ::openmldb::nameserver::ServerMode SwitchModeRequest::sm() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SwitchModeRequest.sm)
  return static_cast< ::openmldb::nameserver::ServerMode >(sm_);
}
inline void SwitchModeRequest::set_sm(::openmldb::nameserver::ServerMode value) {
  assert(::openmldb::nameserver::ServerMode_IsValid(value));
  set_has_sm();
  sm_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SwitchModeRequest.sm)
}

// -------------------------------------------------------------------

// SyncTableRequest

// optional string name = 1;
inline bool SyncTableRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncTableRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncTableRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncTableRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& SyncTableRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SyncTableRequest.name)
  return name_.GetNoArena();
}
inline void SyncTableRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SyncTableRequest.name)
}
#if LANG_CXX11
inline void SyncTableRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.SyncTableRequest.name)
}
#endif
inline void SyncTableRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.SyncTableRequest.name)
}
inline void SyncTableRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.SyncTableRequest.name)
}
inline ::std::string* SyncTableRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SyncTableRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncTableRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SyncTableRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncTableRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SyncTableRequest.name)
}

// optional string cluster_alias = 2;
inline bool SyncTableRequest::has_cluster_alias() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncTableRequest::set_has_cluster_alias() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncTableRequest::clear_has_cluster_alias() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncTableRequest::clear_cluster_alias() {
  cluster_alias_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster_alias();
}
inline const ::std::string& SyncTableRequest::cluster_alias() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SyncTableRequest.cluster_alias)
  return cluster_alias_.GetNoArena();
}
inline void SyncTableRequest::set_cluster_alias(const ::std::string& value) {
  set_has_cluster_alias();
  cluster_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SyncTableRequest.cluster_alias)
}
#if LANG_CXX11
inline void SyncTableRequest::set_cluster_alias(::std::string&& value) {
  set_has_cluster_alias();
  cluster_alias_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.SyncTableRequest.cluster_alias)
}
#endif
inline void SyncTableRequest::set_cluster_alias(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cluster_alias();
  cluster_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.SyncTableRequest.cluster_alias)
}
inline void SyncTableRequest::set_cluster_alias(const char* value, size_t size) {
  set_has_cluster_alias();
  cluster_alias_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.SyncTableRequest.cluster_alias)
}
inline ::std::string* SyncTableRequest::mutable_cluster_alias() {
  set_has_cluster_alias();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SyncTableRequest.cluster_alias)
  return cluster_alias_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncTableRequest::release_cluster_alias() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SyncTableRequest.cluster_alias)
  if (!has_cluster_alias()) {
    return NULL;
  }
  clear_has_cluster_alias();
  return cluster_alias_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncTableRequest::set_allocated_cluster_alias(::std::string* cluster_alias) {
  if (cluster_alias != NULL) {
    set_has_cluster_alias();
  } else {
    clear_has_cluster_alias();
  }
  cluster_alias_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster_alias);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SyncTableRequest.cluster_alias)
}

// optional uint32 pid = 3;
inline bool SyncTableRequest::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SyncTableRequest::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SyncTableRequest::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SyncTableRequest::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 SyncTableRequest::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SyncTableRequest.pid)
  return pid_;
}
inline void SyncTableRequest::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SyncTableRequest.pid)
}

// optional string db = 4 [default = ""];
inline bool SyncTableRequest::has_db() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SyncTableRequest::set_has_db() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SyncTableRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SyncTableRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& SyncTableRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SyncTableRequest.db)
  return db_.GetNoArena();
}
inline void SyncTableRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SyncTableRequest.db)
}
#if LANG_CXX11
inline void SyncTableRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.SyncTableRequest.db)
}
#endif
inline void SyncTableRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.SyncTableRequest.db)
}
inline void SyncTableRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.SyncTableRequest.db)
}
inline ::std::string* SyncTableRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SyncTableRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SyncTableRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SyncTableRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SyncTableRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SyncTableRequest.db)
}

// -------------------------------------------------------------------

// SetSdkEndpointRequest

// optional string server_name = 1;
inline bool SetSdkEndpointRequest::has_server_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SetSdkEndpointRequest::set_has_server_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SetSdkEndpointRequest::clear_has_server_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SetSdkEndpointRequest::clear_server_name() {
  server_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_server_name();
}
inline const ::std::string& SetSdkEndpointRequest::server_name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SetSdkEndpointRequest.server_name)
  return server_name_.GetNoArena();
}
inline void SetSdkEndpointRequest::set_server_name(const ::std::string& value) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SetSdkEndpointRequest.server_name)
}
#if LANG_CXX11
inline void SetSdkEndpointRequest::set_server_name(::std::string&& value) {
  set_has_server_name();
  server_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.SetSdkEndpointRequest.server_name)
}
#endif
inline void SetSdkEndpointRequest::set_server_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.SetSdkEndpointRequest.server_name)
}
inline void SetSdkEndpointRequest::set_server_name(const char* value, size_t size) {
  set_has_server_name();
  server_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.SetSdkEndpointRequest.server_name)
}
inline ::std::string* SetSdkEndpointRequest::mutable_server_name() {
  set_has_server_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SetSdkEndpointRequest.server_name)
  return server_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetSdkEndpointRequest::release_server_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SetSdkEndpointRequest.server_name)
  if (!has_server_name()) {
    return NULL;
  }
  clear_has_server_name();
  return server_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetSdkEndpointRequest::set_allocated_server_name(::std::string* server_name) {
  if (server_name != NULL) {
    set_has_server_name();
  } else {
    clear_has_server_name();
  }
  server_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), server_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SetSdkEndpointRequest.server_name)
}

// optional string sdk_endpoint = 2;
inline bool SetSdkEndpointRequest::has_sdk_endpoint() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SetSdkEndpointRequest::set_has_sdk_endpoint() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SetSdkEndpointRequest::clear_has_sdk_endpoint() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SetSdkEndpointRequest::clear_sdk_endpoint() {
  sdk_endpoint_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sdk_endpoint();
}
inline const ::std::string& SetSdkEndpointRequest::sdk_endpoint() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
  return sdk_endpoint_.GetNoArena();
}
inline void SetSdkEndpointRequest::set_sdk_endpoint(const ::std::string& value) {
  set_has_sdk_endpoint();
  sdk_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
}
#if LANG_CXX11
inline void SetSdkEndpointRequest::set_sdk_endpoint(::std::string&& value) {
  set_has_sdk_endpoint();
  sdk_endpoint_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
}
#endif
inline void SetSdkEndpointRequest::set_sdk_endpoint(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sdk_endpoint();
  sdk_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
}
inline void SetSdkEndpointRequest::set_sdk_endpoint(const char* value, size_t size) {
  set_has_sdk_endpoint();
  sdk_endpoint_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
}
inline ::std::string* SetSdkEndpointRequest::mutable_sdk_endpoint() {
  set_has_sdk_endpoint();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
  return sdk_endpoint_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* SetSdkEndpointRequest::release_sdk_endpoint() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
  if (!has_sdk_endpoint()) {
    return NULL;
  }
  clear_has_sdk_endpoint();
  return sdk_endpoint_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void SetSdkEndpointRequest::set_allocated_sdk_endpoint(::std::string* sdk_endpoint) {
  if (sdk_endpoint != NULL) {
    set_has_sdk_endpoint();
  } else {
    clear_has_sdk_endpoint();
  }
  sdk_endpoint_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sdk_endpoint);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.SetSdkEndpointRequest.sdk_endpoint)
}

// -------------------------------------------------------------------

// AddIndexMeta

// optional string name = 1;
inline bool AddIndexMeta::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddIndexMeta::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddIndexMeta::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddIndexMeta::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AddIndexMeta::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexMeta.name)
  return name_.GetNoArena();
}
inline void AddIndexMeta::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddIndexMeta.name)
}
#if LANG_CXX11
inline void AddIndexMeta::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddIndexMeta.name)
}
#endif
inline void AddIndexMeta::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddIndexMeta.name)
}
inline void AddIndexMeta::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddIndexMeta.name)
}
inline ::std::string* AddIndexMeta::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexMeta.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddIndexMeta::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddIndexMeta.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddIndexMeta::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddIndexMeta.name)
}

// optional uint32 pid = 2;
inline bool AddIndexMeta::has_pid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AddIndexMeta::set_has_pid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AddIndexMeta::clear_has_pid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AddIndexMeta::clear_pid() {
  pid_ = 0u;
  clear_has_pid();
}
inline ::google::protobuf::uint32 AddIndexMeta::pid() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexMeta.pid)
  return pid_;
}
inline void AddIndexMeta::set_pid(::google::protobuf::uint32 value) {
  set_has_pid();
  pid_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddIndexMeta.pid)
}

// optional .openmldb.common.ColumnKey column_key = 3;
inline bool AddIndexMeta::has_column_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddIndexMeta::set_has_column_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddIndexMeta::clear_has_column_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::openmldb::common::ColumnKey& AddIndexMeta::_internal_column_key() const {
  return *column_key_;
}
inline const ::openmldb::common::ColumnKey& AddIndexMeta::column_key() const {
  const ::openmldb::common::ColumnKey* p = column_key_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexMeta.column_key)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::common::ColumnKey*>(
      &::openmldb::common::_ColumnKey_default_instance_);
}
inline ::openmldb::common::ColumnKey* AddIndexMeta::release_column_key() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddIndexMeta.column_key)
  clear_has_column_key();
  ::openmldb::common::ColumnKey* temp = column_key_;
  column_key_ = NULL;
  return temp;
}
inline ::openmldb::common::ColumnKey* AddIndexMeta::mutable_column_key() {
  set_has_column_key();
  if (column_key_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::common::ColumnKey>(GetArenaNoVirtual());
    column_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexMeta.column_key)
  return column_key_;
}
inline void AddIndexMeta::set_allocated_column_key(::openmldb::common::ColumnKey* column_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_key_);
  }
  if (column_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column_key, submessage_arena);
    }
    set_has_column_key();
  } else {
    clear_has_column_key();
  }
  column_key_ = column_key;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddIndexMeta.column_key)
}

// optional uint32 idx = 4;
inline bool AddIndexMeta::has_idx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AddIndexMeta::set_has_idx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AddIndexMeta::clear_has_idx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AddIndexMeta::clear_idx() {
  idx_ = 0u;
  clear_has_idx();
}
inline ::google::protobuf::uint32 AddIndexMeta::idx() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexMeta.idx)
  return idx_;
}
inline void AddIndexMeta::set_idx(::google::protobuf::uint32 value) {
  set_has_idx();
  idx_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddIndexMeta.idx)
}

// optional string db = 5 [default = ""];
inline bool AddIndexMeta::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddIndexMeta::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddIndexMeta::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddIndexMeta::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& AddIndexMeta::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexMeta.db)
  return db_.GetNoArena();
}
inline void AddIndexMeta::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddIndexMeta.db)
}
#if LANG_CXX11
inline void AddIndexMeta::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddIndexMeta.db)
}
#endif
inline void AddIndexMeta::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddIndexMeta.db)
}
inline void AddIndexMeta::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddIndexMeta.db)
}
inline ::std::string* AddIndexMeta::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexMeta.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddIndexMeta::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddIndexMeta.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddIndexMeta::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddIndexMeta.db)
}

// optional bool skip_data = 6 [default = false];
inline bool AddIndexMeta::has_skip_data() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AddIndexMeta::set_has_skip_data() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AddIndexMeta::clear_has_skip_data() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AddIndexMeta::clear_skip_data() {
  skip_data_ = false;
  clear_has_skip_data();
}
inline bool AddIndexMeta::skip_data() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexMeta.skip_data)
  return skip_data_;
}
inline void AddIndexMeta::set_skip_data(bool value) {
  set_has_skip_data();
  skip_data_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddIndexMeta.skip_data)
}

// -------------------------------------------------------------------

// AddIndexRequest

// optional string name = 1;
inline bool AddIndexRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddIndexRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddIndexRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddIndexRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& AddIndexRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexRequest.name)
  return name_.GetNoArena();
}
inline void AddIndexRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddIndexRequest.name)
}
#if LANG_CXX11
inline void AddIndexRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddIndexRequest.name)
}
#endif
inline void AddIndexRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddIndexRequest.name)
}
inline void AddIndexRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddIndexRequest.name)
}
inline ::std::string* AddIndexRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddIndexRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddIndexRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddIndexRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddIndexRequest.name)
}

// optional .openmldb.common.ColumnKey column_key = 2;
inline bool AddIndexRequest::has_column_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddIndexRequest::set_has_column_key() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddIndexRequest::clear_has_column_key() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::openmldb::common::ColumnKey& AddIndexRequest::_internal_column_key() const {
  return *column_key_;
}
inline const ::openmldb::common::ColumnKey& AddIndexRequest::column_key() const {
  const ::openmldb::common::ColumnKey* p = column_key_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexRequest.column_key)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::common::ColumnKey*>(
      &::openmldb::common::_ColumnKey_default_instance_);
}
inline ::openmldb::common::ColumnKey* AddIndexRequest::release_column_key() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddIndexRequest.column_key)
  clear_has_column_key();
  ::openmldb::common::ColumnKey* temp = column_key_;
  column_key_ = NULL;
  return temp;
}
inline ::openmldb::common::ColumnKey* AddIndexRequest::mutable_column_key() {
  set_has_column_key();
  if (column_key_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::common::ColumnKey>(GetArenaNoVirtual());
    column_key_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexRequest.column_key)
  return column_key_;
}
inline void AddIndexRequest::set_allocated_column_key(::openmldb::common::ColumnKey* column_key) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(column_key_);
  }
  if (column_key) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      column_key = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, column_key, submessage_arena);
    }
    set_has_column_key();
  } else {
    clear_has_column_key();
  }
  column_key_ = column_key;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddIndexRequest.column_key)
}

// optional string db = 3 [default = ""];
inline bool AddIndexRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddIndexRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddIndexRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddIndexRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& AddIndexRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexRequest.db)
  return db_.GetNoArena();
}
inline void AddIndexRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.AddIndexRequest.db)
}
#if LANG_CXX11
inline void AddIndexRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.AddIndexRequest.db)
}
#endif
inline void AddIndexRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.AddIndexRequest.db)
}
inline void AddIndexRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.AddIndexRequest.db)
}
inline ::std::string* AddIndexRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AddIndexRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.AddIndexRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AddIndexRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.AddIndexRequest.db)
}

// repeated .openmldb.common.ColumnDesc cols = 4;
inline int AddIndexRequest::cols_size() const {
  return cols_.size();
}
inline ::openmldb::common::ColumnDesc* AddIndexRequest::mutable_cols(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexRequest.cols)
  return cols_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >*
AddIndexRequest::mutable_cols() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.AddIndexRequest.cols)
  return &cols_;
}
inline const ::openmldb::common::ColumnDesc& AddIndexRequest::cols(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexRequest.cols)
  return cols_.Get(index);
}
inline ::openmldb::common::ColumnDesc* AddIndexRequest::add_cols() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.AddIndexRequest.cols)
  return cols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnDesc >&
AddIndexRequest::cols() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.AddIndexRequest.cols)
  return cols_;
}

// repeated .openmldb.common.ColumnKey column_keys = 5;
inline int AddIndexRequest::column_keys_size() const {
  return column_keys_.size();
}
inline ::openmldb::common::ColumnKey* AddIndexRequest::mutable_column_keys(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.AddIndexRequest.column_keys)
  return column_keys_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >*
AddIndexRequest::mutable_column_keys() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.AddIndexRequest.column_keys)
  return &column_keys_;
}
inline const ::openmldb::common::ColumnKey& AddIndexRequest::column_keys(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.AddIndexRequest.column_keys)
  return column_keys_.Get(index);
}
inline ::openmldb::common::ColumnKey* AddIndexRequest::add_column_keys() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.AddIndexRequest.column_keys)
  return column_keys_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ColumnKey >&
AddIndexRequest::column_keys() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.AddIndexRequest.column_keys)
  return column_keys_;
}

// -------------------------------------------------------------------

// DeleteIndexRequest

// optional string table_name = 1;
inline bool DeleteIndexRequest::has_table_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteIndexRequest::set_has_table_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteIndexRequest::clear_has_table_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteIndexRequest::clear_table_name() {
  table_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_name();
}
inline const ::std::string& DeleteIndexRequest::table_name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DeleteIndexRequest.table_name)
  return table_name_.GetNoArena();
}
inline void DeleteIndexRequest::set_table_name(const ::std::string& value) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DeleteIndexRequest.table_name)
}
#if LANG_CXX11
inline void DeleteIndexRequest::set_table_name(::std::string&& value) {
  set_has_table_name();
  table_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DeleteIndexRequest.table_name)
}
#endif
inline void DeleteIndexRequest::set_table_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DeleteIndexRequest.table_name)
}
inline void DeleteIndexRequest::set_table_name(const char* value, size_t size) {
  set_has_table_name();
  table_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DeleteIndexRequest.table_name)
}
inline ::std::string* DeleteIndexRequest::mutable_table_name() {
  set_has_table_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DeleteIndexRequest.table_name)
  return table_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteIndexRequest::release_table_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DeleteIndexRequest.table_name)
  if (!has_table_name()) {
    return NULL;
  }
  clear_has_table_name();
  return table_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteIndexRequest::set_allocated_table_name(::std::string* table_name) {
  if (table_name != NULL) {
    set_has_table_name();
  } else {
    clear_has_table_name();
  }
  table_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DeleteIndexRequest.table_name)
}

// optional string idx_name = 2;
inline bool DeleteIndexRequest::has_idx_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteIndexRequest::set_has_idx_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteIndexRequest::clear_has_idx_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteIndexRequest::clear_idx_name() {
  idx_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_idx_name();
}
inline const ::std::string& DeleteIndexRequest::idx_name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DeleteIndexRequest.idx_name)
  return idx_name_.GetNoArena();
}
inline void DeleteIndexRequest::set_idx_name(const ::std::string& value) {
  set_has_idx_name();
  idx_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DeleteIndexRequest.idx_name)
}
#if LANG_CXX11
inline void DeleteIndexRequest::set_idx_name(::std::string&& value) {
  set_has_idx_name();
  idx_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DeleteIndexRequest.idx_name)
}
#endif
inline void DeleteIndexRequest::set_idx_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_idx_name();
  idx_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DeleteIndexRequest.idx_name)
}
inline void DeleteIndexRequest::set_idx_name(const char* value, size_t size) {
  set_has_idx_name();
  idx_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DeleteIndexRequest.idx_name)
}
inline ::std::string* DeleteIndexRequest::mutable_idx_name() {
  set_has_idx_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DeleteIndexRequest.idx_name)
  return idx_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteIndexRequest::release_idx_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DeleteIndexRequest.idx_name)
  if (!has_idx_name()) {
    return NULL;
  }
  clear_has_idx_name();
  return idx_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteIndexRequest::set_allocated_idx_name(::std::string* idx_name) {
  if (idx_name != NULL) {
    set_has_idx_name();
  } else {
    clear_has_idx_name();
  }
  idx_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), idx_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DeleteIndexRequest.idx_name)
}

// optional string db_name = 3 [default = ""];
inline bool DeleteIndexRequest::has_db_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeleteIndexRequest::set_has_db_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeleteIndexRequest::clear_has_db_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeleteIndexRequest::clear_db_name() {
  db_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db_name();
}
inline const ::std::string& DeleteIndexRequest::db_name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DeleteIndexRequest.db_name)
  return db_name_.GetNoArena();
}
inline void DeleteIndexRequest::set_db_name(const ::std::string& value) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DeleteIndexRequest.db_name)
}
#if LANG_CXX11
inline void DeleteIndexRequest::set_db_name(::std::string&& value) {
  set_has_db_name();
  db_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DeleteIndexRequest.db_name)
}
#endif
inline void DeleteIndexRequest::set_db_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DeleteIndexRequest.db_name)
}
inline void DeleteIndexRequest::set_db_name(const char* value, size_t size) {
  set_has_db_name();
  db_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DeleteIndexRequest.db_name)
}
inline ::std::string* DeleteIndexRequest::mutable_db_name() {
  set_has_db_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DeleteIndexRequest.db_name)
  return db_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteIndexRequest::release_db_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DeleteIndexRequest.db_name)
  if (!has_db_name()) {
    return NULL;
  }
  clear_has_db_name();
  return db_name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteIndexRequest::set_allocated_db_name(::std::string* db_name) {
  if (db_name != NULL) {
    set_has_db_name();
  } else {
    clear_has_db_name();
  }
  db_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db_name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DeleteIndexRequest.db_name)
}

// -------------------------------------------------------------------

// CreateDatabaseRequest

// optional string db = 1;
inline bool CreateDatabaseRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateDatabaseRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateDatabaseRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateDatabaseRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& CreateDatabaseRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateDatabaseRequest.db)
  return db_.GetNoArena();
}
inline void CreateDatabaseRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateDatabaseRequest.db)
}
#if LANG_CXX11
inline void CreateDatabaseRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.CreateDatabaseRequest.db)
}
#endif
inline void CreateDatabaseRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.CreateDatabaseRequest.db)
}
inline void CreateDatabaseRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.CreateDatabaseRequest.db)
}
inline ::std::string* CreateDatabaseRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateDatabaseRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateDatabaseRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateDatabaseRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateDatabaseRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateDatabaseRequest.db)
}

// optional bool if_not_exists = 2 [default = false];
inline bool CreateDatabaseRequest::has_if_not_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateDatabaseRequest::set_has_if_not_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateDatabaseRequest::clear_has_if_not_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateDatabaseRequest::clear_if_not_exists() {
  if_not_exists_ = false;
  clear_has_if_not_exists();
}
inline bool CreateDatabaseRequest::if_not_exists() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateDatabaseRequest.if_not_exists)
  return if_not_exists_;
}
inline void CreateDatabaseRequest::set_if_not_exists(bool value) {
  set_has_if_not_exists();
  if_not_exists_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateDatabaseRequest.if_not_exists)
}

// -------------------------------------------------------------------

// UseDatabaseRequest

// optional string db = 1;
inline bool UseDatabaseRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UseDatabaseRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UseDatabaseRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UseDatabaseRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& UseDatabaseRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.UseDatabaseRequest.db)
  return db_.GetNoArena();
}
inline void UseDatabaseRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.UseDatabaseRequest.db)
}
#if LANG_CXX11
inline void UseDatabaseRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.UseDatabaseRequest.db)
}
#endif
inline void UseDatabaseRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.UseDatabaseRequest.db)
}
inline void UseDatabaseRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.UseDatabaseRequest.db)
}
inline ::std::string* UseDatabaseRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.UseDatabaseRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* UseDatabaseRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.UseDatabaseRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void UseDatabaseRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.UseDatabaseRequest.db)
}

// -------------------------------------------------------------------

// ShowDatabaseResponse

// optional int32 code = 1;
inline bool ShowDatabaseResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowDatabaseResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowDatabaseResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowDatabaseResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowDatabaseResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowDatabaseResponse.code)
  return code_;
}
inline void ShowDatabaseResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowDatabaseResponse.code)
}

// optional string msg = 2;
inline bool ShowDatabaseResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowDatabaseResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowDatabaseResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowDatabaseResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowDatabaseResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowDatabaseResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowDatabaseResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowDatabaseResponse.msg)
}
#if LANG_CXX11
inline void ShowDatabaseResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowDatabaseResponse.msg)
}
#endif
inline void ShowDatabaseResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowDatabaseResponse.msg)
}
inline void ShowDatabaseResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowDatabaseResponse.msg)
}
inline ::std::string* ShowDatabaseResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowDatabaseResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowDatabaseResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowDatabaseResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowDatabaseResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowDatabaseResponse.msg)
}

// repeated string db = 3;
inline int ShowDatabaseResponse::db_size() const {
  return db_.size();
}
inline void ShowDatabaseResponse::clear_db() {
  db_.Clear();
}
inline const ::std::string& ShowDatabaseResponse::db(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowDatabaseResponse.db)
  return db_.Get(index);
}
inline ::std::string* ShowDatabaseResponse::mutable_db(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowDatabaseResponse.db)
  return db_.Mutable(index);
}
inline void ShowDatabaseResponse::set_db(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowDatabaseResponse.db)
  db_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void ShowDatabaseResponse::set_db(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowDatabaseResponse.db)
  db_.Mutable(index)->assign(std::move(value));
}
#endif
inline void ShowDatabaseResponse::set_db(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  db_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowDatabaseResponse.db)
}
inline void ShowDatabaseResponse::set_db(int index, const char* value, size_t size) {
  db_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowDatabaseResponse.db)
}
inline ::std::string* ShowDatabaseResponse::add_db() {
  // @@protoc_insertion_point(field_add_mutable:openmldb.nameserver.ShowDatabaseResponse.db)
  return db_.Add();
}
inline void ShowDatabaseResponse::add_db(const ::std::string& value) {
  db_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowDatabaseResponse.db)
}
#if LANG_CXX11
inline void ShowDatabaseResponse::add_db(::std::string&& value) {
  db_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowDatabaseResponse.db)
}
#endif
inline void ShowDatabaseResponse::add_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  db_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:openmldb.nameserver.ShowDatabaseResponse.db)
}
inline void ShowDatabaseResponse::add_db(const char* value, size_t size) {
  db_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:openmldb.nameserver.ShowDatabaseResponse.db)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
ShowDatabaseResponse::db() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowDatabaseResponse.db)
  return db_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
ShowDatabaseResponse::mutable_db() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowDatabaseResponse.db)
  return &db_;
}

// -------------------------------------------------------------------

// DropDatabaseRequest

// optional string db = 1;
inline bool DropDatabaseRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropDatabaseRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropDatabaseRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropDatabaseRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& DropDatabaseRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropDatabaseRequest.db)
  return db_.GetNoArena();
}
inline void DropDatabaseRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DropDatabaseRequest.db)
}
#if LANG_CXX11
inline void DropDatabaseRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DropDatabaseRequest.db)
}
#endif
inline void DropDatabaseRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DropDatabaseRequest.db)
}
inline void DropDatabaseRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DropDatabaseRequest.db)
}
inline ::std::string* DropDatabaseRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DropDatabaseRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropDatabaseRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DropDatabaseRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropDatabaseRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DropDatabaseRequest.db)
}

// -------------------------------------------------------------------

// ShowSdkEndpointRequest

// -------------------------------------------------------------------

// ShowSdkEndpointResponse

// repeated .openmldb.nameserver.TabletStatus tablets = 1;
inline int ShowSdkEndpointResponse::tablets_size() const {
  return tablets_.size();
}
inline void ShowSdkEndpointResponse::clear_tablets() {
  tablets_.Clear();
}
inline ::openmldb::nameserver::TabletStatus* ShowSdkEndpointResponse::mutable_tablets(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowSdkEndpointResponse.tablets)
  return tablets_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >*
ShowSdkEndpointResponse::mutable_tablets() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowSdkEndpointResponse.tablets)
  return &tablets_;
}
inline const ::openmldb::nameserver::TabletStatus& ShowSdkEndpointResponse::tablets(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowSdkEndpointResponse.tablets)
  return tablets_.Get(index);
}
inline ::openmldb::nameserver::TabletStatus* ShowSdkEndpointResponse::add_tablets() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowSdkEndpointResponse.tablets)
  return tablets_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::nameserver::TabletStatus >&
ShowSdkEndpointResponse::tablets() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowSdkEndpointResponse.tablets)
  return tablets_;
}

// optional int32 code = 2;
inline bool ShowSdkEndpointResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowSdkEndpointResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowSdkEndpointResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowSdkEndpointResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowSdkEndpointResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowSdkEndpointResponse.code)
  return code_;
}
inline void ShowSdkEndpointResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowSdkEndpointResponse.code)
}

// optional string msg = 3;
inline bool ShowSdkEndpointResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowSdkEndpointResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowSdkEndpointResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowSdkEndpointResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowSdkEndpointResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowSdkEndpointResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowSdkEndpointResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowSdkEndpointResponse.msg)
}
#if LANG_CXX11
inline void ShowSdkEndpointResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowSdkEndpointResponse.msg)
}
#endif
inline void ShowSdkEndpointResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowSdkEndpointResponse.msg)
}
inline void ShowSdkEndpointResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowSdkEndpointResponse.msg)
}
inline ::std::string* ShowSdkEndpointResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowSdkEndpointResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowSdkEndpointResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowSdkEndpointResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowSdkEndpointResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowSdkEndpointResponse.msg)
}

// -------------------------------------------------------------------

// ShowCatalogRequest

// -------------------------------------------------------------------

// ShowCatalogResponse

// repeated .openmldb.common.CatalogInfo catalog = 1;
inline int ShowCatalogResponse::catalog_size() const {
  return catalog_.size();
}
inline ::openmldb::common::CatalogInfo* ShowCatalogResponse::mutable_catalog(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowCatalogResponse.catalog)
  return catalog_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::CatalogInfo >*
ShowCatalogResponse::mutable_catalog() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowCatalogResponse.catalog)
  return &catalog_;
}
inline const ::openmldb::common::CatalogInfo& ShowCatalogResponse::catalog(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowCatalogResponse.catalog)
  return catalog_.Get(index);
}
inline ::openmldb::common::CatalogInfo* ShowCatalogResponse::add_catalog() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowCatalogResponse.catalog)
  return catalog_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::CatalogInfo >&
ShowCatalogResponse::catalog() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowCatalogResponse.catalog)
  return catalog_;
}

// optional int32 code = 2;
inline bool ShowCatalogResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowCatalogResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowCatalogResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowCatalogResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowCatalogResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowCatalogResponse.code)
  return code_;
}
inline void ShowCatalogResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowCatalogResponse.code)
}

// optional string msg = 3;
inline bool ShowCatalogResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowCatalogResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowCatalogResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowCatalogResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowCatalogResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowCatalogResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowCatalogResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowCatalogResponse.msg)
}
#if LANG_CXX11
inline void ShowCatalogResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowCatalogResponse.msg)
}
#endif
inline void ShowCatalogResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowCatalogResponse.msg)
}
inline void ShowCatalogResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowCatalogResponse.msg)
}
inline ::std::string* ShowCatalogResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowCatalogResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowCatalogResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowCatalogResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowCatalogResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowCatalogResponse.msg)
}

// -------------------------------------------------------------------

// CreateFunctionRequest

// optional .openmldb.common.ExternalFun fun = 1;
inline bool CreateFunctionRequest::has_fun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateFunctionRequest::set_has_fun() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateFunctionRequest::clear_has_fun() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::openmldb::common::ExternalFun& CreateFunctionRequest::_internal_fun() const {
  return *fun_;
}
inline const ::openmldb::common::ExternalFun& CreateFunctionRequest::fun() const {
  const ::openmldb::common::ExternalFun* p = fun_;
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateFunctionRequest.fun)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::common::ExternalFun*>(
      &::openmldb::common::_ExternalFun_default_instance_);
}
inline ::openmldb::common::ExternalFun* CreateFunctionRequest::release_fun() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateFunctionRequest.fun)
  clear_has_fun();
  ::openmldb::common::ExternalFun* temp = fun_;
  fun_ = NULL;
  return temp;
}
inline ::openmldb::common::ExternalFun* CreateFunctionRequest::mutable_fun() {
  set_has_fun();
  if (fun_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::common::ExternalFun>(GetArenaNoVirtual());
    fun_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateFunctionRequest.fun)
  return fun_;
}
inline void CreateFunctionRequest::set_allocated_fun(::openmldb::common::ExternalFun* fun) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fun_);
  }
  if (fun) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fun = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fun, submessage_arena);
    }
    set_has_fun();
  } else {
    clear_has_fun();
  }
  fun_ = fun;
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateFunctionRequest.fun)
}

// -------------------------------------------------------------------

// CreateFunctionResponse

// optional int32 code = 1;
inline bool CreateFunctionResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateFunctionResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateFunctionResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateFunctionResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 CreateFunctionResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateFunctionResponse.code)
  return code_;
}
inline void CreateFunctionResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateFunctionResponse.code)
}

// optional string msg = 2;
inline bool CreateFunctionResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateFunctionResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateFunctionResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateFunctionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& CreateFunctionResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.CreateFunctionResponse.msg)
  return msg_.GetNoArena();
}
inline void CreateFunctionResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.CreateFunctionResponse.msg)
}
#if LANG_CXX11
inline void CreateFunctionResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.CreateFunctionResponse.msg)
}
#endif
inline void CreateFunctionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.CreateFunctionResponse.msg)
}
inline void CreateFunctionResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.CreateFunctionResponse.msg)
}
inline ::std::string* CreateFunctionResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.CreateFunctionResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFunctionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.CreateFunctionResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFunctionResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.CreateFunctionResponse.msg)
}

// -------------------------------------------------------------------

// DropFunctionRequest

// optional string name = 1;
inline bool DropFunctionRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropFunctionRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropFunctionRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropFunctionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DropFunctionRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropFunctionRequest.name)
  return name_.GetNoArena();
}
inline void DropFunctionRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DropFunctionRequest.name)
}
#if LANG_CXX11
inline void DropFunctionRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DropFunctionRequest.name)
}
#endif
inline void DropFunctionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DropFunctionRequest.name)
}
inline void DropFunctionRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DropFunctionRequest.name)
}
inline ::std::string* DropFunctionRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DropFunctionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropFunctionRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DropFunctionRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropFunctionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DropFunctionRequest.name)
}

// optional bool if_exists = 2;
inline bool DropFunctionRequest::has_if_exists() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropFunctionRequest::set_has_if_exists() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropFunctionRequest::clear_has_if_exists() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropFunctionRequest::clear_if_exists() {
  if_exists_ = false;
  clear_has_if_exists();
}
inline bool DropFunctionRequest::if_exists() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropFunctionRequest.if_exists)
  return if_exists_;
}
inline void DropFunctionRequest::set_if_exists(bool value) {
  set_has_if_exists();
  if_exists_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DropFunctionRequest.if_exists)
}

// -------------------------------------------------------------------

// DropFunctionResponse

// optional int32 code = 1;
inline bool DropFunctionResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropFunctionResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropFunctionResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropFunctionResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 DropFunctionResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropFunctionResponse.code)
  return code_;
}
inline void DropFunctionResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DropFunctionResponse.code)
}

// optional string msg = 2;
inline bool DropFunctionResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropFunctionResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropFunctionResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropFunctionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& DropFunctionResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.DropFunctionResponse.msg)
  return msg_.GetNoArena();
}
inline void DropFunctionResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.DropFunctionResponse.msg)
}
#if LANG_CXX11
inline void DropFunctionResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.DropFunctionResponse.msg)
}
#endif
inline void DropFunctionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.DropFunctionResponse.msg)
}
inline void DropFunctionResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.DropFunctionResponse.msg)
}
inline ::std::string* DropFunctionResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.DropFunctionResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropFunctionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.DropFunctionResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropFunctionResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.DropFunctionResponse.msg)
}

// -------------------------------------------------------------------

// ShowFunctionRequest

// optional string name = 1;
inline bool ShowFunctionRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowFunctionRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowFunctionRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowFunctionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& ShowFunctionRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowFunctionRequest.name)
  return name_.GetNoArena();
}
inline void ShowFunctionRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowFunctionRequest.name)
}
#if LANG_CXX11
inline void ShowFunctionRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowFunctionRequest.name)
}
#endif
inline void ShowFunctionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowFunctionRequest.name)
}
inline void ShowFunctionRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowFunctionRequest.name)
}
inline ::std::string* ShowFunctionRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowFunctionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowFunctionRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowFunctionRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowFunctionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowFunctionRequest.name)
}

// -------------------------------------------------------------------

// ShowFunctionResponse

// optional int32 code = 1;
inline bool ShowFunctionResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowFunctionResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowFunctionResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowFunctionResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowFunctionResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowFunctionResponse.code)
  return code_;
}
inline void ShowFunctionResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowFunctionResponse.code)
}

// optional string msg = 2;
inline bool ShowFunctionResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowFunctionResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowFunctionResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowFunctionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowFunctionResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowFunctionResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowFunctionResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.nameserver.ShowFunctionResponse.msg)
}
#if LANG_CXX11
inline void ShowFunctionResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.nameserver.ShowFunctionResponse.msg)
}
#endif
inline void ShowFunctionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.nameserver.ShowFunctionResponse.msg)
}
inline void ShowFunctionResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.nameserver.ShowFunctionResponse.msg)
}
inline ::std::string* ShowFunctionResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowFunctionResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowFunctionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.nameserver.ShowFunctionResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowFunctionResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.nameserver.ShowFunctionResponse.msg)
}

// repeated .openmldb.common.ExternalFun fun = 3;
inline int ShowFunctionResponse::fun_size() const {
  return fun_.size();
}
inline ::openmldb::common::ExternalFun* ShowFunctionResponse::mutable_fun(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.nameserver.ShowFunctionResponse.fun)
  return fun_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::common::ExternalFun >*
ShowFunctionResponse::mutable_fun() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.nameserver.ShowFunctionResponse.fun)
  return &fun_;
}
inline const ::openmldb::common::ExternalFun& ShowFunctionResponse::fun(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.nameserver.ShowFunctionResponse.fun)
  return fun_.Get(index);
}
inline ::openmldb::common::ExternalFun* ShowFunctionResponse::add_fun() {
  // @@protoc_insertion_point(field_add:openmldb.nameserver.ShowFunctionResponse.fun)
  return fun_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::common::ExternalFun >&
ShowFunctionResponse::fun() const {
  // @@protoc_insertion_point(field_list:openmldb.nameserver.ShowFunctionResponse.fun)
  return fun_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace nameserver
}  // namespace openmldb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::openmldb::nameserver::ServerMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::nameserver::ServerMode>() {
  return ::openmldb::nameserver::ServerMode_descriptor();
}
template <> struct is_proto_enum< ::openmldb::nameserver::ClusterStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::nameserver::ClusterStatus>() {
  return ::openmldb::nameserver::ClusterStatus_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_name_5fserver_2eproto
