// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batch.proto

#ifndef PROTOBUF_INCLUDED_batch_2eproto
#define PROTOBUF_INCLUDED_batch_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "fe_type.pb.h"
#include "fe_common.pb.h"
#include "plan.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_batch_2eproto 

namespace protobuf_batch_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[7];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_batch_2eproto
namespace hybridse {
namespace batch {
class DataSet;
class DataSetDefaultTypeInternal;
extern DataSetDefaultTypeInternal _DataSet_default_instance_;
class JobDesc;
class JobDescDefaultTypeInternal;
extern JobDescDefaultTypeInternal _JobDesc_default_instance_;
class RunTaskRequest;
class RunTaskRequestDefaultTypeInternal;
extern RunTaskRequestDefaultTypeInternal _RunTaskRequest_default_instance_;
class RunTaskResponse;
class RunTaskResponseDefaultTypeInternal;
extern RunTaskResponseDefaultTypeInternal _RunTaskResponse_default_instance_;
class StartRequest;
class StartRequestDefaultTypeInternal;
extern StartRequestDefaultTypeInternal _StartRequest_default_instance_;
class StartResponse;
class StartResponseDefaultTypeInternal;
extern StartResponseDefaultTypeInternal _StartResponse_default_instance_;
class TaskDesc;
class TaskDescDefaultTypeInternal;
extern TaskDescDefaultTypeInternal _TaskDesc_default_instance_;
}  // namespace batch
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> ::hybridse::batch::DataSet* Arena::CreateMaybeMessage<::hybridse::batch::DataSet>(Arena*);
template<> ::hybridse::batch::JobDesc* Arena::CreateMaybeMessage<::hybridse::batch::JobDesc>(Arena*);
template<> ::hybridse::batch::RunTaskRequest* Arena::CreateMaybeMessage<::hybridse::batch::RunTaskRequest>(Arena*);
template<> ::hybridse::batch::RunTaskResponse* Arena::CreateMaybeMessage<::hybridse::batch::RunTaskResponse>(Arena*);
template<> ::hybridse::batch::StartRequest* Arena::CreateMaybeMessage<::hybridse::batch::StartRequest>(Arena*);
template<> ::hybridse::batch::StartResponse* Arena::CreateMaybeMessage<::hybridse::batch::StartResponse>(Arena*);
template<> ::hybridse::batch::TaskDesc* Arena::CreateMaybeMessage<::hybridse::batch::TaskDesc>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hybridse {
namespace batch {

// ===================================================================

class DataSet : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.DataSet) */ {
 public:
  DataSet();
  virtual ~DataSet();

  DataSet(const DataSet& from);

  inline DataSet& operator=(const DataSet& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DataSet(DataSet&& from) noexcept
    : DataSet() {
    *this = ::std::move(from);
  }

  inline DataSet& operator=(DataSet&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DataSet& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataSet* internal_default_instance() {
    return reinterpret_cast<const DataSet*>(
               &_DataSet_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(DataSet* other);
  friend void swap(DataSet& a, DataSet& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DataSet* New() const final {
    return CreateMaybeMessage<DataSet>(NULL);
  }

  DataSet* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DataSet>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DataSet& from);
  void MergeFrom(const DataSet& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataSet* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .hybridse.type.TableDef schema = 2;
  bool has_schema() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 2;
  private:
  const ::hybridse::type::TableDef& _internal_schema() const;
  public:
  const ::hybridse::type::TableDef& schema() const;
  ::hybridse::type::TableDef* release_schema();
  ::hybridse::type::TableDef* mutable_schema();
  void set_allocated_schema(::hybridse::type::TableDef* schema);

  // @@protoc_insertion_point(class_scope:hybridse.batch.DataSet)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_schema();
  void clear_has_schema();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::hybridse::type::TableDef* schema_;
  friend struct ::protobuf_batch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class JobDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.JobDesc) */ {
 public:
  JobDesc();
  virtual ~JobDesc();

  JobDesc(const JobDesc& from);

  inline JobDesc& operator=(const JobDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobDesc(JobDesc&& from) noexcept
    : JobDesc() {
    *this = ::std::move(from);
  }

  inline JobDesc& operator=(JobDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobDesc* internal_default_instance() {
    return reinterpret_cast<const JobDesc*>(
               &_JobDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(JobDesc* other);
  friend void swap(JobDesc& a, JobDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobDesc* New() const final {
    return CreateMaybeMessage<JobDesc>(NULL);
  }

  JobDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JobDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JobDesc& from);
  void MergeFrom(const JobDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string workers = 3;
  int workers_size() const;
  void clear_workers();
  static const int kWorkersFieldNumber = 3;
  const ::std::string& workers(int index) const;
  ::std::string* mutable_workers(int index);
  void set_workers(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_workers(int index, ::std::string&& value);
  #endif
  void set_workers(int index, const char* value);
  void set_workers(int index, const char* value, size_t size);
  ::std::string* add_workers();
  void add_workers(const ::std::string& value);
  #if LANG_CXX11
  void add_workers(::std::string&& value);
  #endif
  void add_workers(const char* value);
  void add_workers(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& workers() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_workers();

  // optional string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string db = 2;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 2;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // @@protoc_insertion_point(class_scope:hybridse.batch.JobDesc)
 private:
  void set_has_sql();
  void clear_has_sql();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::std::string> workers_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  friend struct ::protobuf_batch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TaskDesc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.TaskDesc) */ {
 public:
  TaskDesc();
  virtual ~TaskDesc();

  TaskDesc(const TaskDesc& from);

  inline TaskDesc& operator=(const TaskDesc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TaskDesc(TaskDesc&& from) noexcept
    : TaskDesc() {
    *this = ::std::move(from);
  }

  inline TaskDesc& operator=(TaskDesc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TaskDesc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TaskDesc* internal_default_instance() {
    return reinterpret_cast<const TaskDesc*>(
               &_TaskDesc_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TaskDesc* other);
  friend void swap(TaskDesc& a, TaskDesc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TaskDesc* New() const final {
    return CreateMaybeMessage<TaskDesc>(NULL);
  }

  TaskDesc* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TaskDesc>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TaskDesc& from);
  void MergeFrom(const TaskDesc& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TaskDesc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hybridse.batch.GraphDesc graph = 1;
  bool has_graph() const;
  void clear_graph();
  static const int kGraphFieldNumber = 1;
  private:
  const ::hybridse::batch::GraphDesc& _internal_graph() const;
  public:
  const ::hybridse::batch::GraphDesc& graph() const;
  ::hybridse::batch::GraphDesc* release_graph();
  ::hybridse::batch::GraphDesc* mutable_graph();
  void set_allocated_graph(::hybridse::batch::GraphDesc* graph);

  // @@protoc_insertion_point(class_scope:hybridse.batch.TaskDesc)
 private:
  void set_has_graph();
  void clear_has_graph();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hybridse::batch::GraphDesc* graph_;
  friend struct ::protobuf_batch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.StartRequest) */ {
 public:
  StartRequest();
  virtual ~StartRequest();

  StartRequest(const StartRequest& from);

  inline StartRequest& operator=(const StartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartRequest(StartRequest&& from) noexcept
    : StartRequest() {
    *this = ::std::move(from);
  }

  inline StartRequest& operator=(StartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartRequest* internal_default_instance() {
    return reinterpret_cast<const StartRequest*>(
               &_StartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(StartRequest* other);
  friend void swap(StartRequest& a, StartRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartRequest* New() const final {
    return CreateMaybeMessage<StartRequest>(NULL);
  }

  StartRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartRequest& from);
  void MergeFrom(const StartRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hybridse.batch.JobDesc job = 1;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 1;
  private:
  const ::hybridse::batch::JobDesc& _internal_job() const;
  public:
  const ::hybridse::batch::JobDesc& job() const;
  ::hybridse::batch::JobDesc* release_job();
  ::hybridse::batch::JobDesc* mutable_job();
  void set_allocated_job(::hybridse::batch::JobDesc* job);

  // @@protoc_insertion_point(class_scope:hybridse.batch.StartRequest)
 private:
  void set_has_job();
  void clear_has_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hybridse::batch::JobDesc* job_;
  friend struct ::protobuf_batch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StartResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.StartResponse) */ {
 public:
  StartResponse();
  virtual ~StartResponse();

  StartResponse(const StartResponse& from);

  inline StartResponse& operator=(const StartResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StartResponse(StartResponse&& from) noexcept
    : StartResponse() {
    *this = ::std::move(from);
  }

  inline StartResponse& operator=(StartResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StartResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartResponse* internal_default_instance() {
    return reinterpret_cast<const StartResponse*>(
               &_StartResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(StartResponse* other);
  friend void swap(StartResponse& a, StartResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StartResponse* New() const final {
    return CreateMaybeMessage<StartResponse>(NULL);
  }

  StartResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StartResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StartResponse& from);
  void MergeFrom(const StartResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hybridse.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::hybridse::common::Status& _internal_status() const;
  public:
  const ::hybridse::common::Status& status() const;
  ::hybridse::common::Status* release_status();
  ::hybridse::common::Status* mutable_status();
  void set_allocated_status(::hybridse::common::Status* status);

  // @@protoc_insertion_point(class_scope:hybridse.batch.StartResponse)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hybridse::common::Status* status_;
  friend struct ::protobuf_batch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunTaskRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.RunTaskRequest) */ {
 public:
  RunTaskRequest();
  virtual ~RunTaskRequest();

  RunTaskRequest(const RunTaskRequest& from);

  inline RunTaskRequest& operator=(const RunTaskRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunTaskRequest(RunTaskRequest&& from) noexcept
    : RunTaskRequest() {
    *this = ::std::move(from);
  }

  inline RunTaskRequest& operator=(RunTaskRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunTaskRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunTaskRequest* internal_default_instance() {
    return reinterpret_cast<const RunTaskRequest*>(
               &_RunTaskRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(RunTaskRequest* other);
  friend void swap(RunTaskRequest& a, RunTaskRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunTaskRequest* New() const final {
    return CreateMaybeMessage<RunTaskRequest>(NULL);
  }

  RunTaskRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunTaskRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunTaskRequest& from);
  void MergeFrom(const RunTaskRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunTaskRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string sql = 2;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 2;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional .hybridse.batch.TaskDesc task = 3;
  bool has_task() const;
  void clear_task();
  static const int kTaskFieldNumber = 3;
  private:
  const ::hybridse::batch::TaskDesc& _internal_task() const;
  public:
  const ::hybridse::batch::TaskDesc& task() const;
  ::hybridse::batch::TaskDesc* release_task();
  ::hybridse::batch::TaskDesc* mutable_task();
  void set_allocated_task(::hybridse::batch::TaskDesc* task);

  // @@protoc_insertion_point(class_scope:hybridse.batch.RunTaskRequest)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_sql();
  void clear_has_sql();
  void set_has_task();
  void clear_has_task();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::hybridse::batch::TaskDesc* task_;
  friend struct ::protobuf_batch_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunTaskResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.batch.RunTaskResponse) */ {
 public:
  RunTaskResponse();
  virtual ~RunTaskResponse();

  RunTaskResponse(const RunTaskResponse& from);

  inline RunTaskResponse& operator=(const RunTaskResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunTaskResponse(RunTaskResponse&& from) noexcept
    : RunTaskResponse() {
    *this = ::std::move(from);
  }

  inline RunTaskResponse& operator=(RunTaskResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunTaskResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunTaskResponse* internal_default_instance() {
    return reinterpret_cast<const RunTaskResponse*>(
               &_RunTaskResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(RunTaskResponse* other);
  friend void swap(RunTaskResponse& a, RunTaskResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunTaskResponse* New() const final {
    return CreateMaybeMessage<RunTaskResponse>(NULL);
  }

  RunTaskResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunTaskResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunTaskResponse& from);
  void MergeFrom(const RunTaskResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunTaskResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hybridse.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::hybridse::common::Status& _internal_status() const;
  public:
  const ::hybridse::common::Status& status() const;
  ::hybridse::common::Status* release_status();
  ::hybridse::common::Status* mutable_status();
  void set_allocated_status(::hybridse::common::Status* status);

  // @@protoc_insertion_point(class_scope:hybridse.batch.RunTaskResponse)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hybridse::common::Status* status_;
  friend struct ::protobuf_batch_2eproto::TableStruct;
};
// ===================================================================

class BatchLet_Stub;

class BatchLet : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline BatchLet() {};
 public:
  virtual ~BatchLet();

  typedef BatchLet_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void StartDriver(::google::protobuf::RpcController* controller,
                       const ::hybridse::batch::StartRequest* request,
                       ::hybridse::batch::StartRequest* response,
                       ::google::protobuf::Closure* done);
  virtual void RunTask(::google::protobuf::RpcController* controller,
                       const ::hybridse::batch::RunTaskRequest* request,
                       ::hybridse::batch::RunTaskResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BatchLet);
};

class BatchLet_Stub : public BatchLet {
 public:
  BatchLet_Stub(::google::protobuf::RpcChannel* channel);
  BatchLet_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~BatchLet_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements BatchLet ------------------------------------------

  void StartDriver(::google::protobuf::RpcController* controller,
                       const ::hybridse::batch::StartRequest* request,
                       ::hybridse::batch::StartRequest* response,
                       ::google::protobuf::Closure* done);
  void RunTask(::google::protobuf::RpcController* controller,
                       const ::hybridse::batch::RunTaskRequest* request,
                       ::hybridse::batch::RunTaskResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(BatchLet_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// DataSet

// optional string name = 1;
inline bool DataSet::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DataSet::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DataSet::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DataSet::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DataSet::name() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.DataSet.name)
  return name_.GetNoArena();
}
inline void DataSet::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.DataSet.name)
}
#if LANG_CXX11
inline void DataSet::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.DataSet.name)
}
#endif
inline void DataSet::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.DataSet.name)
}
inline void DataSet::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.DataSet.name)
}
inline ::std::string* DataSet::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.DataSet.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DataSet::release_name() {
  // @@protoc_insertion_point(field_release:hybridse.batch.DataSet.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DataSet::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.DataSet.name)
}

// optional .hybridse.type.TableDef schema = 2;
inline bool DataSet::has_schema() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DataSet::set_has_schema() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DataSet::clear_has_schema() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hybridse::type::TableDef& DataSet::_internal_schema() const {
  return *schema_;
}
inline const ::hybridse::type::TableDef& DataSet::schema() const {
  const ::hybridse::type::TableDef* p = schema_;
  // @@protoc_insertion_point(field_get:hybridse.batch.DataSet.schema)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::type::TableDef*>(
      &::hybridse::type::_TableDef_default_instance_);
}
inline ::hybridse::type::TableDef* DataSet::release_schema() {
  // @@protoc_insertion_point(field_release:hybridse.batch.DataSet.schema)
  clear_has_schema();
  ::hybridse::type::TableDef* temp = schema_;
  schema_ = NULL;
  return temp;
}
inline ::hybridse::type::TableDef* DataSet::mutable_schema() {
  set_has_schema();
  if (schema_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::type::TableDef>(GetArenaNoVirtual());
    schema_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.batch.DataSet.schema)
  return schema_;
}
inline void DataSet::set_allocated_schema(::hybridse::type::TableDef* schema) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schema_);
  }
  if (schema) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      schema = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    set_has_schema();
  } else {
    clear_has_schema();
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.DataSet.schema)
}

// -------------------------------------------------------------------

// JobDesc

// optional string sql = 1;
inline bool JobDesc::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobDesc::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobDesc::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobDesc::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& JobDesc::sql() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.JobDesc.sql)
  return sql_.GetNoArena();
}
inline void JobDesc::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.JobDesc.sql)
}
#if LANG_CXX11
inline void JobDesc::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.JobDesc.sql)
}
#endif
inline void JobDesc::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.JobDesc.sql)
}
inline void JobDesc::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.JobDesc.sql)
}
inline ::std::string* JobDesc::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.JobDesc.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobDesc::release_sql() {
  // @@protoc_insertion_point(field_release:hybridse.batch.JobDesc.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobDesc::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.JobDesc.sql)
}

// optional string db = 2;
inline bool JobDesc::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobDesc::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobDesc::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobDesc::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& JobDesc::db() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.JobDesc.db)
  return db_.GetNoArena();
}
inline void JobDesc::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.JobDesc.db)
}
#if LANG_CXX11
inline void JobDesc::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.JobDesc.db)
}
#endif
inline void JobDesc::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.JobDesc.db)
}
inline void JobDesc::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.JobDesc.db)
}
inline ::std::string* JobDesc::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.JobDesc.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobDesc::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.batch.JobDesc.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobDesc::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.JobDesc.db)
}

// repeated string workers = 3;
inline int JobDesc::workers_size() const {
  return workers_.size();
}
inline void JobDesc::clear_workers() {
  workers_.Clear();
}
inline const ::std::string& JobDesc::workers(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.batch.JobDesc.workers)
  return workers_.Get(index);
}
inline ::std::string* JobDesc::mutable_workers(int index) {
  // @@protoc_insertion_point(field_mutable:hybridse.batch.JobDesc.workers)
  return workers_.Mutable(index);
}
inline void JobDesc::set_workers(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:hybridse.batch.JobDesc.workers)
  workers_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void JobDesc::set_workers(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:hybridse.batch.JobDesc.workers)
  workers_.Mutable(index)->assign(std::move(value));
}
#endif
inline void JobDesc::set_workers(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  workers_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:hybridse.batch.JobDesc.workers)
}
inline void JobDesc::set_workers(int index, const char* value, size_t size) {
  workers_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.JobDesc.workers)
}
inline ::std::string* JobDesc::add_workers() {
  // @@protoc_insertion_point(field_add_mutable:hybridse.batch.JobDesc.workers)
  return workers_.Add();
}
inline void JobDesc::add_workers(const ::std::string& value) {
  workers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:hybridse.batch.JobDesc.workers)
}
#if LANG_CXX11
inline void JobDesc::add_workers(::std::string&& value) {
  workers_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:hybridse.batch.JobDesc.workers)
}
#endif
inline void JobDesc::add_workers(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  workers_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:hybridse.batch.JobDesc.workers)
}
inline void JobDesc::add_workers(const char* value, size_t size) {
  workers_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:hybridse.batch.JobDesc.workers)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
JobDesc::workers() const {
  // @@protoc_insertion_point(field_list:hybridse.batch.JobDesc.workers)
  return workers_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
JobDesc::mutable_workers() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.batch.JobDesc.workers)
  return &workers_;
}

// -------------------------------------------------------------------

// TaskDesc

// optional .hybridse.batch.GraphDesc graph = 1;
inline bool TaskDesc::has_graph() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TaskDesc::set_has_graph() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TaskDesc::clear_has_graph() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hybridse::batch::GraphDesc& TaskDesc::_internal_graph() const {
  return *graph_;
}
inline const ::hybridse::batch::GraphDesc& TaskDesc::graph() const {
  const ::hybridse::batch::GraphDesc* p = graph_;
  // @@protoc_insertion_point(field_get:hybridse.batch.TaskDesc.graph)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::batch::GraphDesc*>(
      &::hybridse::batch::_GraphDesc_default_instance_);
}
inline ::hybridse::batch::GraphDesc* TaskDesc::release_graph() {
  // @@protoc_insertion_point(field_release:hybridse.batch.TaskDesc.graph)
  clear_has_graph();
  ::hybridse::batch::GraphDesc* temp = graph_;
  graph_ = NULL;
  return temp;
}
inline ::hybridse::batch::GraphDesc* TaskDesc::mutable_graph() {
  set_has_graph();
  if (graph_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::batch::GraphDesc>(GetArenaNoVirtual());
    graph_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.batch.TaskDesc.graph)
  return graph_;
}
inline void TaskDesc::set_allocated_graph(::hybridse::batch::GraphDesc* graph) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(graph_);
  }
  if (graph) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      graph = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, graph, submessage_arena);
    }
    set_has_graph();
  } else {
    clear_has_graph();
  }
  graph_ = graph;
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.TaskDesc.graph)
}

// -------------------------------------------------------------------

// StartRequest

// optional .hybridse.batch.JobDesc job = 1;
inline bool StartRequest::has_job() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartRequest::set_has_job() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartRequest::clear_has_job() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StartRequest::clear_job() {
  if (job_ != NULL) job_->Clear();
  clear_has_job();
}
inline const ::hybridse::batch::JobDesc& StartRequest::_internal_job() const {
  return *job_;
}
inline const ::hybridse::batch::JobDesc& StartRequest::job() const {
  const ::hybridse::batch::JobDesc* p = job_;
  // @@protoc_insertion_point(field_get:hybridse.batch.StartRequest.job)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::batch::JobDesc*>(
      &::hybridse::batch::_JobDesc_default_instance_);
}
inline ::hybridse::batch::JobDesc* StartRequest::release_job() {
  // @@protoc_insertion_point(field_release:hybridse.batch.StartRequest.job)
  clear_has_job();
  ::hybridse::batch::JobDesc* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::hybridse::batch::JobDesc* StartRequest::mutable_job() {
  set_has_job();
  if (job_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::batch::JobDesc>(GetArenaNoVirtual());
    job_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.batch.StartRequest.job)
  return job_;
}
inline void StartRequest::set_allocated_job(::hybridse::batch::JobDesc* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    set_has_job();
  } else {
    clear_has_job();
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.StartRequest.job)
}

// -------------------------------------------------------------------

// StartResponse

// optional .hybridse.common.Status status = 1;
inline bool StartResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StartResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StartResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hybridse::common::Status& StartResponse::_internal_status() const {
  return *status_;
}
inline const ::hybridse::common::Status& StartResponse::status() const {
  const ::hybridse::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:hybridse.batch.StartResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::common::Status*>(
      &::hybridse::common::_Status_default_instance_);
}
inline ::hybridse::common::Status* StartResponse::release_status() {
  // @@protoc_insertion_point(field_release:hybridse.batch.StartResponse.status)
  clear_has_status();
  ::hybridse::common::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::hybridse::common::Status* StartResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.batch.StartResponse.status)
  return status_;
}
inline void StartResponse::set_allocated_status(::hybridse::common::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.StartResponse.status)
}

// -------------------------------------------------------------------

// RunTaskRequest

// optional string id = 1;
inline bool RunTaskRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunTaskRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunTaskRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunTaskRequest::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
inline const ::std::string& RunTaskRequest::id() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.RunTaskRequest.id)
  return id_.GetNoArena();
}
inline void RunTaskRequest::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.RunTaskRequest.id)
}
#if LANG_CXX11
inline void RunTaskRequest::set_id(::std::string&& value) {
  set_has_id();
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.RunTaskRequest.id)
}
#endif
inline void RunTaskRequest::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.RunTaskRequest.id)
}
inline void RunTaskRequest::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.RunTaskRequest.id)
}
inline ::std::string* RunTaskRequest::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.RunTaskRequest.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunTaskRequest::release_id() {
  // @@protoc_insertion_point(field_release:hybridse.batch.RunTaskRequest.id)
  if (!has_id()) {
    return NULL;
  }
  clear_has_id();
  return id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunTaskRequest::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.RunTaskRequest.id)
}

// optional string sql = 2;
inline bool RunTaskRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunTaskRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunTaskRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunTaskRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& RunTaskRequest::sql() const {
  // @@protoc_insertion_point(field_get:hybridse.batch.RunTaskRequest.sql)
  return sql_.GetNoArena();
}
inline void RunTaskRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.batch.RunTaskRequest.sql)
}
#if LANG_CXX11
inline void RunTaskRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.batch.RunTaskRequest.sql)
}
#endif
inline void RunTaskRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.batch.RunTaskRequest.sql)
}
inline void RunTaskRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.batch.RunTaskRequest.sql)
}
inline ::std::string* RunTaskRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:hybridse.batch.RunTaskRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunTaskRequest::release_sql() {
  // @@protoc_insertion_point(field_release:hybridse.batch.RunTaskRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunTaskRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.RunTaskRequest.sql)
}

// optional .hybridse.batch.TaskDesc task = 3;
inline bool RunTaskRequest::has_task() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RunTaskRequest::set_has_task() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RunTaskRequest::clear_has_task() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RunTaskRequest::clear_task() {
  if (task_ != NULL) task_->Clear();
  clear_has_task();
}
inline const ::hybridse::batch::TaskDesc& RunTaskRequest::_internal_task() const {
  return *task_;
}
inline const ::hybridse::batch::TaskDesc& RunTaskRequest::task() const {
  const ::hybridse::batch::TaskDesc* p = task_;
  // @@protoc_insertion_point(field_get:hybridse.batch.RunTaskRequest.task)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::batch::TaskDesc*>(
      &::hybridse::batch::_TaskDesc_default_instance_);
}
inline ::hybridse::batch::TaskDesc* RunTaskRequest::release_task() {
  // @@protoc_insertion_point(field_release:hybridse.batch.RunTaskRequest.task)
  clear_has_task();
  ::hybridse::batch::TaskDesc* temp = task_;
  task_ = NULL;
  return temp;
}
inline ::hybridse::batch::TaskDesc* RunTaskRequest::mutable_task() {
  set_has_task();
  if (task_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::batch::TaskDesc>(GetArenaNoVirtual());
    task_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.batch.RunTaskRequest.task)
  return task_;
}
inline void RunTaskRequest::set_allocated_task(::hybridse::batch::TaskDesc* task) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete task_;
  }
  if (task) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      task = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, task, submessage_arena);
    }
    set_has_task();
  } else {
    clear_has_task();
  }
  task_ = task;
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.RunTaskRequest.task)
}

// -------------------------------------------------------------------

// RunTaskResponse

// optional .hybridse.common.Status status = 1;
inline bool RunTaskResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunTaskResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunTaskResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hybridse::common::Status& RunTaskResponse::_internal_status() const {
  return *status_;
}
inline const ::hybridse::common::Status& RunTaskResponse::status() const {
  const ::hybridse::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:hybridse.batch.RunTaskResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::common::Status*>(
      &::hybridse::common::_Status_default_instance_);
}
inline ::hybridse::common::Status* RunTaskResponse::release_status() {
  // @@protoc_insertion_point(field_release:hybridse.batch.RunTaskResponse.status)
  clear_has_status();
  ::hybridse::common::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::hybridse::common::Status* RunTaskResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.batch.RunTaskResponse.status)
  return status_;
}
inline void RunTaskResponse::set_allocated_status(::hybridse::common::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:hybridse.batch.RunTaskResponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace batch
}  // namespace hybridse

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_batch_2eproto
