// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#ifndef PROTOBUF_INCLUDED_type_2eproto
#define PROTOBUF_INCLUDED_type_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_type_2eproto 

namespace protobuf_type_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_type_2eproto
namespace openmldb {
namespace type {
}  // namespace type
}  // namespace openmldb
namespace openmldb {
namespace type {

enum DataType {
  kBool = 1,
  kSmallInt = 2,
  kInt = 3,
  kBigInt = 4,
  kFloat = 5,
  kDouble = 6,
  kDate = 7,
  kTimestamp = 8,
  kVarchar = 13,
  kString = 14
};
bool DataType_IsValid(int value);
const DataType DataType_MIN = kBool;
const DataType DataType_MAX = kString;
const int DataType_ARRAYSIZE = DataType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DataType_descriptor();
inline const ::std::string& DataType_Name(DataType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DataType_descriptor(), value);
}
inline bool DataType_Parse(
    const ::std::string& name, DataType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DataType>(
    DataType_descriptor(), name, value);
}
enum IndexType {
  kUnique = 1,
  kNoUnique = 2,
  kPrimaryKey = 3,
  kAutoGen = 4,
  kIncrement = 5,
  kTimeSerise = 6
};
bool IndexType_IsValid(int value);
const IndexType IndexType_MIN = kUnique;
const IndexType IndexType_MAX = kTimeSerise;
const int IndexType_ARRAYSIZE = IndexType_MAX + 1;

const ::google::protobuf::EnumDescriptor* IndexType_descriptor();
inline const ::std::string& IndexType_Name(IndexType value) {
  return ::google::protobuf::internal::NameOfEnum(
    IndexType_descriptor(), value);
}
inline bool IndexType_Parse(
    const ::std::string& name, IndexType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<IndexType>(
    IndexType_descriptor(), name, value);
}
enum TTLType {
  kAbsoluteTime = 1,
  kRelativeTime = 2,
  kLatestTime = 3,
  kAbsAndLat = 4,
  kAbsOrLat = 5
};
bool TTLType_IsValid(int value);
const TTLType TTLType_MIN = kAbsoluteTime;
const TTLType TTLType_MAX = kAbsOrLat;
const int TTLType_ARRAYSIZE = TTLType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TTLType_descriptor();
inline const ::std::string& TTLType_Name(TTLType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TTLType_descriptor(), value);
}
inline bool TTLType_Parse(
    const ::std::string& name, TTLType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TTLType>(
    TTLType_descriptor(), name, value);
}
enum CompressType {
  kNoCompress = 0,
  kSnappy = 1
};
bool CompressType_IsValid(int value);
const CompressType CompressType_MIN = kNoCompress;
const CompressType CompressType_MAX = kSnappy;
const int CompressType_ARRAYSIZE = CompressType_MAX + 1;

const ::google::protobuf::EnumDescriptor* CompressType_descriptor();
inline const ::std::string& CompressType_Name(CompressType value) {
  return ::google::protobuf::internal::NameOfEnum(
    CompressType_descriptor(), value);
}
inline bool CompressType_Parse(
    const ::std::string& name, CompressType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CompressType>(
    CompressType_descriptor(), name, value);
}
enum EndpointState {
  kOffline = 1,
  kHealthy = 2
};
bool EndpointState_IsValid(int value);
const EndpointState EndpointState_MIN = kOffline;
const EndpointState EndpointState_MAX = kHealthy;
const int EndpointState_ARRAYSIZE = EndpointState_MAX + 1;

const ::google::protobuf::EnumDescriptor* EndpointState_descriptor();
inline const ::std::string& EndpointState_Name(EndpointState value) {
  return ::google::protobuf::internal::NameOfEnum(
    EndpointState_descriptor(), value);
}
inline bool EndpointState_Parse(
    const ::std::string& name, EndpointState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EndpointState>(
    EndpointState_descriptor(), name, value);
}
enum StartupMode {
  kStandalone = 1,
  kCluster = 2
};
bool StartupMode_IsValid(int value);
const StartupMode StartupMode_MIN = kStandalone;
const StartupMode StartupMode_MAX = kCluster;
const int StartupMode_ARRAYSIZE = StartupMode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StartupMode_descriptor();
inline const ::std::string& StartupMode_Name(StartupMode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StartupMode_descriptor(), value);
}
inline bool StartupMode_Parse(
    const ::std::string& name, StartupMode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StartupMode>(
    StartupMode_descriptor(), name, value);
}
enum ProcedureType {
  kUnknow = -1,
  kReqProcedure = 0,
  kReqDeployment = 1
};
bool ProcedureType_IsValid(int value);
const ProcedureType ProcedureType_MIN = kUnknow;
const ProcedureType ProcedureType_MAX = kReqDeployment;
const int ProcedureType_ARRAYSIZE = ProcedureType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ProcedureType_descriptor();
inline const ::std::string& ProcedureType_Name(ProcedureType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ProcedureType_descriptor(), value);
}
inline bool ProcedureType_Parse(
    const ::std::string& name, ProcedureType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ProcedureType>(
    ProcedureType_descriptor(), name, value);
}
enum NotifyType {
  kTable = 1,
  kGlobalVar = 2
};
bool NotifyType_IsValid(int value);
const NotifyType NotifyType_MIN = kTable;
const NotifyType NotifyType_MAX = kGlobalVar;
const int NotifyType_ARRAYSIZE = NotifyType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NotifyType_descriptor();
inline const ::std::string& NotifyType_Name(NotifyType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NotifyType_descriptor(), value);
}
inline bool NotifyType_Parse(
    const ::std::string& name, NotifyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NotifyType>(
    NotifyType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace type
}  // namespace openmldb

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::openmldb::type::DataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::DataType>() {
  return ::openmldb::type::DataType_descriptor();
}
template <> struct is_proto_enum< ::openmldb::type::IndexType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::IndexType>() {
  return ::openmldb::type::IndexType_descriptor();
}
template <> struct is_proto_enum< ::openmldb::type::TTLType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::TTLType>() {
  return ::openmldb::type::TTLType_descriptor();
}
template <> struct is_proto_enum< ::openmldb::type::CompressType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::CompressType>() {
  return ::openmldb::type::CompressType_descriptor();
}
template <> struct is_proto_enum< ::openmldb::type::EndpointState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::EndpointState>() {
  return ::openmldb::type::EndpointState_descriptor();
}
template <> struct is_proto_enum< ::openmldb::type::StartupMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::StartupMode>() {
  return ::openmldb::type::StartupMode_descriptor();
}
template <> struct is_proto_enum< ::openmldb::type::ProcedureType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::ProcedureType>() {
  return ::openmldb::type::ProcedureType_descriptor();
}
template <> struct is_proto_enum< ::openmldb::type::NotifyType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::openmldb::type::NotifyType>() {
  return ::openmldb::type::NotifyType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_type_2eproto
