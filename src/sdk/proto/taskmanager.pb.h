// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: taskmanager.proto

#ifndef PROTOBUF_INCLUDED_taskmanager_2eproto
#define PROTOBUF_INCLUDED_taskmanager_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_taskmanager_2eproto 

namespace protobuf_taskmanager_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[29];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_taskmanager_2eproto
namespace openmldb {
namespace taskmanager {
class CreateFunctionRequest;
class CreateFunctionRequestDefaultTypeInternal;
extern CreateFunctionRequestDefaultTypeInternal _CreateFunctionRequest_default_instance_;
class CreateFunctionResponse;
class CreateFunctionResponseDefaultTypeInternal;
extern CreateFunctionResponseDefaultTypeInternal _CreateFunctionResponse_default_instance_;
class DeleteJobRequest;
class DeleteJobRequestDefaultTypeInternal;
extern DeleteJobRequestDefaultTypeInternal _DeleteJobRequest_default_instance_;
class DeleteJobResponse;
class DeleteJobResponseDefaultTypeInternal;
extern DeleteJobResponseDefaultTypeInternal _DeleteJobResponse_default_instance_;
class DropFunctionRequest;
class DropFunctionRequestDefaultTypeInternal;
extern DropFunctionRequestDefaultTypeInternal _DropFunctionRequest_default_instance_;
class DropFunctionResponse;
class DropFunctionResponseDefaultTypeInternal;
extern DropFunctionResponseDefaultTypeInternal _DropFunctionResponse_default_instance_;
class DropOfflineTableRequest;
class DropOfflineTableRequestDefaultTypeInternal;
extern DropOfflineTableRequestDefaultTypeInternal _DropOfflineTableRequest_default_instance_;
class DropOfflineTableResponse;
class DropOfflineTableResponseDefaultTypeInternal;
extern DropOfflineTableResponseDefaultTypeInternal _DropOfflineTableResponse_default_instance_;
class ExportOfflineDataRequest;
class ExportOfflineDataRequestDefaultTypeInternal;
extern ExportOfflineDataRequestDefaultTypeInternal _ExportOfflineDataRequest_default_instance_;
class ExportOfflineDataRequest_ConfEntry_DoNotUse;
class ExportOfflineDataRequest_ConfEntry_DoNotUseDefaultTypeInternal;
extern ExportOfflineDataRequest_ConfEntry_DoNotUseDefaultTypeInternal _ExportOfflineDataRequest_ConfEntry_DoNotUse_default_instance_;
class GetJobLogRequest;
class GetJobLogRequestDefaultTypeInternal;
extern GetJobLogRequestDefaultTypeInternal _GetJobLogRequest_default_instance_;
class GetJobLogResponse;
class GetJobLogResponseDefaultTypeInternal;
extern GetJobLogResponseDefaultTypeInternal _GetJobLogResponse_default_instance_;
class ImportOfflineDataRequest;
class ImportOfflineDataRequestDefaultTypeInternal;
extern ImportOfflineDataRequestDefaultTypeInternal _ImportOfflineDataRequest_default_instance_;
class ImportOfflineDataRequest_ConfEntry_DoNotUse;
class ImportOfflineDataRequest_ConfEntry_DoNotUseDefaultTypeInternal;
extern ImportOfflineDataRequest_ConfEntry_DoNotUseDefaultTypeInternal _ImportOfflineDataRequest_ConfEntry_DoNotUse_default_instance_;
class ImportOnlineDataRequest;
class ImportOnlineDataRequestDefaultTypeInternal;
extern ImportOnlineDataRequestDefaultTypeInternal _ImportOnlineDataRequest_default_instance_;
class ImportOnlineDataRequest_ConfEntry_DoNotUse;
class ImportOnlineDataRequest_ConfEntry_DoNotUseDefaultTypeInternal;
extern ImportOnlineDataRequest_ConfEntry_DoNotUseDefaultTypeInternal _ImportOnlineDataRequest_ConfEntry_DoNotUse_default_instance_;
class JobInfo;
class JobInfoDefaultTypeInternal;
extern JobInfoDefaultTypeInternal _JobInfo_default_instance_;
class RunBatchAndShowRequest;
class RunBatchAndShowRequestDefaultTypeInternal;
extern RunBatchAndShowRequestDefaultTypeInternal _RunBatchAndShowRequest_default_instance_;
class RunBatchAndShowRequest_ConfEntry_DoNotUse;
class RunBatchAndShowRequest_ConfEntry_DoNotUseDefaultTypeInternal;
extern RunBatchAndShowRequest_ConfEntry_DoNotUseDefaultTypeInternal _RunBatchAndShowRequest_ConfEntry_DoNotUse_default_instance_;
class RunBatchSqlRequest;
class RunBatchSqlRequestDefaultTypeInternal;
extern RunBatchSqlRequestDefaultTypeInternal _RunBatchSqlRequest_default_instance_;
class RunBatchSqlRequest_ConfEntry_DoNotUse;
class RunBatchSqlRequest_ConfEntry_DoNotUseDefaultTypeInternal;
extern RunBatchSqlRequest_ConfEntry_DoNotUseDefaultTypeInternal _RunBatchSqlRequest_ConfEntry_DoNotUse_default_instance_;
class RunBatchSqlResponse;
class RunBatchSqlResponseDefaultTypeInternal;
extern RunBatchSqlResponseDefaultTypeInternal _RunBatchSqlResponse_default_instance_;
class ShowBatchVersionRequest;
class ShowBatchVersionRequestDefaultTypeInternal;
extern ShowBatchVersionRequestDefaultTypeInternal _ShowBatchVersionRequest_default_instance_;
class ShowJobRequest;
class ShowJobRequestDefaultTypeInternal;
extern ShowJobRequestDefaultTypeInternal _ShowJobRequest_default_instance_;
class ShowJobResponse;
class ShowJobResponseDefaultTypeInternal;
extern ShowJobResponseDefaultTypeInternal _ShowJobResponse_default_instance_;
class ShowJobsRequest;
class ShowJobsRequestDefaultTypeInternal;
extern ShowJobsRequestDefaultTypeInternal _ShowJobsRequest_default_instance_;
class ShowJobsResponse;
class ShowJobsResponseDefaultTypeInternal;
extern ShowJobsResponseDefaultTypeInternal _ShowJobsResponse_default_instance_;
class StopJobRequest;
class StopJobRequestDefaultTypeInternal;
extern StopJobRequestDefaultTypeInternal _StopJobRequest_default_instance_;
class StopJobResponse;
class StopJobResponseDefaultTypeInternal;
extern StopJobResponseDefaultTypeInternal _StopJobResponse_default_instance_;
}  // namespace taskmanager
}  // namespace openmldb
namespace google {
namespace protobuf {
template<> ::openmldb::taskmanager::CreateFunctionRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::CreateFunctionRequest>(Arena*);
template<> ::openmldb::taskmanager::CreateFunctionResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::CreateFunctionResponse>(Arena*);
template<> ::openmldb::taskmanager::DeleteJobRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::DeleteJobRequest>(Arena*);
template<> ::openmldb::taskmanager::DeleteJobResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::DeleteJobResponse>(Arena*);
template<> ::openmldb::taskmanager::DropFunctionRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::DropFunctionRequest>(Arena*);
template<> ::openmldb::taskmanager::DropFunctionResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::DropFunctionResponse>(Arena*);
template<> ::openmldb::taskmanager::DropOfflineTableRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::DropOfflineTableRequest>(Arena*);
template<> ::openmldb::taskmanager::DropOfflineTableResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::DropOfflineTableResponse>(Arena*);
template<> ::openmldb::taskmanager::ExportOfflineDataRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::ExportOfflineDataRequest>(Arena*);
template<> ::openmldb::taskmanager::ExportOfflineDataRequest_ConfEntry_DoNotUse* Arena::CreateMaybeMessage<::openmldb::taskmanager::ExportOfflineDataRequest_ConfEntry_DoNotUse>(Arena*);
template<> ::openmldb::taskmanager::GetJobLogRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::GetJobLogRequest>(Arena*);
template<> ::openmldb::taskmanager::GetJobLogResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::GetJobLogResponse>(Arena*);
template<> ::openmldb::taskmanager::ImportOfflineDataRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::ImportOfflineDataRequest>(Arena*);
template<> ::openmldb::taskmanager::ImportOfflineDataRequest_ConfEntry_DoNotUse* Arena::CreateMaybeMessage<::openmldb::taskmanager::ImportOfflineDataRequest_ConfEntry_DoNotUse>(Arena*);
template<> ::openmldb::taskmanager::ImportOnlineDataRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::ImportOnlineDataRequest>(Arena*);
template<> ::openmldb::taskmanager::ImportOnlineDataRequest_ConfEntry_DoNotUse* Arena::CreateMaybeMessage<::openmldb::taskmanager::ImportOnlineDataRequest_ConfEntry_DoNotUse>(Arena*);
template<> ::openmldb::taskmanager::JobInfo* Arena::CreateMaybeMessage<::openmldb::taskmanager::JobInfo>(Arena*);
template<> ::openmldb::taskmanager::RunBatchAndShowRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::RunBatchAndShowRequest>(Arena*);
template<> ::openmldb::taskmanager::RunBatchAndShowRequest_ConfEntry_DoNotUse* Arena::CreateMaybeMessage<::openmldb::taskmanager::RunBatchAndShowRequest_ConfEntry_DoNotUse>(Arena*);
template<> ::openmldb::taskmanager::RunBatchSqlRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::RunBatchSqlRequest>(Arena*);
template<> ::openmldb::taskmanager::RunBatchSqlRequest_ConfEntry_DoNotUse* Arena::CreateMaybeMessage<::openmldb::taskmanager::RunBatchSqlRequest_ConfEntry_DoNotUse>(Arena*);
template<> ::openmldb::taskmanager::RunBatchSqlResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::RunBatchSqlResponse>(Arena*);
template<> ::openmldb::taskmanager::ShowBatchVersionRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::ShowBatchVersionRequest>(Arena*);
template<> ::openmldb::taskmanager::ShowJobRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::ShowJobRequest>(Arena*);
template<> ::openmldb::taskmanager::ShowJobResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::ShowJobResponse>(Arena*);
template<> ::openmldb::taskmanager::ShowJobsRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::ShowJobsRequest>(Arena*);
template<> ::openmldb::taskmanager::ShowJobsResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::ShowJobsResponse>(Arena*);
template<> ::openmldb::taskmanager::StopJobRequest* Arena::CreateMaybeMessage<::openmldb::taskmanager::StopJobRequest>(Arena*);
template<> ::openmldb::taskmanager::StopJobResponse* Arena::CreateMaybeMessage<::openmldb::taskmanager::StopJobResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace openmldb {
namespace taskmanager {

// ===================================================================

class JobInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.JobInfo) */ {
 public:
  JobInfo();
  virtual ~JobInfo();

  JobInfo(const JobInfo& from);

  inline JobInfo& operator=(const JobInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  JobInfo(JobInfo&& from) noexcept
    : JobInfo() {
    *this = ::std::move(from);
  }

  inline JobInfo& operator=(JobInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JobInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const JobInfo* internal_default_instance() {
    return reinterpret_cast<const JobInfo*>(
               &_JobInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(JobInfo* other);
  friend void swap(JobInfo& a, JobInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline JobInfo* New() const final {
    return CreateMaybeMessage<JobInfo>(NULL);
  }

  JobInfo* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<JobInfo>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const JobInfo& from);
  void MergeFrom(const JobInfo& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(JobInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string job_type = 2;
  bool has_job_type() const;
  void clear_job_type();
  static const int kJobTypeFieldNumber = 2;
  const ::std::string& job_type() const;
  void set_job_type(const ::std::string& value);
  #if LANG_CXX11
  void set_job_type(::std::string&& value);
  #endif
  void set_job_type(const char* value);
  void set_job_type(const char* value, size_t size);
  ::std::string* mutable_job_type();
  ::std::string* release_job_type();
  void set_allocated_job_type(::std::string* job_type);

  // optional string state = 3;
  bool has_state() const;
  void clear_state();
  static const int kStateFieldNumber = 3;
  const ::std::string& state() const;
  void set_state(const ::std::string& value);
  #if LANG_CXX11
  void set_state(::std::string&& value);
  #endif
  void set_state(const char* value);
  void set_state(const char* value, size_t size);
  ::std::string* mutable_state();
  ::std::string* release_state();
  void set_allocated_state(::std::string* state);

  // optional string parameter = 6;
  bool has_parameter() const;
  void clear_parameter();
  static const int kParameterFieldNumber = 6;
  const ::std::string& parameter() const;
  void set_parameter(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter(::std::string&& value);
  #endif
  void set_parameter(const char* value);
  void set_parameter(const char* value, size_t size);
  ::std::string* mutable_parameter();
  ::std::string* release_parameter();
  void set_allocated_parameter(::std::string* parameter);

  // optional string cluster = 7;
  bool has_cluster() const;
  void clear_cluster();
  static const int kClusterFieldNumber = 7;
  const ::std::string& cluster() const;
  void set_cluster(const ::std::string& value);
  #if LANG_CXX11
  void set_cluster(::std::string&& value);
  #endif
  void set_cluster(const char* value);
  void set_cluster(const char* value, size_t size);
  ::std::string* mutable_cluster();
  ::std::string* release_cluster();
  void set_allocated_cluster(::std::string* cluster);

  // optional string application_id = 8;
  bool has_application_id() const;
  void clear_application_id();
  static const int kApplicationIdFieldNumber = 8;
  const ::std::string& application_id() const;
  void set_application_id(const ::std::string& value);
  #if LANG_CXX11
  void set_application_id(::std::string&& value);
  #endif
  void set_application_id(const char* value);
  void set_application_id(const char* value, size_t size);
  ::std::string* mutable_application_id();
  ::std::string* release_application_id();
  void set_allocated_application_id(::std::string* application_id);

  // optional string error = 9;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 9;
  const ::std::string& error() const;
  void set_error(const ::std::string& value);
  #if LANG_CXX11
  void set_error(::std::string&& value);
  #endif
  void set_error(const char* value);
  void set_error(const char* value, size_t size);
  ::std::string* mutable_error();
  ::std::string* release_error();
  void set_allocated_error(::std::string* error);

  // optional string tracking_url = 10;
  bool has_tracking_url() const;
  void clear_tracking_url();
  static const int kTrackingUrlFieldNumber = 10;
  const ::std::string& tracking_url() const;
  void set_tracking_url(const ::std::string& value);
  #if LANG_CXX11
  void set_tracking_url(::std::string&& value);
  #endif
  void set_tracking_url(const char* value);
  void set_tracking_url(const char* value, size_t size);
  ::std::string* mutable_tracking_url();
  ::std::string* release_tracking_url();
  void set_allocated_tracking_url(::std::string* tracking_url);

  // optional int64 start_time = 4;
  bool has_start_time() const;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 4;
  ::google::protobuf::int64 start_time() const;
  void set_start_time(::google::protobuf::int64 value);

  // optional int64 end_time = 5;
  bool has_end_time() const;
  void clear_end_time();
  static const int kEndTimeFieldNumber = 5;
  ::google::protobuf::int64 end_time() const;
  void set_end_time(::google::protobuf::int64 value);

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // optional float progress = 11;
  bool has_progress() const;
  void clear_progress();
  static const int kProgressFieldNumber = 11;
  float progress() const;
  void set_progress(float value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.JobInfo)
 private:
  void set_has_id();
  void clear_has_id();
  void set_has_job_type();
  void clear_has_job_type();
  void set_has_state();
  void clear_has_state();
  void set_has_start_time();
  void clear_has_start_time();
  void set_has_end_time();
  void clear_has_end_time();
  void set_has_parameter();
  void clear_has_parameter();
  void set_has_cluster();
  void clear_has_cluster();
  void set_has_application_id();
  void clear_has_application_id();
  void set_has_error();
  void clear_has_error();
  void set_has_tracking_url();
  void clear_has_tracking_url();
  void set_has_progress();
  void clear_has_progress();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr job_type_;
  ::google::protobuf::internal::ArenaStringPtr state_;
  ::google::protobuf::internal::ArenaStringPtr parameter_;
  ::google::protobuf::internal::ArenaStringPtr cluster_;
  ::google::protobuf::internal::ArenaStringPtr application_id_;
  ::google::protobuf::internal::ArenaStringPtr error_;
  ::google::protobuf::internal::ArenaStringPtr tracking_url_;
  ::google::protobuf::int64 start_time_;
  ::google::protobuf::int64 end_time_;
  ::google::protobuf::int32 id_;
  float progress_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowJobsRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ShowJobsRequest) */ {
 public:
  ShowJobsRequest();
  virtual ~ShowJobsRequest();

  ShowJobsRequest(const ShowJobsRequest& from);

  inline ShowJobsRequest& operator=(const ShowJobsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowJobsRequest(ShowJobsRequest&& from) noexcept
    : ShowJobsRequest() {
    *this = ::std::move(from);
  }

  inline ShowJobsRequest& operator=(ShowJobsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowJobsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowJobsRequest* internal_default_instance() {
    return reinterpret_cast<const ShowJobsRequest*>(
               &_ShowJobsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(ShowJobsRequest* other);
  friend void swap(ShowJobsRequest& a, ShowJobsRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowJobsRequest* New() const final {
    return CreateMaybeMessage<ShowJobsRequest>(NULL);
  }

  ShowJobsRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowJobsRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowJobsRequest& from);
  void MergeFrom(const ShowJobsRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowJobsRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool unfinished = 1 [default = false];
  bool has_unfinished() const;
  void clear_unfinished();
  static const int kUnfinishedFieldNumber = 1;
  bool unfinished() const;
  void set_unfinished(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ShowJobsRequest)
 private:
  void set_has_unfinished();
  void clear_has_unfinished();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  bool unfinished_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowJobsResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ShowJobsResponse) */ {
 public:
  ShowJobsResponse();
  virtual ~ShowJobsResponse();

  ShowJobsResponse(const ShowJobsResponse& from);

  inline ShowJobsResponse& operator=(const ShowJobsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowJobsResponse(ShowJobsResponse&& from) noexcept
    : ShowJobsResponse() {
    *this = ::std::move(from);
  }

  inline ShowJobsResponse& operator=(ShowJobsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowJobsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowJobsResponse* internal_default_instance() {
    return reinterpret_cast<const ShowJobsResponse*>(
               &_ShowJobsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(ShowJobsResponse* other);
  friend void swap(ShowJobsResponse& a, ShowJobsResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowJobsResponse* New() const final {
    return CreateMaybeMessage<ShowJobsResponse>(NULL);
  }

  ShowJobsResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowJobsResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowJobsResponse& from);
  void MergeFrom(const ShowJobsResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowJobsResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .openmldb.taskmanager.JobInfo jobs = 3;
  int jobs_size() const;
  void clear_jobs();
  static const int kJobsFieldNumber = 3;
  ::openmldb::taskmanager::JobInfo* mutable_jobs(int index);
  ::google::protobuf::RepeatedPtrField< ::openmldb::taskmanager::JobInfo >*
      mutable_jobs();
  const ::openmldb::taskmanager::JobInfo& jobs(int index) const;
  ::openmldb::taskmanager::JobInfo* add_jobs();
  const ::google::protobuf::RepeatedPtrField< ::openmldb::taskmanager::JobInfo >&
      jobs() const;

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ShowJobsResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::openmldb::taskmanager::JobInfo > jobs_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ShowJobRequest) */ {
 public:
  ShowJobRequest();
  virtual ~ShowJobRequest();

  ShowJobRequest(const ShowJobRequest& from);

  inline ShowJobRequest& operator=(const ShowJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowJobRequest(ShowJobRequest&& from) noexcept
    : ShowJobRequest() {
    *this = ::std::move(from);
  }

  inline ShowJobRequest& operator=(ShowJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowJobRequest* internal_default_instance() {
    return reinterpret_cast<const ShowJobRequest*>(
               &_ShowJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(ShowJobRequest* other);
  friend void swap(ShowJobRequest& a, ShowJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowJobRequest* New() const final {
    return CreateMaybeMessage<ShowJobRequest>(NULL);
  }

  ShowJobRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowJobRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowJobRequest& from);
  void MergeFrom(const ShowJobRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ShowJobRequest)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowJobResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ShowJobResponse) */ {
 public:
  ShowJobResponse();
  virtual ~ShowJobResponse();

  ShowJobResponse(const ShowJobResponse& from);

  inline ShowJobResponse& operator=(const ShowJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowJobResponse(ShowJobResponse&& from) noexcept
    : ShowJobResponse() {
    *this = ::std::move(from);
  }

  inline ShowJobResponse& operator=(ShowJobResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowJobResponse* internal_default_instance() {
    return reinterpret_cast<const ShowJobResponse*>(
               &_ShowJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(ShowJobResponse* other);
  friend void swap(ShowJobResponse& a, ShowJobResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowJobResponse* New() const final {
    return CreateMaybeMessage<ShowJobResponse>(NULL);
  }

  ShowJobResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowJobResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowJobResponse& from);
  void MergeFrom(const ShowJobResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowJobResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .openmldb.taskmanager.JobInfo job = 3;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 3;
  private:
  const ::openmldb::taskmanager::JobInfo& _internal_job() const;
  public:
  const ::openmldb::taskmanager::JobInfo& job() const;
  ::openmldb::taskmanager::JobInfo* release_job();
  ::openmldb::taskmanager::JobInfo* mutable_job();
  void set_allocated_job(::openmldb::taskmanager::JobInfo* job);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ShowJobResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();
  void set_has_job();
  void clear_has_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::openmldb::taskmanager::JobInfo* job_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.StopJobRequest) */ {
 public:
  StopJobRequest();
  virtual ~StopJobRequest();

  StopJobRequest(const StopJobRequest& from);

  inline StopJobRequest& operator=(const StopJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopJobRequest(StopJobRequest&& from) noexcept
    : StopJobRequest() {
    *this = ::std::move(from);
  }

  inline StopJobRequest& operator=(StopJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopJobRequest* internal_default_instance() {
    return reinterpret_cast<const StopJobRequest*>(
               &_StopJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(StopJobRequest* other);
  friend void swap(StopJobRequest& a, StopJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopJobRequest* New() const final {
    return CreateMaybeMessage<StopJobRequest>(NULL);
  }

  StopJobRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopJobRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopJobRequest& from);
  void MergeFrom(const StopJobRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.StopJobRequest)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class StopJobResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.StopJobResponse) */ {
 public:
  StopJobResponse();
  virtual ~StopJobResponse();

  StopJobResponse(const StopJobResponse& from);

  inline StopJobResponse& operator=(const StopJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  StopJobResponse(StopJobResponse&& from) noexcept
    : StopJobResponse() {
    *this = ::std::move(from);
  }

  inline StopJobResponse& operator=(StopJobResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StopJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopJobResponse* internal_default_instance() {
    return reinterpret_cast<const StopJobResponse*>(
               &_StopJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(StopJobResponse* other);
  friend void swap(StopJobResponse& a, StopJobResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline StopJobResponse* New() const final {
    return CreateMaybeMessage<StopJobResponse>(NULL);
  }

  StopJobResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<StopJobResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const StopJobResponse& from);
  void MergeFrom(const StopJobResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopJobResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional .openmldb.taskmanager.JobInfo job = 3;
  bool has_job() const;
  void clear_job();
  static const int kJobFieldNumber = 3;
  private:
  const ::openmldb::taskmanager::JobInfo& _internal_job() const;
  public:
  const ::openmldb::taskmanager::JobInfo& job() const;
  ::openmldb::taskmanager::JobInfo* release_job();
  ::openmldb::taskmanager::JobInfo* mutable_job();
  void set_allocated_job(::openmldb::taskmanager::JobInfo* job);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.StopJobResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();
  void set_has_job();
  void clear_has_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::openmldb::taskmanager::JobInfo* job_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteJobRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.DeleteJobRequest) */ {
 public:
  DeleteJobRequest();
  virtual ~DeleteJobRequest();

  DeleteJobRequest(const DeleteJobRequest& from);

  inline DeleteJobRequest& operator=(const DeleteJobRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteJobRequest(DeleteJobRequest&& from) noexcept
    : DeleteJobRequest() {
    *this = ::std::move(from);
  }

  inline DeleteJobRequest& operator=(DeleteJobRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteJobRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobRequest* internal_default_instance() {
    return reinterpret_cast<const DeleteJobRequest*>(
               &_DeleteJobRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(DeleteJobRequest* other);
  friend void swap(DeleteJobRequest& a, DeleteJobRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobRequest* New() const final {
    return CreateMaybeMessage<DeleteJobRequest>(NULL);
  }

  DeleteJobRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteJobRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteJobRequest& from);
  void MergeFrom(const DeleteJobRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteJobRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.DeleteJobRequest)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeleteJobResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.DeleteJobResponse) */ {
 public:
  DeleteJobResponse();
  virtual ~DeleteJobResponse();

  DeleteJobResponse(const DeleteJobResponse& from);

  inline DeleteJobResponse& operator=(const DeleteJobResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeleteJobResponse(DeleteJobResponse&& from) noexcept
    : DeleteJobResponse() {
    *this = ::std::move(from);
  }

  inline DeleteJobResponse& operator=(DeleteJobResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteJobResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeleteJobResponse* internal_default_instance() {
    return reinterpret_cast<const DeleteJobResponse*>(
               &_DeleteJobResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(DeleteJobResponse* other);
  friend void swap(DeleteJobResponse& a, DeleteJobResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeleteJobResponse* New() const final {
    return CreateMaybeMessage<DeleteJobResponse>(NULL);
  }

  DeleteJobResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeleteJobResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DeleteJobResponse& from);
  void MergeFrom(const DeleteJobResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeleteJobResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.DeleteJobResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ShowBatchVersionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ShowBatchVersionRequest) */ {
 public:
  ShowBatchVersionRequest();
  virtual ~ShowBatchVersionRequest();

  ShowBatchVersionRequest(const ShowBatchVersionRequest& from);

  inline ShowBatchVersionRequest& operator=(const ShowBatchVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ShowBatchVersionRequest(ShowBatchVersionRequest&& from) noexcept
    : ShowBatchVersionRequest() {
    *this = ::std::move(from);
  }

  inline ShowBatchVersionRequest& operator=(ShowBatchVersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShowBatchVersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShowBatchVersionRequest* internal_default_instance() {
    return reinterpret_cast<const ShowBatchVersionRequest*>(
               &_ShowBatchVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(ShowBatchVersionRequest* other);
  friend void swap(ShowBatchVersionRequest& a, ShowBatchVersionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ShowBatchVersionRequest* New() const final {
    return CreateMaybeMessage<ShowBatchVersionRequest>(NULL);
  }

  ShowBatchVersionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ShowBatchVersionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ShowBatchVersionRequest& from);
  void MergeFrom(const ShowBatchVersionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShowBatchVersionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ShowBatchVersionRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunBatchSqlRequest_ConfEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RunBatchSqlRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RunBatchSqlRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RunBatchSqlRequest_ConfEntry_DoNotUse();
  RunBatchSqlRequest_ConfEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RunBatchSqlRequest_ConfEntry_DoNotUse& other);
  static const RunBatchSqlRequest_ConfEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RunBatchSqlRequest_ConfEntry_DoNotUse*>(&_RunBatchSqlRequest_ConfEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RunBatchSqlRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.RunBatchSqlRequest) */ {
 public:
  RunBatchSqlRequest();
  virtual ~RunBatchSqlRequest();

  RunBatchSqlRequest(const RunBatchSqlRequest& from);

  inline RunBatchSqlRequest& operator=(const RunBatchSqlRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunBatchSqlRequest(RunBatchSqlRequest&& from) noexcept
    : RunBatchSqlRequest() {
    *this = ::std::move(from);
  }

  inline RunBatchSqlRequest& operator=(RunBatchSqlRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunBatchSqlRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunBatchSqlRequest* internal_default_instance() {
    return reinterpret_cast<const RunBatchSqlRequest*>(
               &_RunBatchSqlRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  void Swap(RunBatchSqlRequest* other);
  friend void swap(RunBatchSqlRequest& a, RunBatchSqlRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunBatchSqlRequest* New() const final {
    return CreateMaybeMessage<RunBatchSqlRequest>(NULL);
  }

  RunBatchSqlRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunBatchSqlRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunBatchSqlRequest& from);
  void MergeFrom(const RunBatchSqlRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunBatchSqlRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> conf = 2;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      conf() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_conf();

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string default_db = 3 [default = ""];
  bool has_default_db() const;
  void clear_default_db();
  static const int kDefaultDbFieldNumber = 3;
  const ::std::string& default_db() const;
  void set_default_db(const ::std::string& value);
  #if LANG_CXX11
  void set_default_db(::std::string&& value);
  #endif
  void set_default_db(const char* value);
  void set_default_db(const char* value, size_t size);
  ::std::string* mutable_default_db();
  ::std::string* release_default_db();
  void set_allocated_default_db(::std::string* default_db);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.RunBatchSqlRequest)
 private:
  void set_has_sql();
  void clear_has_sql();
  void set_has_default_db();
  void clear_has_default_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      RunBatchSqlRequest_ConfEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > conf_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr default_db_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunBatchSqlResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.RunBatchSqlResponse) */ {
 public:
  RunBatchSqlResponse();
  virtual ~RunBatchSqlResponse();

  RunBatchSqlResponse(const RunBatchSqlResponse& from);

  inline RunBatchSqlResponse& operator=(const RunBatchSqlResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunBatchSqlResponse(RunBatchSqlResponse&& from) noexcept
    : RunBatchSqlResponse() {
    *this = ::std::move(from);
  }

  inline RunBatchSqlResponse& operator=(RunBatchSqlResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunBatchSqlResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunBatchSqlResponse* internal_default_instance() {
    return reinterpret_cast<const RunBatchSqlResponse*>(
               &_RunBatchSqlResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  void Swap(RunBatchSqlResponse* other);
  friend void swap(RunBatchSqlResponse& a, RunBatchSqlResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunBatchSqlResponse* New() const final {
    return CreateMaybeMessage<RunBatchSqlResponse>(NULL);
  }

  RunBatchSqlResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunBatchSqlResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunBatchSqlResponse& from);
  void MergeFrom(const RunBatchSqlResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunBatchSqlResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional string output = 3;
  bool has_output() const;
  void clear_output();
  static const int kOutputFieldNumber = 3;
  const ::std::string& output() const;
  void set_output(const ::std::string& value);
  #if LANG_CXX11
  void set_output(::std::string&& value);
  #endif
  void set_output(const char* value);
  void set_output(const char* value, size_t size);
  ::std::string* mutable_output();
  ::std::string* release_output();
  void set_allocated_output(::std::string* output);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.RunBatchSqlResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();
  void set_has_output();
  void clear_has_output();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr output_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RunBatchAndShowRequest_ConfEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<RunBatchAndShowRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<RunBatchAndShowRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  RunBatchAndShowRequest_ConfEntry_DoNotUse();
  RunBatchAndShowRequest_ConfEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const RunBatchAndShowRequest_ConfEntry_DoNotUse& other);
  static const RunBatchAndShowRequest_ConfEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const RunBatchAndShowRequest_ConfEntry_DoNotUse*>(&_RunBatchAndShowRequest_ConfEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class RunBatchAndShowRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.RunBatchAndShowRequest) */ {
 public:
  RunBatchAndShowRequest();
  virtual ~RunBatchAndShowRequest();

  RunBatchAndShowRequest(const RunBatchAndShowRequest& from);

  inline RunBatchAndShowRequest& operator=(const RunBatchAndShowRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RunBatchAndShowRequest(RunBatchAndShowRequest&& from) noexcept
    : RunBatchAndShowRequest() {
    *this = ::std::move(from);
  }

  inline RunBatchAndShowRequest& operator=(RunBatchAndShowRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RunBatchAndShowRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RunBatchAndShowRequest* internal_default_instance() {
    return reinterpret_cast<const RunBatchAndShowRequest*>(
               &_RunBatchAndShowRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  void Swap(RunBatchAndShowRequest* other);
  friend void swap(RunBatchAndShowRequest& a, RunBatchAndShowRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RunBatchAndShowRequest* New() const final {
    return CreateMaybeMessage<RunBatchAndShowRequest>(NULL);
  }

  RunBatchAndShowRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RunBatchAndShowRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RunBatchAndShowRequest& from);
  void MergeFrom(const RunBatchAndShowRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RunBatchAndShowRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> conf = 2;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      conf() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_conf();

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string default_db = 3 [default = ""];
  bool has_default_db() const;
  void clear_default_db();
  static const int kDefaultDbFieldNumber = 3;
  const ::std::string& default_db() const;
  void set_default_db(const ::std::string& value);
  #if LANG_CXX11
  void set_default_db(::std::string&& value);
  #endif
  void set_default_db(const char* value);
  void set_default_db(const char* value, size_t size);
  ::std::string* mutable_default_db();
  ::std::string* release_default_db();
  void set_allocated_default_db(::std::string* default_db);

  // optional bool sync_job = 4 [default = false];
  bool has_sync_job() const;
  void clear_sync_job();
  static const int kSyncJobFieldNumber = 4;
  bool sync_job() const;
  void set_sync_job(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.RunBatchAndShowRequest)
 private:
  void set_has_sql();
  void clear_has_sql();
  void set_has_default_db();
  void clear_has_default_db();
  void set_has_sync_job();
  void clear_has_sync_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      RunBatchAndShowRequest_ConfEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > conf_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr default_db_;
  bool sync_job_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportOnlineDataRequest_ConfEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ImportOnlineDataRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ImportOnlineDataRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ImportOnlineDataRequest_ConfEntry_DoNotUse();
  ImportOnlineDataRequest_ConfEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ImportOnlineDataRequest_ConfEntry_DoNotUse& other);
  static const ImportOnlineDataRequest_ConfEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImportOnlineDataRequest_ConfEntry_DoNotUse*>(&_ImportOnlineDataRequest_ConfEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ImportOnlineDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ImportOnlineDataRequest) */ {
 public:
  ImportOnlineDataRequest();
  virtual ~ImportOnlineDataRequest();

  ImportOnlineDataRequest(const ImportOnlineDataRequest& from);

  inline ImportOnlineDataRequest& operator=(const ImportOnlineDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportOnlineDataRequest(ImportOnlineDataRequest&& from) noexcept
    : ImportOnlineDataRequest() {
    *this = ::std::move(from);
  }

  inline ImportOnlineDataRequest& operator=(ImportOnlineDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportOnlineDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportOnlineDataRequest* internal_default_instance() {
    return reinterpret_cast<const ImportOnlineDataRequest*>(
               &_ImportOnlineDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  void Swap(ImportOnlineDataRequest* other);
  friend void swap(ImportOnlineDataRequest& a, ImportOnlineDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportOnlineDataRequest* New() const final {
    return CreateMaybeMessage<ImportOnlineDataRequest>(NULL);
  }

  ImportOnlineDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImportOnlineDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImportOnlineDataRequest& from);
  void MergeFrom(const ImportOnlineDataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportOnlineDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> conf = 2;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      conf() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_conf();

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string default_db = 3 [default = ""];
  bool has_default_db() const;
  void clear_default_db();
  static const int kDefaultDbFieldNumber = 3;
  const ::std::string& default_db() const;
  void set_default_db(const ::std::string& value);
  #if LANG_CXX11
  void set_default_db(::std::string&& value);
  #endif
  void set_default_db(const char* value);
  void set_default_db(const char* value, size_t size);
  ::std::string* mutable_default_db();
  ::std::string* release_default_db();
  void set_allocated_default_db(::std::string* default_db);

  // optional bool sync_job = 4 [default = false];
  bool has_sync_job() const;
  void clear_sync_job();
  static const int kSyncJobFieldNumber = 4;
  bool sync_job() const;
  void set_sync_job(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ImportOnlineDataRequest)
 private:
  void set_has_sql();
  void clear_has_sql();
  void set_has_default_db();
  void clear_has_default_db();
  void set_has_sync_job();
  void clear_has_sync_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      ImportOnlineDataRequest_ConfEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > conf_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr default_db_;
  bool sync_job_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ImportOfflineDataRequest_ConfEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ImportOfflineDataRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ImportOfflineDataRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ImportOfflineDataRequest_ConfEntry_DoNotUse();
  ImportOfflineDataRequest_ConfEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ImportOfflineDataRequest_ConfEntry_DoNotUse& other);
  static const ImportOfflineDataRequest_ConfEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ImportOfflineDataRequest_ConfEntry_DoNotUse*>(&_ImportOfflineDataRequest_ConfEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ImportOfflineDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ImportOfflineDataRequest) */ {
 public:
  ImportOfflineDataRequest();
  virtual ~ImportOfflineDataRequest();

  ImportOfflineDataRequest(const ImportOfflineDataRequest& from);

  inline ImportOfflineDataRequest& operator=(const ImportOfflineDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ImportOfflineDataRequest(ImportOfflineDataRequest&& from) noexcept
    : ImportOfflineDataRequest() {
    *this = ::std::move(from);
  }

  inline ImportOfflineDataRequest& operator=(ImportOfflineDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ImportOfflineDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ImportOfflineDataRequest* internal_default_instance() {
    return reinterpret_cast<const ImportOfflineDataRequest*>(
               &_ImportOfflineDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  void Swap(ImportOfflineDataRequest* other);
  friend void swap(ImportOfflineDataRequest& a, ImportOfflineDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ImportOfflineDataRequest* New() const final {
    return CreateMaybeMessage<ImportOfflineDataRequest>(NULL);
  }

  ImportOfflineDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ImportOfflineDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ImportOfflineDataRequest& from);
  void MergeFrom(const ImportOfflineDataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ImportOfflineDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> conf = 2;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      conf() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_conf();

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string default_db = 3 [default = ""];
  bool has_default_db() const;
  void clear_default_db();
  static const int kDefaultDbFieldNumber = 3;
  const ::std::string& default_db() const;
  void set_default_db(const ::std::string& value);
  #if LANG_CXX11
  void set_default_db(::std::string&& value);
  #endif
  void set_default_db(const char* value);
  void set_default_db(const char* value, size_t size);
  ::std::string* mutable_default_db();
  ::std::string* release_default_db();
  void set_allocated_default_db(::std::string* default_db);

  // optional bool sync_job = 4 [default = false];
  bool has_sync_job() const;
  void clear_sync_job();
  static const int kSyncJobFieldNumber = 4;
  bool sync_job() const;
  void set_sync_job(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ImportOfflineDataRequest)
 private:
  void set_has_sql();
  void clear_has_sql();
  void set_has_default_db();
  void clear_has_default_db();
  void set_has_sync_job();
  void clear_has_sync_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      ImportOfflineDataRequest_ConfEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > conf_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr default_db_;
  bool sync_job_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExportOfflineDataRequest_ConfEntry_DoNotUse : public ::google::protobuf::internal::MapEntry<ExportOfflineDataRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > {
public:
  typedef ::google::protobuf::internal::MapEntry<ExportOfflineDataRequest_ConfEntry_DoNotUse, 
    ::std::string, ::std::string,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
    0 > SuperType;
  ExportOfflineDataRequest_ConfEntry_DoNotUse();
  ExportOfflineDataRequest_ConfEntry_DoNotUse(::google::protobuf::Arena* arena);
  void MergeFrom(const ExportOfflineDataRequest_ConfEntry_DoNotUse& other);
  static const ExportOfflineDataRequest_ConfEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ExportOfflineDataRequest_ConfEntry_DoNotUse*>(&_ExportOfflineDataRequest_ConfEntry_DoNotUse_default_instance_); }
  void MergeFrom(const ::google::protobuf::Message& other) final;
  ::google::protobuf::Metadata GetMetadata() const;
};

// -------------------------------------------------------------------

class ExportOfflineDataRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.ExportOfflineDataRequest) */ {
 public:
  ExportOfflineDataRequest();
  virtual ~ExportOfflineDataRequest();

  ExportOfflineDataRequest(const ExportOfflineDataRequest& from);

  inline ExportOfflineDataRequest& operator=(const ExportOfflineDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExportOfflineDataRequest(ExportOfflineDataRequest&& from) noexcept
    : ExportOfflineDataRequest() {
    *this = ::std::move(from);
  }

  inline ExportOfflineDataRequest& operator=(ExportOfflineDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExportOfflineDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExportOfflineDataRequest* internal_default_instance() {
    return reinterpret_cast<const ExportOfflineDataRequest*>(
               &_ExportOfflineDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  void Swap(ExportOfflineDataRequest* other);
  friend void swap(ExportOfflineDataRequest& a, ExportOfflineDataRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExportOfflineDataRequest* New() const final {
    return CreateMaybeMessage<ExportOfflineDataRequest>(NULL);
  }

  ExportOfflineDataRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExportOfflineDataRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExportOfflineDataRequest& from);
  void MergeFrom(const ExportOfflineDataRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExportOfflineDataRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, string> conf = 2;
  int conf_size() const;
  void clear_conf();
  static const int kConfFieldNumber = 2;
  const ::google::protobuf::Map< ::std::string, ::std::string >&
      conf() const;
  ::google::protobuf::Map< ::std::string, ::std::string >*
      mutable_conf();

  // required string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string default_db = 3 [default = ""];
  bool has_default_db() const;
  void clear_default_db();
  static const int kDefaultDbFieldNumber = 3;
  const ::std::string& default_db() const;
  void set_default_db(const ::std::string& value);
  #if LANG_CXX11
  void set_default_db(::std::string&& value);
  #endif
  void set_default_db(const char* value);
  void set_default_db(const char* value, size_t size);
  ::std::string* mutable_default_db();
  ::std::string* release_default_db();
  void set_allocated_default_db(::std::string* default_db);

  // optional bool sync_job = 4 [default = false];
  bool has_sync_job() const;
  void clear_sync_job();
  static const int kSyncJobFieldNumber = 4;
  bool sync_job() const;
  void set_sync_job(bool value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.ExportOfflineDataRequest)
 private:
  void set_has_sql();
  void clear_has_sql();
  void set_has_default_db();
  void clear_has_default_db();
  void set_has_sync_job();
  void clear_has_sync_job();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::MapField<
      ExportOfflineDataRequest_ConfEntry_DoNotUse,
      ::std::string, ::std::string,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      0 > conf_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr default_db_;
  bool sync_job_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropOfflineTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.DropOfflineTableRequest) */ {
 public:
  DropOfflineTableRequest();
  virtual ~DropOfflineTableRequest();

  DropOfflineTableRequest(const DropOfflineTableRequest& from);

  inline DropOfflineTableRequest& operator=(const DropOfflineTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropOfflineTableRequest(DropOfflineTableRequest&& from) noexcept
    : DropOfflineTableRequest() {
    *this = ::std::move(from);
  }

  inline DropOfflineTableRequest& operator=(DropOfflineTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropOfflineTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropOfflineTableRequest* internal_default_instance() {
    return reinterpret_cast<const DropOfflineTableRequest*>(
               &_DropOfflineTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  void Swap(DropOfflineTableRequest* other);
  friend void swap(DropOfflineTableRequest& a, DropOfflineTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropOfflineTableRequest* New() const final {
    return CreateMaybeMessage<DropOfflineTableRequest>(NULL);
  }

  DropOfflineTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropOfflineTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropOfflineTableRequest& from);
  void MergeFrom(const DropOfflineTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropOfflineTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // required string table = 2;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.DropOfflineTableRequest)
 private:
  void set_has_db();
  void clear_has_db();
  void set_has_table();
  void clear_has_table();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropOfflineTableResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.DropOfflineTableResponse) */ {
 public:
  DropOfflineTableResponse();
  virtual ~DropOfflineTableResponse();

  DropOfflineTableResponse(const DropOfflineTableResponse& from);

  inline DropOfflineTableResponse& operator=(const DropOfflineTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropOfflineTableResponse(DropOfflineTableResponse&& from) noexcept
    : DropOfflineTableResponse() {
    *this = ::std::move(from);
  }

  inline DropOfflineTableResponse& operator=(DropOfflineTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropOfflineTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropOfflineTableResponse* internal_default_instance() {
    return reinterpret_cast<const DropOfflineTableResponse*>(
               &_DropOfflineTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  void Swap(DropOfflineTableResponse* other);
  friend void swap(DropOfflineTableResponse& a, DropOfflineTableResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropOfflineTableResponse* New() const final {
    return CreateMaybeMessage<DropOfflineTableResponse>(NULL);
  }

  DropOfflineTableResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropOfflineTableResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropOfflineTableResponse& from);
  void MergeFrom(const DropOfflineTableResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropOfflineTableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.DropOfflineTableResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetJobLogRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.GetJobLogRequest) */ {
 public:
  GetJobLogRequest();
  virtual ~GetJobLogRequest();

  GetJobLogRequest(const GetJobLogRequest& from);

  inline GetJobLogRequest& operator=(const GetJobLogRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetJobLogRequest(GetJobLogRequest&& from) noexcept
    : GetJobLogRequest() {
    *this = ::std::move(from);
  }

  inline GetJobLogRequest& operator=(GetJobLogRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJobLogRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobLogRequest* internal_default_instance() {
    return reinterpret_cast<const GetJobLogRequest*>(
               &_GetJobLogRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  void Swap(GetJobLogRequest* other);
  friend void swap(GetJobLogRequest& a, GetJobLogRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJobLogRequest* New() const final {
    return CreateMaybeMessage<GetJobLogRequest>(NULL);
  }

  GetJobLogRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetJobLogRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetJobLogRequest& from);
  void MergeFrom(const GetJobLogRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobLogRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.GetJobLogRequest)
 private:
  void set_has_id();
  void clear_has_id();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::int32 id_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetJobLogResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.GetJobLogResponse) */ {
 public:
  GetJobLogResponse();
  virtual ~GetJobLogResponse();

  GetJobLogResponse(const GetJobLogResponse& from);

  inline GetJobLogResponse& operator=(const GetJobLogResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetJobLogResponse(GetJobLogResponse&& from) noexcept
    : GetJobLogResponse() {
    *this = ::std::move(from);
  }

  inline GetJobLogResponse& operator=(GetJobLogResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetJobLogResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetJobLogResponse* internal_default_instance() {
    return reinterpret_cast<const GetJobLogResponse*>(
               &_GetJobLogResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  void Swap(GetJobLogResponse* other);
  friend void swap(GetJobLogResponse& a, GetJobLogResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetJobLogResponse* New() const final {
    return CreateMaybeMessage<GetJobLogResponse>(NULL);
  }

  GetJobLogResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetJobLogResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetJobLogResponse& from);
  void MergeFrom(const GetJobLogResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetJobLogResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional string log = 3;
  bool has_log() const;
  void clear_log();
  static const int kLogFieldNumber = 3;
  const ::std::string& log() const;
  void set_log(const ::std::string& value);
  #if LANG_CXX11
  void set_log(::std::string&& value);
  #endif
  void set_log(const char* value);
  void set_log(const char* value, size_t size);
  ::std::string* mutable_log();
  ::std::string* release_log();
  void set_allocated_log(::std::string* log);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.GetJobLogResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();
  void set_has_log();
  void clear_has_log();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr log_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.CreateFunctionRequest) */ {
 public:
  CreateFunctionRequest();
  virtual ~CreateFunctionRequest();

  CreateFunctionRequest(const CreateFunctionRequest& from);

  inline CreateFunctionRequest& operator=(const CreateFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFunctionRequest(CreateFunctionRequest&& from) noexcept
    : CreateFunctionRequest() {
    *this = ::std::move(from);
  }

  inline CreateFunctionRequest& operator=(CreateFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const CreateFunctionRequest*>(
               &_CreateFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  void Swap(CreateFunctionRequest* other);
  friend void swap(CreateFunctionRequest& a, CreateFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFunctionRequest* New() const final {
    return CreateMaybeMessage<CreateFunctionRequest>(NULL);
  }

  CreateFunctionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateFunctionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateFunctionRequest& from);
  void MergeFrom(const CreateFunctionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .openmldb.common.ExternalFun fun = 1;
  bool has_fun() const;
  void clear_fun();
  static const int kFunFieldNumber = 1;
  private:
  const ::openmldb::common::ExternalFun& _internal_fun() const;
  public:
  const ::openmldb::common::ExternalFun& fun() const;
  ::openmldb::common::ExternalFun* release_fun();
  ::openmldb::common::ExternalFun* mutable_fun();
  void set_allocated_fun(::openmldb::common::ExternalFun* fun);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.CreateFunctionRequest)
 private:
  void set_has_fun();
  void clear_has_fun();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::openmldb::common::ExternalFun* fun_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateFunctionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.CreateFunctionResponse) */ {
 public:
  CreateFunctionResponse();
  virtual ~CreateFunctionResponse();

  CreateFunctionResponse(const CreateFunctionResponse& from);

  inline CreateFunctionResponse& operator=(const CreateFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateFunctionResponse(CreateFunctionResponse&& from) noexcept
    : CreateFunctionResponse() {
    *this = ::std::move(from);
  }

  inline CreateFunctionResponse& operator=(CreateFunctionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateFunctionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const CreateFunctionResponse*>(
               &_CreateFunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  void Swap(CreateFunctionResponse* other);
  friend void swap(CreateFunctionResponse& a, CreateFunctionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateFunctionResponse* New() const final {
    return CreateMaybeMessage<CreateFunctionResponse>(NULL);
  }

  CreateFunctionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateFunctionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateFunctionResponse& from);
  void MergeFrom(const CreateFunctionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateFunctionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.CreateFunctionResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropFunctionRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.DropFunctionRequest) */ {
 public:
  DropFunctionRequest();
  virtual ~DropFunctionRequest();

  DropFunctionRequest(const DropFunctionRequest& from);

  inline DropFunctionRequest& operator=(const DropFunctionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropFunctionRequest(DropFunctionRequest&& from) noexcept
    : DropFunctionRequest() {
    *this = ::std::move(from);
  }

  inline DropFunctionRequest& operator=(DropFunctionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropFunctionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropFunctionRequest* internal_default_instance() {
    return reinterpret_cast<const DropFunctionRequest*>(
               &_DropFunctionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  void Swap(DropFunctionRequest* other);
  friend void swap(DropFunctionRequest& a, DropFunctionRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropFunctionRequest* New() const final {
    return CreateMaybeMessage<DropFunctionRequest>(NULL);
  }

  DropFunctionRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropFunctionRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropFunctionRequest& from);
  void MergeFrom(const DropFunctionRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropFunctionRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.DropFunctionRequest)
 private:
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DropFunctionResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:openmldb.taskmanager.DropFunctionResponse) */ {
 public:
  DropFunctionResponse();
  virtual ~DropFunctionResponse();

  DropFunctionResponse(const DropFunctionResponse& from);

  inline DropFunctionResponse& operator=(const DropFunctionResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DropFunctionResponse(DropFunctionResponse&& from) noexcept
    : DropFunctionResponse() {
    *this = ::std::move(from);
  }

  inline DropFunctionResponse& operator=(DropFunctionResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DropFunctionResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DropFunctionResponse* internal_default_instance() {
    return reinterpret_cast<const DropFunctionResponse*>(
               &_DropFunctionResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  void Swap(DropFunctionResponse* other);
  friend void swap(DropFunctionResponse& a, DropFunctionResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DropFunctionResponse* New() const final {
    return CreateMaybeMessage<DropFunctionResponse>(NULL);
  }

  DropFunctionResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DropFunctionResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const DropFunctionResponse& from);
  void MergeFrom(const DropFunctionResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DropFunctionResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // required int32 code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::google::protobuf::int32 code() const;
  void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:openmldb.taskmanager.DropFunctionResponse)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::int32 code_;
  friend struct ::protobuf_taskmanager_2eproto::TableStruct;
};
// ===================================================================

class TaskManagerServer_Stub;

class TaskManagerServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TaskManagerServer() {};
 public:
  virtual ~TaskManagerServer();

  typedef TaskManagerServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void ShowJobs(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ShowJobsRequest* request,
                       ::openmldb::taskmanager::ShowJobsResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowJob(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ShowJobRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void StopJob(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::StopJobRequest* request,
                       ::openmldb::taskmanager::StopJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DeleteJob(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::DeleteJobRequest* request,
                       ::openmldb::taskmanager::DeleteJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ShowBatchVersion(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ShowBatchVersionRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RunBatchSql(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::RunBatchSqlRequest* request,
                       ::openmldb::taskmanager::RunBatchSqlResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void RunBatchAndShow(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::RunBatchAndShowRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ImportOnlineData(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ImportOnlineDataRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ImportOfflineData(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ImportOfflineDataRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void ExportOfflineData(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ExportOfflineDataRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DropOfflineTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::DropOfflineTableRequest* request,
                       ::openmldb::taskmanager::DropOfflineTableResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void GetJobLog(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::GetJobLogRequest* request,
                       ::openmldb::taskmanager::GetJobLogResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::CreateFunctionRequest* request,
                       ::openmldb::taskmanager::CreateFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void DropFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::DropFunctionRequest* request,
                       ::openmldb::taskmanager::DropFunctionResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TaskManagerServer);
};

class TaskManagerServer_Stub : public TaskManagerServer {
 public:
  TaskManagerServer_Stub(::google::protobuf::RpcChannel* channel);
  TaskManagerServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TaskManagerServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TaskManagerServer ------------------------------------------

  void ShowJobs(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ShowJobsRequest* request,
                       ::openmldb::taskmanager::ShowJobsResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowJob(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ShowJobRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  void StopJob(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::StopJobRequest* request,
                       ::openmldb::taskmanager::StopJobResponse* response,
                       ::google::protobuf::Closure* done);
  void DeleteJob(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::DeleteJobRequest* request,
                       ::openmldb::taskmanager::DeleteJobResponse* response,
                       ::google::protobuf::Closure* done);
  void ShowBatchVersion(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ShowBatchVersionRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  void RunBatchSql(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::RunBatchSqlRequest* request,
                       ::openmldb::taskmanager::RunBatchSqlResponse* response,
                       ::google::protobuf::Closure* done);
  void RunBatchAndShow(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::RunBatchAndShowRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  void ImportOnlineData(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ImportOnlineDataRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  void ImportOfflineData(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ImportOfflineDataRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  void ExportOfflineData(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::ExportOfflineDataRequest* request,
                       ::openmldb::taskmanager::ShowJobResponse* response,
                       ::google::protobuf::Closure* done);
  void DropOfflineTable(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::DropOfflineTableRequest* request,
                       ::openmldb::taskmanager::DropOfflineTableResponse* response,
                       ::google::protobuf::Closure* done);
  void GetJobLog(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::GetJobLogRequest* request,
                       ::openmldb::taskmanager::GetJobLogResponse* response,
                       ::google::protobuf::Closure* done);
  void CreateFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::CreateFunctionRequest* request,
                       ::openmldb::taskmanager::CreateFunctionResponse* response,
                       ::google::protobuf::Closure* done);
  void DropFunction(::google::protobuf::RpcController* controller,
                       const ::openmldb::taskmanager::DropFunctionRequest* request,
                       ::openmldb::taskmanager::DropFunctionResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TaskManagerServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// JobInfo

// required int32 id = 1;
inline bool JobInfo::has_id() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void JobInfo::set_has_id() {
  _has_bits_[0] |= 0x00000200u;
}
inline void JobInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void JobInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 JobInfo::id() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.id)
  return id_;
}
inline void JobInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.id)
}

// optional string job_type = 2;
inline bool JobInfo::has_job_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JobInfo::set_has_job_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JobInfo::clear_has_job_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JobInfo::clear_job_type() {
  job_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_job_type();
}
inline const ::std::string& JobInfo::job_type() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.job_type)
  return job_type_.GetNoArena();
}
inline void JobInfo::set_job_type(const ::std::string& value) {
  set_has_job_type();
  job_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.job_type)
}
#if LANG_CXX11
inline void JobInfo::set_job_type(::std::string&& value) {
  set_has_job_type();
  job_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.JobInfo.job_type)
}
#endif
inline void JobInfo::set_job_type(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_job_type();
  job_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.JobInfo.job_type)
}
inline void JobInfo::set_job_type(const char* value, size_t size) {
  set_has_job_type();
  job_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.JobInfo.job_type)
}
inline ::std::string* JobInfo::mutable_job_type() {
  set_has_job_type();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.JobInfo.job_type)
  return job_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInfo::release_job_type() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.JobInfo.job_type)
  if (!has_job_type()) {
    return NULL;
  }
  clear_has_job_type();
  return job_type_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInfo::set_allocated_job_type(::std::string* job_type) {
  if (job_type != NULL) {
    set_has_job_type();
  } else {
    clear_has_job_type();
  }
  job_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), job_type);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.JobInfo.job_type)
}

// optional string state = 3;
inline bool JobInfo::has_state() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JobInfo::set_has_state() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JobInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JobInfo::clear_state() {
  state_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_state();
}
inline const ::std::string& JobInfo::state() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.state)
  return state_.GetNoArena();
}
inline void JobInfo::set_state(const ::std::string& value) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.state)
}
#if LANG_CXX11
inline void JobInfo::set_state(::std::string&& value) {
  set_has_state();
  state_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.JobInfo.state)
}
#endif
inline void JobInfo::set_state(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.JobInfo.state)
}
inline void JobInfo::set_state(const char* value, size_t size) {
  set_has_state();
  state_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.JobInfo.state)
}
inline ::std::string* JobInfo::mutable_state() {
  set_has_state();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.JobInfo.state)
  return state_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInfo::release_state() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.JobInfo.state)
  if (!has_state()) {
    return NULL;
  }
  clear_has_state();
  return state_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInfo::set_allocated_state(::std::string* state) {
  if (state != NULL) {
    set_has_state();
  } else {
    clear_has_state();
  }
  state_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), state);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.JobInfo.state)
}

// optional int64 start_time = 4;
inline bool JobInfo::has_start_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void JobInfo::set_has_start_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void JobInfo::clear_has_start_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void JobInfo::clear_start_time() {
  start_time_ = GOOGLE_LONGLONG(0);
  clear_has_start_time();
}
inline ::google::protobuf::int64 JobInfo::start_time() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.start_time)
  return start_time_;
}
inline void JobInfo::set_start_time(::google::protobuf::int64 value) {
  set_has_start_time();
  start_time_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.start_time)
}

// optional int64 end_time = 5;
inline bool JobInfo::has_end_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void JobInfo::set_has_end_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void JobInfo::clear_has_end_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void JobInfo::clear_end_time() {
  end_time_ = GOOGLE_LONGLONG(0);
  clear_has_end_time();
}
inline ::google::protobuf::int64 JobInfo::end_time() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.end_time)
  return end_time_;
}
inline void JobInfo::set_end_time(::google::protobuf::int64 value) {
  set_has_end_time();
  end_time_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.end_time)
}

// optional string parameter = 6;
inline bool JobInfo::has_parameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JobInfo::set_has_parameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JobInfo::clear_has_parameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JobInfo::clear_parameter() {
  parameter_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameter();
}
inline const ::std::string& JobInfo::parameter() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.parameter)
  return parameter_.GetNoArena();
}
inline void JobInfo::set_parameter(const ::std::string& value) {
  set_has_parameter();
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.parameter)
}
#if LANG_CXX11
inline void JobInfo::set_parameter(::std::string&& value) {
  set_has_parameter();
  parameter_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.JobInfo.parameter)
}
#endif
inline void JobInfo::set_parameter(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parameter();
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.JobInfo.parameter)
}
inline void JobInfo::set_parameter(const char* value, size_t size) {
  set_has_parameter();
  parameter_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.JobInfo.parameter)
}
inline ::std::string* JobInfo::mutable_parameter() {
  set_has_parameter();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.JobInfo.parameter)
  return parameter_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInfo::release_parameter() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.JobInfo.parameter)
  if (!has_parameter()) {
    return NULL;
  }
  clear_has_parameter();
  return parameter_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInfo::set_allocated_parameter(::std::string* parameter) {
  if (parameter != NULL) {
    set_has_parameter();
  } else {
    clear_has_parameter();
  }
  parameter_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.JobInfo.parameter)
}

// optional string cluster = 7;
inline bool JobInfo::has_cluster() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void JobInfo::set_has_cluster() {
  _has_bits_[0] |= 0x00000008u;
}
inline void JobInfo::clear_has_cluster() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void JobInfo::clear_cluster() {
  cluster_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_cluster();
}
inline const ::std::string& JobInfo::cluster() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.cluster)
  return cluster_.GetNoArena();
}
inline void JobInfo::set_cluster(const ::std::string& value) {
  set_has_cluster();
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.cluster)
}
#if LANG_CXX11
inline void JobInfo::set_cluster(::std::string&& value) {
  set_has_cluster();
  cluster_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.JobInfo.cluster)
}
#endif
inline void JobInfo::set_cluster(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_cluster();
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.JobInfo.cluster)
}
inline void JobInfo::set_cluster(const char* value, size_t size) {
  set_has_cluster();
  cluster_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.JobInfo.cluster)
}
inline ::std::string* JobInfo::mutable_cluster() {
  set_has_cluster();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.JobInfo.cluster)
  return cluster_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInfo::release_cluster() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.JobInfo.cluster)
  if (!has_cluster()) {
    return NULL;
  }
  clear_has_cluster();
  return cluster_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInfo::set_allocated_cluster(::std::string* cluster) {
  if (cluster != NULL) {
    set_has_cluster();
  } else {
    clear_has_cluster();
  }
  cluster_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), cluster);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.JobInfo.cluster)
}

// optional string application_id = 8;
inline bool JobInfo::has_application_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void JobInfo::set_has_application_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void JobInfo::clear_has_application_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void JobInfo::clear_application_id() {
  application_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_application_id();
}
inline const ::std::string& JobInfo::application_id() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.application_id)
  return application_id_.GetNoArena();
}
inline void JobInfo::set_application_id(const ::std::string& value) {
  set_has_application_id();
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.application_id)
}
#if LANG_CXX11
inline void JobInfo::set_application_id(::std::string&& value) {
  set_has_application_id();
  application_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.JobInfo.application_id)
}
#endif
inline void JobInfo::set_application_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_application_id();
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.JobInfo.application_id)
}
inline void JobInfo::set_application_id(const char* value, size_t size) {
  set_has_application_id();
  application_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.JobInfo.application_id)
}
inline ::std::string* JobInfo::mutable_application_id() {
  set_has_application_id();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.JobInfo.application_id)
  return application_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInfo::release_application_id() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.JobInfo.application_id)
  if (!has_application_id()) {
    return NULL;
  }
  clear_has_application_id();
  return application_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInfo::set_allocated_application_id(::std::string* application_id) {
  if (application_id != NULL) {
    set_has_application_id();
  } else {
    clear_has_application_id();
  }
  application_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), application_id);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.JobInfo.application_id)
}

// optional string error = 9;
inline bool JobInfo::has_error() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void JobInfo::set_has_error() {
  _has_bits_[0] |= 0x00000020u;
}
inline void JobInfo::clear_has_error() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void JobInfo::clear_error() {
  error_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_error();
}
inline const ::std::string& JobInfo::error() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.error)
  return error_.GetNoArena();
}
inline void JobInfo::set_error(const ::std::string& value) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.error)
}
#if LANG_CXX11
inline void JobInfo::set_error(::std::string&& value) {
  set_has_error();
  error_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.JobInfo.error)
}
#endif
inline void JobInfo::set_error(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.JobInfo.error)
}
inline void JobInfo::set_error(const char* value, size_t size) {
  set_has_error();
  error_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.JobInfo.error)
}
inline ::std::string* JobInfo::mutable_error() {
  set_has_error();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.JobInfo.error)
  return error_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInfo::release_error() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.JobInfo.error)
  if (!has_error()) {
    return NULL;
  }
  clear_has_error();
  return error_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInfo::set_allocated_error(::std::string* error) {
  if (error != NULL) {
    set_has_error();
  } else {
    clear_has_error();
  }
  error_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), error);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.JobInfo.error)
}

// optional string tracking_url = 10;
inline bool JobInfo::has_tracking_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void JobInfo::set_has_tracking_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void JobInfo::clear_has_tracking_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void JobInfo::clear_tracking_url() {
  tracking_url_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_tracking_url();
}
inline const ::std::string& JobInfo::tracking_url() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.tracking_url)
  return tracking_url_.GetNoArena();
}
inline void JobInfo::set_tracking_url(const ::std::string& value) {
  set_has_tracking_url();
  tracking_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.tracking_url)
}
#if LANG_CXX11
inline void JobInfo::set_tracking_url(::std::string&& value) {
  set_has_tracking_url();
  tracking_url_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.JobInfo.tracking_url)
}
#endif
inline void JobInfo::set_tracking_url(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_tracking_url();
  tracking_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.JobInfo.tracking_url)
}
inline void JobInfo::set_tracking_url(const char* value, size_t size) {
  set_has_tracking_url();
  tracking_url_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.JobInfo.tracking_url)
}
inline ::std::string* JobInfo::mutable_tracking_url() {
  set_has_tracking_url();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.JobInfo.tracking_url)
  return tracking_url_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* JobInfo::release_tracking_url() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.JobInfo.tracking_url)
  if (!has_tracking_url()) {
    return NULL;
  }
  clear_has_tracking_url();
  return tracking_url_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void JobInfo::set_allocated_tracking_url(::std::string* tracking_url) {
  if (tracking_url != NULL) {
    set_has_tracking_url();
  } else {
    clear_has_tracking_url();
  }
  tracking_url_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), tracking_url);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.JobInfo.tracking_url)
}

// optional float progress = 11;
inline bool JobInfo::has_progress() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void JobInfo::set_has_progress() {
  _has_bits_[0] |= 0x00000400u;
}
inline void JobInfo::clear_has_progress() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void JobInfo::clear_progress() {
  progress_ = 0;
  clear_has_progress();
}
inline float JobInfo::progress() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.JobInfo.progress)
  return progress_;
}
inline void JobInfo::set_progress(float value) {
  set_has_progress();
  progress_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.JobInfo.progress)
}

// -------------------------------------------------------------------

// ShowJobsRequest

// optional bool unfinished = 1 [default = false];
inline bool ShowJobsRequest::has_unfinished() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowJobsRequest::set_has_unfinished() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowJobsRequest::clear_has_unfinished() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowJobsRequest::clear_unfinished() {
  unfinished_ = false;
  clear_has_unfinished();
}
inline bool ShowJobsRequest::unfinished() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobsRequest.unfinished)
  return unfinished_;
}
inline void ShowJobsRequest::set_unfinished(bool value) {
  set_has_unfinished();
  unfinished_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ShowJobsRequest.unfinished)
}

// -------------------------------------------------------------------

// ShowJobsResponse

// required int32 code = 1;
inline bool ShowJobsResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowJobsResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowJobsResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowJobsResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowJobsResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobsResponse.code)
  return code_;
}
inline void ShowJobsResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ShowJobsResponse.code)
}

// optional string msg = 2;
inline bool ShowJobsResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowJobsResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowJobsResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowJobsResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowJobsResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobsResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowJobsResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ShowJobsResponse.msg)
}
#if LANG_CXX11
inline void ShowJobsResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ShowJobsResponse.msg)
}
#endif
inline void ShowJobsResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ShowJobsResponse.msg)
}
inline void ShowJobsResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ShowJobsResponse.msg)
}
inline ::std::string* ShowJobsResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ShowJobsResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowJobsResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ShowJobsResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowJobsResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ShowJobsResponse.msg)
}

// repeated .openmldb.taskmanager.JobInfo jobs = 3;
inline int ShowJobsResponse::jobs_size() const {
  return jobs_.size();
}
inline void ShowJobsResponse::clear_jobs() {
  jobs_.Clear();
}
inline ::openmldb::taskmanager::JobInfo* ShowJobsResponse::mutable_jobs(int index) {
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ShowJobsResponse.jobs)
  return jobs_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::openmldb::taskmanager::JobInfo >*
ShowJobsResponse::mutable_jobs() {
  // @@protoc_insertion_point(field_mutable_list:openmldb.taskmanager.ShowJobsResponse.jobs)
  return &jobs_;
}
inline const ::openmldb::taskmanager::JobInfo& ShowJobsResponse::jobs(int index) const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobsResponse.jobs)
  return jobs_.Get(index);
}
inline ::openmldb::taskmanager::JobInfo* ShowJobsResponse::add_jobs() {
  // @@protoc_insertion_point(field_add:openmldb.taskmanager.ShowJobsResponse.jobs)
  return jobs_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::openmldb::taskmanager::JobInfo >&
ShowJobsResponse::jobs() const {
  // @@protoc_insertion_point(field_list:openmldb.taskmanager.ShowJobsResponse.jobs)
  return jobs_;
}

// -------------------------------------------------------------------

// ShowJobRequest

// required int32 id = 1;
inline bool ShowJobRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowJobRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowJobRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowJobRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ShowJobRequest::id() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobRequest.id)
  return id_;
}
inline void ShowJobRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ShowJobRequest.id)
}

// -------------------------------------------------------------------

// ShowJobResponse

// required int32 code = 1;
inline bool ShowJobResponse::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShowJobResponse::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShowJobResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShowJobResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 ShowJobResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobResponse.code)
  return code_;
}
inline void ShowJobResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ShowJobResponse.code)
}

// optional string msg = 2;
inline bool ShowJobResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShowJobResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShowJobResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShowJobResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& ShowJobResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobResponse.msg)
  return msg_.GetNoArena();
}
inline void ShowJobResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ShowJobResponse.msg)
}
#if LANG_CXX11
inline void ShowJobResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ShowJobResponse.msg)
}
#endif
inline void ShowJobResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ShowJobResponse.msg)
}
inline void ShowJobResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ShowJobResponse.msg)
}
inline ::std::string* ShowJobResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ShowJobResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ShowJobResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ShowJobResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ShowJobResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ShowJobResponse.msg)
}

// optional .openmldb.taskmanager.JobInfo job = 3;
inline bool ShowJobResponse::has_job() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShowJobResponse::set_has_job() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShowJobResponse::clear_has_job() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShowJobResponse::clear_job() {
  if (job_ != NULL) job_->Clear();
  clear_has_job();
}
inline const ::openmldb::taskmanager::JobInfo& ShowJobResponse::_internal_job() const {
  return *job_;
}
inline const ::openmldb::taskmanager::JobInfo& ShowJobResponse::job() const {
  const ::openmldb::taskmanager::JobInfo* p = job_;
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ShowJobResponse.job)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::taskmanager::JobInfo*>(
      &::openmldb::taskmanager::_JobInfo_default_instance_);
}
inline ::openmldb::taskmanager::JobInfo* ShowJobResponse::release_job() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ShowJobResponse.job)
  clear_has_job();
  ::openmldb::taskmanager::JobInfo* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::openmldb::taskmanager::JobInfo* ShowJobResponse::mutable_job() {
  set_has_job();
  if (job_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::taskmanager::JobInfo>(GetArenaNoVirtual());
    job_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ShowJobResponse.job)
  return job_;
}
inline void ShowJobResponse::set_allocated_job(::openmldb::taskmanager::JobInfo* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    set_has_job();
  } else {
    clear_has_job();
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ShowJobResponse.job)
}

// -------------------------------------------------------------------

// StopJobRequest

// required int32 id = 1;
inline bool StopJobRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopJobRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopJobRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopJobRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 StopJobRequest::id() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.StopJobRequest.id)
  return id_;
}
inline void StopJobRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.StopJobRequest.id)
}

// -------------------------------------------------------------------

// StopJobResponse

// required int32 code = 1;
inline bool StopJobResponse::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopJobResponse::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopJobResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopJobResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 StopJobResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.StopJobResponse.code)
  return code_;
}
inline void StopJobResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.StopJobResponse.code)
}

// optional string msg = 2;
inline bool StopJobResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopJobResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopJobResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopJobResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& StopJobResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.StopJobResponse.msg)
  return msg_.GetNoArena();
}
inline void StopJobResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.StopJobResponse.msg)
}
#if LANG_CXX11
inline void StopJobResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.StopJobResponse.msg)
}
#endif
inline void StopJobResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.StopJobResponse.msg)
}
inline void StopJobResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.StopJobResponse.msg)
}
inline ::std::string* StopJobResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.StopJobResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* StopJobResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.StopJobResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void StopJobResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.StopJobResponse.msg)
}

// optional .openmldb.taskmanager.JobInfo job = 3;
inline bool StopJobResponse::has_job() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopJobResponse::set_has_job() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopJobResponse::clear_has_job() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopJobResponse::clear_job() {
  if (job_ != NULL) job_->Clear();
  clear_has_job();
}
inline const ::openmldb::taskmanager::JobInfo& StopJobResponse::_internal_job() const {
  return *job_;
}
inline const ::openmldb::taskmanager::JobInfo& StopJobResponse::job() const {
  const ::openmldb::taskmanager::JobInfo* p = job_;
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.StopJobResponse.job)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::taskmanager::JobInfo*>(
      &::openmldb::taskmanager::_JobInfo_default_instance_);
}
inline ::openmldb::taskmanager::JobInfo* StopJobResponse::release_job() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.StopJobResponse.job)
  clear_has_job();
  ::openmldb::taskmanager::JobInfo* temp = job_;
  job_ = NULL;
  return temp;
}
inline ::openmldb::taskmanager::JobInfo* StopJobResponse::mutable_job() {
  set_has_job();
  if (job_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::taskmanager::JobInfo>(GetArenaNoVirtual());
    job_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.StopJobResponse.job)
  return job_;
}
inline void StopJobResponse::set_allocated_job(::openmldb::taskmanager::JobInfo* job) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete job_;
  }
  if (job) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      job = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, job, submessage_arena);
    }
    set_has_job();
  } else {
    clear_has_job();
  }
  job_ = job;
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.StopJobResponse.job)
}

// -------------------------------------------------------------------

// DeleteJobRequest

// required int32 id = 1;
inline bool DeleteJobRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteJobRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteJobRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteJobRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeleteJobRequest::id() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DeleteJobRequest.id)
  return id_;
}
inline void DeleteJobRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DeleteJobRequest.id)
}

// -------------------------------------------------------------------

// DeleteJobResponse

// required int32 code = 1;
inline bool DeleteJobResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeleteJobResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeleteJobResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeleteJobResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 DeleteJobResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DeleteJobResponse.code)
  return code_;
}
inline void DeleteJobResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DeleteJobResponse.code)
}

// optional string msg = 2;
inline bool DeleteJobResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteJobResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteJobResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteJobResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& DeleteJobResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DeleteJobResponse.msg)
  return msg_.GetNoArena();
}
inline void DeleteJobResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DeleteJobResponse.msg)
}
#if LANG_CXX11
inline void DeleteJobResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.DeleteJobResponse.msg)
}
#endif
inline void DeleteJobResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.DeleteJobResponse.msg)
}
inline void DeleteJobResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.DeleteJobResponse.msg)
}
inline ::std::string* DeleteJobResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.DeleteJobResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DeleteJobResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.DeleteJobResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DeleteJobResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.DeleteJobResponse.msg)
}

// -------------------------------------------------------------------

// ShowBatchVersionRequest

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RunBatchSqlRequest

// required string sql = 1;
inline bool RunBatchSqlRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunBatchSqlRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunBatchSqlRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunBatchSqlRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& RunBatchSqlRequest::sql() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchSqlRequest.sql)
  return sql_.GetNoArena();
}
inline void RunBatchSqlRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchSqlRequest.sql)
}
#if LANG_CXX11
inline void RunBatchSqlRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.RunBatchSqlRequest.sql)
}
#endif
inline void RunBatchSqlRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.RunBatchSqlRequest.sql)
}
inline void RunBatchSqlRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.RunBatchSqlRequest.sql)
}
inline ::std::string* RunBatchSqlRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.RunBatchSqlRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunBatchSqlRequest::release_sql() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.RunBatchSqlRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunBatchSqlRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.RunBatchSqlRequest.sql)
}

// map<string, string> conf = 2;
inline int RunBatchSqlRequest::conf_size() const {
  return conf_.size();
}
inline void RunBatchSqlRequest::clear_conf() {
  conf_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RunBatchSqlRequest::conf() const {
  // @@protoc_insertion_point(field_map:openmldb.taskmanager.RunBatchSqlRequest.conf)
  return conf_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RunBatchSqlRequest::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_map:openmldb.taskmanager.RunBatchSqlRequest.conf)
  return conf_.MutableMap();
}

// optional string default_db = 3 [default = ""];
inline bool RunBatchSqlRequest::has_default_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunBatchSqlRequest::set_has_default_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunBatchSqlRequest::clear_has_default_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunBatchSqlRequest::clear_default_db() {
  default_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_db();
}
inline const ::std::string& RunBatchSqlRequest::default_db() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchSqlRequest.default_db)
  return default_db_.GetNoArena();
}
inline void RunBatchSqlRequest::set_default_db(const ::std::string& value) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchSqlRequest.default_db)
}
#if LANG_CXX11
inline void RunBatchSqlRequest::set_default_db(::std::string&& value) {
  set_has_default_db();
  default_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.RunBatchSqlRequest.default_db)
}
#endif
inline void RunBatchSqlRequest::set_default_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.RunBatchSqlRequest.default_db)
}
inline void RunBatchSqlRequest::set_default_db(const char* value, size_t size) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.RunBatchSqlRequest.default_db)
}
inline ::std::string* RunBatchSqlRequest::mutable_default_db() {
  set_has_default_db();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.RunBatchSqlRequest.default_db)
  return default_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunBatchSqlRequest::release_default_db() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.RunBatchSqlRequest.default_db)
  if (!has_default_db()) {
    return NULL;
  }
  clear_has_default_db();
  return default_db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunBatchSqlRequest::set_allocated_default_db(::std::string* default_db) {
  if (default_db != NULL) {
    set_has_default_db();
  } else {
    clear_has_default_db();
  }
  default_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.RunBatchSqlRequest.default_db)
}

// -------------------------------------------------------------------

// RunBatchSqlResponse

// required int32 code = 1;
inline bool RunBatchSqlResponse::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RunBatchSqlResponse::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RunBatchSqlResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RunBatchSqlResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 RunBatchSqlResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchSqlResponse.code)
  return code_;
}
inline void RunBatchSqlResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchSqlResponse.code)
}

// optional string msg = 2;
inline bool RunBatchSqlResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunBatchSqlResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunBatchSqlResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunBatchSqlResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& RunBatchSqlResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchSqlResponse.msg)
  return msg_.GetNoArena();
}
inline void RunBatchSqlResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchSqlResponse.msg)
}
#if LANG_CXX11
inline void RunBatchSqlResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.RunBatchSqlResponse.msg)
}
#endif
inline void RunBatchSqlResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.RunBatchSqlResponse.msg)
}
inline void RunBatchSqlResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.RunBatchSqlResponse.msg)
}
inline ::std::string* RunBatchSqlResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.RunBatchSqlResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunBatchSqlResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.RunBatchSqlResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunBatchSqlResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.RunBatchSqlResponse.msg)
}

// optional string output = 3;
inline bool RunBatchSqlResponse::has_output() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunBatchSqlResponse::set_has_output() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunBatchSqlResponse::clear_has_output() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunBatchSqlResponse::clear_output() {
  output_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output();
}
inline const ::std::string& RunBatchSqlResponse::output() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchSqlResponse.output)
  return output_.GetNoArena();
}
inline void RunBatchSqlResponse::set_output(const ::std::string& value) {
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchSqlResponse.output)
}
#if LANG_CXX11
inline void RunBatchSqlResponse::set_output(::std::string&& value) {
  set_has_output();
  output_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.RunBatchSqlResponse.output)
}
#endif
inline void RunBatchSqlResponse::set_output(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.RunBatchSqlResponse.output)
}
inline void RunBatchSqlResponse::set_output(const char* value, size_t size) {
  set_has_output();
  output_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.RunBatchSqlResponse.output)
}
inline ::std::string* RunBatchSqlResponse::mutable_output() {
  set_has_output();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.RunBatchSqlResponse.output)
  return output_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunBatchSqlResponse::release_output() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.RunBatchSqlResponse.output)
  if (!has_output()) {
    return NULL;
  }
  clear_has_output();
  return output_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunBatchSqlResponse::set_allocated_output(::std::string* output) {
  if (output != NULL) {
    set_has_output();
  } else {
    clear_has_output();
  }
  output_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.RunBatchSqlResponse.output)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// RunBatchAndShowRequest

// required string sql = 1;
inline bool RunBatchAndShowRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RunBatchAndShowRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RunBatchAndShowRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RunBatchAndShowRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& RunBatchAndShowRequest::sql() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchAndShowRequest.sql)
  return sql_.GetNoArena();
}
inline void RunBatchAndShowRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchAndShowRequest.sql)
}
#if LANG_CXX11
inline void RunBatchAndShowRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.RunBatchAndShowRequest.sql)
}
#endif
inline void RunBatchAndShowRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.RunBatchAndShowRequest.sql)
}
inline void RunBatchAndShowRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.RunBatchAndShowRequest.sql)
}
inline ::std::string* RunBatchAndShowRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.RunBatchAndShowRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunBatchAndShowRequest::release_sql() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.RunBatchAndShowRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunBatchAndShowRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.RunBatchAndShowRequest.sql)
}

// map<string, string> conf = 2;
inline int RunBatchAndShowRequest::conf_size() const {
  return conf_.size();
}
inline void RunBatchAndShowRequest::clear_conf() {
  conf_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
RunBatchAndShowRequest::conf() const {
  // @@protoc_insertion_point(field_map:openmldb.taskmanager.RunBatchAndShowRequest.conf)
  return conf_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
RunBatchAndShowRequest::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_map:openmldb.taskmanager.RunBatchAndShowRequest.conf)
  return conf_.MutableMap();
}

// optional string default_db = 3 [default = ""];
inline bool RunBatchAndShowRequest::has_default_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RunBatchAndShowRequest::set_has_default_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RunBatchAndShowRequest::clear_has_default_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RunBatchAndShowRequest::clear_default_db() {
  default_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_db();
}
inline const ::std::string& RunBatchAndShowRequest::default_db() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
  return default_db_.GetNoArena();
}
inline void RunBatchAndShowRequest::set_default_db(const ::std::string& value) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
}
#if LANG_CXX11
inline void RunBatchAndShowRequest::set_default_db(::std::string&& value) {
  set_has_default_db();
  default_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
}
#endif
inline void RunBatchAndShowRequest::set_default_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
}
inline void RunBatchAndShowRequest::set_default_db(const char* value, size_t size) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
}
inline ::std::string* RunBatchAndShowRequest::mutable_default_db() {
  set_has_default_db();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
  return default_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RunBatchAndShowRequest::release_default_db() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
  if (!has_default_db()) {
    return NULL;
  }
  clear_has_default_db();
  return default_db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RunBatchAndShowRequest::set_allocated_default_db(::std::string* default_db) {
  if (default_db != NULL) {
    set_has_default_db();
  } else {
    clear_has_default_db();
  }
  default_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.RunBatchAndShowRequest.default_db)
}

// optional bool sync_job = 4 [default = false];
inline bool RunBatchAndShowRequest::has_sync_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RunBatchAndShowRequest::set_has_sync_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RunBatchAndShowRequest::clear_has_sync_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RunBatchAndShowRequest::clear_sync_job() {
  sync_job_ = false;
  clear_has_sync_job();
}
inline bool RunBatchAndShowRequest::sync_job() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.RunBatchAndShowRequest.sync_job)
  return sync_job_;
}
inline void RunBatchAndShowRequest::set_sync_job(bool value) {
  set_has_sync_job();
  sync_job_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.RunBatchAndShowRequest.sync_job)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ImportOnlineDataRequest

// required string sql = 1;
inline bool ImportOnlineDataRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportOnlineDataRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportOnlineDataRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportOnlineDataRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ImportOnlineDataRequest::sql() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ImportOnlineDataRequest.sql)
  return sql_.GetNoArena();
}
inline void ImportOnlineDataRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ImportOnlineDataRequest.sql)
}
#if LANG_CXX11
inline void ImportOnlineDataRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ImportOnlineDataRequest.sql)
}
#endif
inline void ImportOnlineDataRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ImportOnlineDataRequest.sql)
}
inline void ImportOnlineDataRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ImportOnlineDataRequest.sql)
}
inline ::std::string* ImportOnlineDataRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ImportOnlineDataRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportOnlineDataRequest::release_sql() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ImportOnlineDataRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportOnlineDataRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ImportOnlineDataRequest.sql)
}

// map<string, string> conf = 2;
inline int ImportOnlineDataRequest::conf_size() const {
  return conf_.size();
}
inline void ImportOnlineDataRequest::clear_conf() {
  conf_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ImportOnlineDataRequest::conf() const {
  // @@protoc_insertion_point(field_map:openmldb.taskmanager.ImportOnlineDataRequest.conf)
  return conf_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ImportOnlineDataRequest::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_map:openmldb.taskmanager.ImportOnlineDataRequest.conf)
  return conf_.MutableMap();
}

// optional string default_db = 3 [default = ""];
inline bool ImportOnlineDataRequest::has_default_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportOnlineDataRequest::set_has_default_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportOnlineDataRequest::clear_has_default_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportOnlineDataRequest::clear_default_db() {
  default_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_db();
}
inline const ::std::string& ImportOnlineDataRequest::default_db() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
  return default_db_.GetNoArena();
}
inline void ImportOnlineDataRequest::set_default_db(const ::std::string& value) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
}
#if LANG_CXX11
inline void ImportOnlineDataRequest::set_default_db(::std::string&& value) {
  set_has_default_db();
  default_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
}
#endif
inline void ImportOnlineDataRequest::set_default_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
}
inline void ImportOnlineDataRequest::set_default_db(const char* value, size_t size) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
}
inline ::std::string* ImportOnlineDataRequest::mutable_default_db() {
  set_has_default_db();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
  return default_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportOnlineDataRequest::release_default_db() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
  if (!has_default_db()) {
    return NULL;
  }
  clear_has_default_db();
  return default_db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportOnlineDataRequest::set_allocated_default_db(::std::string* default_db) {
  if (default_db != NULL) {
    set_has_default_db();
  } else {
    clear_has_default_db();
  }
  default_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ImportOnlineDataRequest.default_db)
}

// optional bool sync_job = 4 [default = false];
inline bool ImportOnlineDataRequest::has_sync_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImportOnlineDataRequest::set_has_sync_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImportOnlineDataRequest::clear_has_sync_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImportOnlineDataRequest::clear_sync_job() {
  sync_job_ = false;
  clear_has_sync_job();
}
inline bool ImportOnlineDataRequest::sync_job() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ImportOnlineDataRequest.sync_job)
  return sync_job_;
}
inline void ImportOnlineDataRequest::set_sync_job(bool value) {
  set_has_sync_job();
  sync_job_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ImportOnlineDataRequest.sync_job)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ImportOfflineDataRequest

// required string sql = 1;
inline bool ImportOfflineDataRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ImportOfflineDataRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ImportOfflineDataRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ImportOfflineDataRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ImportOfflineDataRequest::sql() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ImportOfflineDataRequest.sql)
  return sql_.GetNoArena();
}
inline void ImportOfflineDataRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ImportOfflineDataRequest.sql)
}
#if LANG_CXX11
inline void ImportOfflineDataRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ImportOfflineDataRequest.sql)
}
#endif
inline void ImportOfflineDataRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ImportOfflineDataRequest.sql)
}
inline void ImportOfflineDataRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ImportOfflineDataRequest.sql)
}
inline ::std::string* ImportOfflineDataRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ImportOfflineDataRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportOfflineDataRequest::release_sql() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ImportOfflineDataRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportOfflineDataRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ImportOfflineDataRequest.sql)
}

// map<string, string> conf = 2;
inline int ImportOfflineDataRequest::conf_size() const {
  return conf_.size();
}
inline void ImportOfflineDataRequest::clear_conf() {
  conf_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ImportOfflineDataRequest::conf() const {
  // @@protoc_insertion_point(field_map:openmldb.taskmanager.ImportOfflineDataRequest.conf)
  return conf_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ImportOfflineDataRequest::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_map:openmldb.taskmanager.ImportOfflineDataRequest.conf)
  return conf_.MutableMap();
}

// optional string default_db = 3 [default = ""];
inline bool ImportOfflineDataRequest::has_default_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ImportOfflineDataRequest::set_has_default_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ImportOfflineDataRequest::clear_has_default_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ImportOfflineDataRequest::clear_default_db() {
  default_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_db();
}
inline const ::std::string& ImportOfflineDataRequest::default_db() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
  return default_db_.GetNoArena();
}
inline void ImportOfflineDataRequest::set_default_db(const ::std::string& value) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
}
#if LANG_CXX11
inline void ImportOfflineDataRequest::set_default_db(::std::string&& value) {
  set_has_default_db();
  default_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
}
#endif
inline void ImportOfflineDataRequest::set_default_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
}
inline void ImportOfflineDataRequest::set_default_db(const char* value, size_t size) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
}
inline ::std::string* ImportOfflineDataRequest::mutable_default_db() {
  set_has_default_db();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
  return default_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ImportOfflineDataRequest::release_default_db() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
  if (!has_default_db()) {
    return NULL;
  }
  clear_has_default_db();
  return default_db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ImportOfflineDataRequest::set_allocated_default_db(::std::string* default_db) {
  if (default_db != NULL) {
    set_has_default_db();
  } else {
    clear_has_default_db();
  }
  default_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ImportOfflineDataRequest.default_db)
}

// optional bool sync_job = 4 [default = false];
inline bool ImportOfflineDataRequest::has_sync_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ImportOfflineDataRequest::set_has_sync_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ImportOfflineDataRequest::clear_has_sync_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ImportOfflineDataRequest::clear_sync_job() {
  sync_job_ = false;
  clear_has_sync_job();
}
inline bool ImportOfflineDataRequest::sync_job() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ImportOfflineDataRequest.sync_job)
  return sync_job_;
}
inline void ImportOfflineDataRequest::set_sync_job(bool value) {
  set_has_sync_job();
  sync_job_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ImportOfflineDataRequest.sync_job)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ExportOfflineDataRequest

// required string sql = 1;
inline bool ExportOfflineDataRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExportOfflineDataRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExportOfflineDataRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExportOfflineDataRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ExportOfflineDataRequest::sql() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ExportOfflineDataRequest.sql)
  return sql_.GetNoArena();
}
inline void ExportOfflineDataRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ExportOfflineDataRequest.sql)
}
#if LANG_CXX11
inline void ExportOfflineDataRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ExportOfflineDataRequest.sql)
}
#endif
inline void ExportOfflineDataRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ExportOfflineDataRequest.sql)
}
inline void ExportOfflineDataRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ExportOfflineDataRequest.sql)
}
inline ::std::string* ExportOfflineDataRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ExportOfflineDataRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportOfflineDataRequest::release_sql() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ExportOfflineDataRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportOfflineDataRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ExportOfflineDataRequest.sql)
}

// map<string, string> conf = 2;
inline int ExportOfflineDataRequest::conf_size() const {
  return conf_.size();
}
inline void ExportOfflineDataRequest::clear_conf() {
  conf_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::std::string >&
ExportOfflineDataRequest::conf() const {
  // @@protoc_insertion_point(field_map:openmldb.taskmanager.ExportOfflineDataRequest.conf)
  return conf_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::std::string >*
ExportOfflineDataRequest::mutable_conf() {
  // @@protoc_insertion_point(field_mutable_map:openmldb.taskmanager.ExportOfflineDataRequest.conf)
  return conf_.MutableMap();
}

// optional string default_db = 3 [default = ""];
inline bool ExportOfflineDataRequest::has_default_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExportOfflineDataRequest::set_has_default_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExportOfflineDataRequest::clear_has_default_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExportOfflineDataRequest::clear_default_db() {
  default_db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_default_db();
}
inline const ::std::string& ExportOfflineDataRequest::default_db() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
  return default_db_.GetNoArena();
}
inline void ExportOfflineDataRequest::set_default_db(const ::std::string& value) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
}
#if LANG_CXX11
inline void ExportOfflineDataRequest::set_default_db(::std::string&& value) {
  set_has_default_db();
  default_db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
}
#endif
inline void ExportOfflineDataRequest::set_default_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
}
inline void ExportOfflineDataRequest::set_default_db(const char* value, size_t size) {
  set_has_default_db();
  default_db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
}
inline ::std::string* ExportOfflineDataRequest::mutable_default_db() {
  set_has_default_db();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
  return default_db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExportOfflineDataRequest::release_default_db() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
  if (!has_default_db()) {
    return NULL;
  }
  clear_has_default_db();
  return default_db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExportOfflineDataRequest::set_allocated_default_db(::std::string* default_db) {
  if (default_db != NULL) {
    set_has_default_db();
  } else {
    clear_has_default_db();
  }
  default_db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), default_db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.ExportOfflineDataRequest.default_db)
}

// optional bool sync_job = 4 [default = false];
inline bool ExportOfflineDataRequest::has_sync_job() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExportOfflineDataRequest::set_has_sync_job() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExportOfflineDataRequest::clear_has_sync_job() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExportOfflineDataRequest::clear_sync_job() {
  sync_job_ = false;
  clear_has_sync_job();
}
inline bool ExportOfflineDataRequest::sync_job() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.ExportOfflineDataRequest.sync_job)
  return sync_job_;
}
inline void ExportOfflineDataRequest::set_sync_job(bool value) {
  set_has_sync_job();
  sync_job_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.ExportOfflineDataRequest.sync_job)
}

// -------------------------------------------------------------------

// DropOfflineTableRequest

// required string db = 1;
inline bool DropOfflineTableRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropOfflineTableRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropOfflineTableRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropOfflineTableRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& DropOfflineTableRequest::db() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DropOfflineTableRequest.db)
  return db_.GetNoArena();
}
inline void DropOfflineTableRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DropOfflineTableRequest.db)
}
#if LANG_CXX11
inline void DropOfflineTableRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.DropOfflineTableRequest.db)
}
#endif
inline void DropOfflineTableRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.DropOfflineTableRequest.db)
}
inline void DropOfflineTableRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.DropOfflineTableRequest.db)
}
inline ::std::string* DropOfflineTableRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.DropOfflineTableRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropOfflineTableRequest::release_db() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.DropOfflineTableRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropOfflineTableRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.DropOfflineTableRequest.db)
}

// required string table = 2;
inline bool DropOfflineTableRequest::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropOfflineTableRequest::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropOfflineTableRequest::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropOfflineTableRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table();
}
inline const ::std::string& DropOfflineTableRequest::table() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DropOfflineTableRequest.table)
  return table_.GetNoArena();
}
inline void DropOfflineTableRequest::set_table(const ::std::string& value) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DropOfflineTableRequest.table)
}
#if LANG_CXX11
inline void DropOfflineTableRequest::set_table(::std::string&& value) {
  set_has_table();
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.DropOfflineTableRequest.table)
}
#endif
inline void DropOfflineTableRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.DropOfflineTableRequest.table)
}
inline void DropOfflineTableRequest::set_table(const char* value, size_t size) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.DropOfflineTableRequest.table)
}
inline ::std::string* DropOfflineTableRequest::mutable_table() {
  set_has_table();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.DropOfflineTableRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropOfflineTableRequest::release_table() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.DropOfflineTableRequest.table)
  if (!has_table()) {
    return NULL;
  }
  clear_has_table();
  return table_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropOfflineTableRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    set_has_table();
  } else {
    clear_has_table();
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.DropOfflineTableRequest.table)
}

// -------------------------------------------------------------------

// DropOfflineTableResponse

// required int32 code = 1;
inline bool DropOfflineTableResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropOfflineTableResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropOfflineTableResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropOfflineTableResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 DropOfflineTableResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DropOfflineTableResponse.code)
  return code_;
}
inline void DropOfflineTableResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DropOfflineTableResponse.code)
}

// optional string msg = 2;
inline bool DropOfflineTableResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropOfflineTableResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropOfflineTableResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropOfflineTableResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& DropOfflineTableResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DropOfflineTableResponse.msg)
  return msg_.GetNoArena();
}
inline void DropOfflineTableResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DropOfflineTableResponse.msg)
}
#if LANG_CXX11
inline void DropOfflineTableResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.DropOfflineTableResponse.msg)
}
#endif
inline void DropOfflineTableResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.DropOfflineTableResponse.msg)
}
inline void DropOfflineTableResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.DropOfflineTableResponse.msg)
}
inline ::std::string* DropOfflineTableResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.DropOfflineTableResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropOfflineTableResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.DropOfflineTableResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropOfflineTableResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.DropOfflineTableResponse.msg)
}

// -------------------------------------------------------------------

// GetJobLogRequest

// required int32 id = 1;
inline bool GetJobLogRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetJobLogRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetJobLogRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetJobLogRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GetJobLogRequest::id() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.GetJobLogRequest.id)
  return id_;
}
inline void GetJobLogRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.GetJobLogRequest.id)
}

// -------------------------------------------------------------------

// GetJobLogResponse

// required int32 code = 1;
inline bool GetJobLogResponse::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetJobLogResponse::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetJobLogResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetJobLogResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GetJobLogResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.GetJobLogResponse.code)
  return code_;
}
inline void GetJobLogResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.GetJobLogResponse.code)
}

// optional string msg = 2;
inline bool GetJobLogResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetJobLogResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetJobLogResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetJobLogResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& GetJobLogResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.GetJobLogResponse.msg)
  return msg_.GetNoArena();
}
inline void GetJobLogResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.GetJobLogResponse.msg)
}
#if LANG_CXX11
inline void GetJobLogResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.GetJobLogResponse.msg)
}
#endif
inline void GetJobLogResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.GetJobLogResponse.msg)
}
inline void GetJobLogResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.GetJobLogResponse.msg)
}
inline ::std::string* GetJobLogResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.GetJobLogResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJobLogResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.GetJobLogResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJobLogResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.GetJobLogResponse.msg)
}

// optional string log = 3;
inline bool GetJobLogResponse::has_log() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetJobLogResponse::set_has_log() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetJobLogResponse::clear_has_log() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetJobLogResponse::clear_log() {
  log_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_log();
}
inline const ::std::string& GetJobLogResponse::log() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.GetJobLogResponse.log)
  return log_.GetNoArena();
}
inline void GetJobLogResponse::set_log(const ::std::string& value) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.GetJobLogResponse.log)
}
#if LANG_CXX11
inline void GetJobLogResponse::set_log(::std::string&& value) {
  set_has_log();
  log_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.GetJobLogResponse.log)
}
#endif
inline void GetJobLogResponse::set_log(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.GetJobLogResponse.log)
}
inline void GetJobLogResponse::set_log(const char* value, size_t size) {
  set_has_log();
  log_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.GetJobLogResponse.log)
}
inline ::std::string* GetJobLogResponse::mutable_log() {
  set_has_log();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.GetJobLogResponse.log)
  return log_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetJobLogResponse::release_log() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.GetJobLogResponse.log)
  if (!has_log()) {
    return NULL;
  }
  clear_has_log();
  return log_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetJobLogResponse::set_allocated_log(::std::string* log) {
  if (log != NULL) {
    set_has_log();
  } else {
    clear_has_log();
  }
  log_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), log);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.GetJobLogResponse.log)
}

// -------------------------------------------------------------------

// CreateFunctionRequest

// optional .openmldb.common.ExternalFun fun = 1;
inline bool CreateFunctionRequest::has_fun() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateFunctionRequest::set_has_fun() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateFunctionRequest::clear_has_fun() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::openmldb::common::ExternalFun& CreateFunctionRequest::_internal_fun() const {
  return *fun_;
}
inline const ::openmldb::common::ExternalFun& CreateFunctionRequest::fun() const {
  const ::openmldb::common::ExternalFun* p = fun_;
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.CreateFunctionRequest.fun)
  return p != NULL ? *p : *reinterpret_cast<const ::openmldb::common::ExternalFun*>(
      &::openmldb::common::_ExternalFun_default_instance_);
}
inline ::openmldb::common::ExternalFun* CreateFunctionRequest::release_fun() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.CreateFunctionRequest.fun)
  clear_has_fun();
  ::openmldb::common::ExternalFun* temp = fun_;
  fun_ = NULL;
  return temp;
}
inline ::openmldb::common::ExternalFun* CreateFunctionRequest::mutable_fun() {
  set_has_fun();
  if (fun_ == NULL) {
    auto* p = CreateMaybeMessage<::openmldb::common::ExternalFun>(GetArenaNoVirtual());
    fun_ = p;
  }
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.CreateFunctionRequest.fun)
  return fun_;
}
inline void CreateFunctionRequest::set_allocated_fun(::openmldb::common::ExternalFun* fun) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(fun_);
  }
  if (fun) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      fun = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, fun, submessage_arena);
    }
    set_has_fun();
  } else {
    clear_has_fun();
  }
  fun_ = fun;
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.CreateFunctionRequest.fun)
}

// -------------------------------------------------------------------

// CreateFunctionResponse

// required int32 code = 1;
inline bool CreateFunctionResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateFunctionResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateFunctionResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateFunctionResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 CreateFunctionResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.CreateFunctionResponse.code)
  return code_;
}
inline void CreateFunctionResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.CreateFunctionResponse.code)
}

// optional string msg = 2;
inline bool CreateFunctionResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateFunctionResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateFunctionResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateFunctionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& CreateFunctionResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.CreateFunctionResponse.msg)
  return msg_.GetNoArena();
}
inline void CreateFunctionResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.CreateFunctionResponse.msg)
}
#if LANG_CXX11
inline void CreateFunctionResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.CreateFunctionResponse.msg)
}
#endif
inline void CreateFunctionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.CreateFunctionResponse.msg)
}
inline void CreateFunctionResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.CreateFunctionResponse.msg)
}
inline ::std::string* CreateFunctionResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.CreateFunctionResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateFunctionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.CreateFunctionResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateFunctionResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.CreateFunctionResponse.msg)
}

// -------------------------------------------------------------------

// DropFunctionRequest

// optional string name = 1;
inline bool DropFunctionRequest::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropFunctionRequest::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropFunctionRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropFunctionRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& DropFunctionRequest::name() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DropFunctionRequest.name)
  return name_.GetNoArena();
}
inline void DropFunctionRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DropFunctionRequest.name)
}
#if LANG_CXX11
inline void DropFunctionRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.DropFunctionRequest.name)
}
#endif
inline void DropFunctionRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.DropFunctionRequest.name)
}
inline void DropFunctionRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.DropFunctionRequest.name)
}
inline ::std::string* DropFunctionRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.DropFunctionRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropFunctionRequest::release_name() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.DropFunctionRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropFunctionRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.DropFunctionRequest.name)
}

// -------------------------------------------------------------------

// DropFunctionResponse

// required int32 code = 1;
inline bool DropFunctionResponse::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DropFunctionResponse::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DropFunctionResponse::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DropFunctionResponse::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 DropFunctionResponse::code() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DropFunctionResponse.code)
  return code_;
}
inline void DropFunctionResponse::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DropFunctionResponse.code)
}

// optional string msg = 2;
inline bool DropFunctionResponse::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DropFunctionResponse::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DropFunctionResponse::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DropFunctionResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& DropFunctionResponse::msg() const {
  // @@protoc_insertion_point(field_get:openmldb.taskmanager.DropFunctionResponse.msg)
  return msg_.GetNoArena();
}
inline void DropFunctionResponse::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:openmldb.taskmanager.DropFunctionResponse.msg)
}
#if LANG_CXX11
inline void DropFunctionResponse::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:openmldb.taskmanager.DropFunctionResponse.msg)
}
#endif
inline void DropFunctionResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:openmldb.taskmanager.DropFunctionResponse.msg)
}
inline void DropFunctionResponse::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:openmldb.taskmanager.DropFunctionResponse.msg)
}
inline ::std::string* DropFunctionResponse::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:openmldb.taskmanager.DropFunctionResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DropFunctionResponse::release_msg() {
  // @@protoc_insertion_point(field_release:openmldb.taskmanager.DropFunctionResponse.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DropFunctionResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:openmldb.taskmanager.DropFunctionResponse.msg)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace taskmanager
}  // namespace openmldb

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_taskmanager_2eproto
