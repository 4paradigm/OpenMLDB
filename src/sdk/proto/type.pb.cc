// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: type.proto

#include "type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace openmldb {
namespace type {
}  // namespace type
}  // namespace openmldb
namespace protobuf_type_2eproto {
void InitDefaults() {
}

const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[8];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "type.proto", schemas, file_default_instances, TableStruct::offsets,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ntype.proto\022\ropenmldb.type*\212\001\n\010DataType"
      "\022\t\n\005kBool\020\001\022\r\n\tkSmallInt\020\002\022\010\n\004kInt\020\003\022\013\n\007"
      "kBigInt\020\004\022\n\n\006kFloat\020\005\022\013\n\007kDouble\020\006\022\t\n\005kD"
      "ate\020\007\022\016\n\nkTimestamp\020\010\022\014\n\010kVarchar\020\r\022\013\n\007k"
      "String\020\016*g\n\tIndexType\022\013\n\007kUnique\020\001\022\r\n\tkN"
      "oUnique\020\002\022\017\n\013kPrimaryKey\020\003\022\014\n\010kAutoGen\020\004"
      "\022\016\n\nkIncrement\020\005\022\017\n\013kTimeSerise\020\006*_\n\007TTL"
      "Type\022\021\n\rkAbsoluteTime\020\001\022\021\n\rkRelativeTime"
      "\020\002\022\017\n\013kLatestTime\020\003\022\016\n\nkAbsAndLat\020\004\022\r\n\tk"
      "AbsOrLat\020\005*,\n\014CompressType\022\017\n\013kNoCompres"
      "s\020\000\022\013\n\007kSnappy\020\001*+\n\rEndpointState\022\014\n\010kOf"
      "fline\020\001\022\014\n\010kHealthy\020\002*,\n\013StartupMode\022\017\n\013"
      "kStandalone\020\001\022\014\n\010kCluster\020\002*L\n\rProcedure"
      "Type\022\024\n\007kUnknow\020\377\377\377\377\377\377\377\377\377\001\022\021\n\rkReqProced"
      "ure\020\000\022\022\n\016kReqDeployment\020\001*(\n\nNotifyType\022"
      "\n\n\006kTable\020\001\022\016\n\nkGlobalVar\020\002B(\n\035com._4par"
      "adigm.openmldb.protoB\004Type\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 669);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "type.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_type_2eproto
namespace openmldb {
namespace type {
const ::google::protobuf::EnumDescriptor* DataType_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[0];
}
bool DataType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* IndexType_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[1];
}
bool IndexType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TTLType_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[2];
}
bool TTLType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressType_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[3];
}
bool CompressType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EndpointState_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[4];
}
bool EndpointState_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* StartupMode_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[5];
}
bool StartupMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ProcedureType_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[6];
}
bool ProcedureType_IsValid(int value) {
  switch (value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NotifyType_descriptor() {
  protobuf_type_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_type_2eproto::file_level_enum_descriptors[7];
}
bool NotifyType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace openmldb
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
