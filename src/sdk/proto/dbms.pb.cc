// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dbms.proto

#include "dbms.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fe_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Status;
}  // namespace protobuf_fe_5fcommon_2eproto
namespace protobuf_fe_5ftype_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5ftype_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TableDef;
}  // namespace protobuf_fe_5ftype_2eproto
namespace hybridse {
namespace dbms {
class AddGroupRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddGroupRequest>
      _instance;
} _AddGroupRequest_default_instance_;
class AddGroupResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddGroupResponse>
      _instance;
} _AddGroupResponse_default_instance_;
class AddDatabaseRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddDatabaseRequest>
      _instance;
} _AddDatabaseRequest_default_instance_;
class AddDatabaseResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddDatabaseResponse>
      _instance;
} _AddDatabaseResponse_default_instance_;
class IsExistRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsExistRequest>
      _instance;
} _IsExistRequest_default_instance_;
class IsExistResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IsExistResponse>
      _instance;
} _IsExistResponse_default_instance_;
class AddTableRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTableRequest>
      _instance;
} _AddTableRequest_default_instance_;
class AddTableResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AddTableResponse>
      _instance;
} _AddTableResponse_default_instance_;
class GetSchemaRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSchemaRequest>
      _instance;
} _GetSchemaRequest_default_instance_;
class GetSchemaResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetSchemaResponse>
      _instance;
} _GetSchemaResponse_default_instance_;
class GetDatabasesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDatabasesRequest>
      _instance;
} _GetDatabasesRequest_default_instance_;
class GetDatabasesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetDatabasesResponse>
      _instance;
} _GetDatabasesResponse_default_instance_;
class GetTablesRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTablesRequest>
      _instance;
} _GetTablesRequest_default_instance_;
class GetTablesResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTablesResponse>
      _instance;
} _GetTablesResponse_default_instance_;
class KeepAliveRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeepAliveRequest>
      _instance;
} _KeepAliveRequest_default_instance_;
class KeepAliveResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KeepAliveResponse>
      _instance;
} _KeepAliveResponse_default_instance_;
class GetTabletRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTabletRequest>
      _instance;
} _GetTabletRequest_default_instance_;
class GetTabletResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetTabletResponse>
      _instance;
} _GetTabletResponse_default_instance_;
}  // namespace dbms
}  // namespace hybridse
namespace protobuf_dbms_2eproto {
static void InitDefaultsAddGroupRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_AddGroupRequest_default_instance_;
    new (ptr) ::hybridse::dbms::AddGroupRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::AddGroupRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddGroupRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddGroupRequest}, {}};

static void InitDefaultsAddGroupResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_AddGroupResponse_default_instance_;
    new (ptr) ::hybridse::dbms::AddGroupResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::AddGroupResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddGroupResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddGroupResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

static void InitDefaultsAddDatabaseRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_AddDatabaseRequest_default_instance_;
    new (ptr) ::hybridse::dbms::AddDatabaseRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::AddDatabaseRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AddDatabaseRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAddDatabaseRequest}, {}};

static void InitDefaultsAddDatabaseResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_AddDatabaseResponse_default_instance_;
    new (ptr) ::hybridse::dbms::AddDatabaseResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::AddDatabaseResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddDatabaseResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddDatabaseResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

static void InitDefaultsIsExistRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_IsExistRequest_default_instance_;
    new (ptr) ::hybridse::dbms::IsExistRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::IsExistRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IsExistRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIsExistRequest}, {}};

static void InitDefaultsIsExistResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_IsExistResponse_default_instance_;
    new (ptr) ::hybridse::dbms::IsExistResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::IsExistResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_IsExistResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsIsExistResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

static void InitDefaultsAddTableRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_AddTableRequest_default_instance_;
    new (ptr) ::hybridse::dbms::AddTableRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::AddTableRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddTableRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddTableRequest}, {
      &protobuf_fe_5ftype_2eproto::scc_info_TableDef.base,}};

static void InitDefaultsAddTableResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_AddTableResponse_default_instance_;
    new (ptr) ::hybridse::dbms::AddTableResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::AddTableResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_AddTableResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsAddTableResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

static void InitDefaultsGetSchemaRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetSchemaRequest_default_instance_;
    new (ptr) ::hybridse::dbms::GetSchemaRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetSchemaRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetSchemaRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetSchemaRequest}, {}};

static void InitDefaultsGetSchemaResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetSchemaResponse_default_instance_;
    new (ptr) ::hybridse::dbms::GetSchemaResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetSchemaResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetSchemaResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetSchemaResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,
      &protobuf_fe_5ftype_2eproto::scc_info_TableDef.base,}};

static void InitDefaultsGetDatabasesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetDatabasesRequest_default_instance_;
    new (ptr) ::hybridse::dbms::GetDatabasesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetDatabasesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetDatabasesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetDatabasesRequest}, {}};

static void InitDefaultsGetDatabasesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetDatabasesResponse_default_instance_;
    new (ptr) ::hybridse::dbms::GetDatabasesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetDatabasesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetDatabasesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetDatabasesResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

static void InitDefaultsGetTablesRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetTablesRequest_default_instance_;
    new (ptr) ::hybridse::dbms::GetTablesRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetTablesRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTablesRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTablesRequest}, {}};

static void InitDefaultsGetTablesResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetTablesResponse_default_instance_;
    new (ptr) ::hybridse::dbms::GetTablesResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetTablesResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_GetTablesResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsGetTablesResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,
      &protobuf_fe_5ftype_2eproto::scc_info_TableDef.base,}};

static void InitDefaultsKeepAliveRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_KeepAliveRequest_default_instance_;
    new (ptr) ::hybridse::dbms::KeepAliveRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::KeepAliveRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KeepAliveRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKeepAliveRequest}, {}};

static void InitDefaultsKeepAliveResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_KeepAliveResponse_default_instance_;
    new (ptr) ::hybridse::dbms::KeepAliveResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::KeepAliveResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KeepAliveResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKeepAliveResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

static void InitDefaultsGetTabletRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetTabletRequest_default_instance_;
    new (ptr) ::hybridse::dbms::GetTabletRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetTabletRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetTabletRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetTabletRequest}, {}};

static void InitDefaultsGetTabletResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::dbms::_GetTabletResponse_default_instance_;
    new (ptr) ::hybridse::dbms::GetTabletResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::dbms::GetTabletResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_GetTabletResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsGetTabletResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_AddGroupRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddGroupResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddDatabaseRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddDatabaseResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsExistRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IsExistResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTableRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AddTableResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSchemaRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetSchemaResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetDatabasesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetDatabasesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTablesRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTablesResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeepAliveRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KeepAliveResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTabletRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetTabletResponse.base);
}

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddGroupRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddGroupRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddGroupRequest, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddGroupResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddGroupResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddGroupResponse, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddDatabaseRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddDatabaseRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddDatabaseRequest, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddDatabaseResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddDatabaseResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddDatabaseResponse, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::IsExistRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::IsExistRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::IsExistRequest, name_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::IsExistResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::IsExistResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::IsExistResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::IsExistResponse, exist_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddTableRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddTableRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddTableRequest, table_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddTableRequest, db_name_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddTableResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddTableResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::AddTableResponse, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaRequest, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaRequest, db_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetSchemaResponse, table_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetDatabasesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetDatabasesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetDatabasesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetDatabasesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetDatabasesResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetDatabasesResponse, names_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesRequest, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesRequest, table_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTablesResponse, tables_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::KeepAliveRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::KeepAliveRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::KeepAliveRequest, endpoint_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::KeepAliveResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::KeepAliveResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::KeepAliveResponse, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTabletRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTabletRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTabletResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTabletResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTabletResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::dbms::GetTabletResponse, endpoints_),
  0,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 6, sizeof(::hybridse::dbms::AddGroupRequest)},
  { 7, 13, sizeof(::hybridse::dbms::AddGroupResponse)},
  { 14, 20, sizeof(::hybridse::dbms::AddDatabaseRequest)},
  { 21, 27, sizeof(::hybridse::dbms::AddDatabaseResponse)},
  { 28, 34, sizeof(::hybridse::dbms::IsExistRequest)},
  { 35, 42, sizeof(::hybridse::dbms::IsExistResponse)},
  { 44, 51, sizeof(::hybridse::dbms::AddTableRequest)},
  { 53, 59, sizeof(::hybridse::dbms::AddTableResponse)},
  { 60, 67, sizeof(::hybridse::dbms::GetSchemaRequest)},
  { 69, 76, sizeof(::hybridse::dbms::GetSchemaResponse)},
  { 78, 83, sizeof(::hybridse::dbms::GetDatabasesRequest)},
  { 83, 90, sizeof(::hybridse::dbms::GetDatabasesResponse)},
  { 92, 99, sizeof(::hybridse::dbms::GetTablesRequest)},
  { 101, 108, sizeof(::hybridse::dbms::GetTablesResponse)},
  { 110, 116, sizeof(::hybridse::dbms::KeepAliveRequest)},
  { 117, 123, sizeof(::hybridse::dbms::KeepAliveResponse)},
  { 124, 129, sizeof(::hybridse::dbms::GetTabletRequest)},
  { 129, 136, sizeof(::hybridse::dbms::GetTabletResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_AddGroupRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_AddGroupResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_AddDatabaseRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_AddDatabaseResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_IsExistRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_IsExistResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_AddTableRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_AddTableResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetSchemaRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetSchemaResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetDatabasesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetDatabasesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetTablesRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetTablesResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_KeepAliveRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_KeepAliveResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetTabletRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::dbms::_GetTabletResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "dbms.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\ndbms.proto\022\rhybridse.dbms\032\017fe_common.p"
      "roto\032\rfe_type.proto\"\037\n\017AddGroupRequest\022\014"
      "\n\004name\030\001 \001(\t\";\n\020AddGroupResponse\022\'\n\006stat"
      "us\030\001 \001(\0132\027.hybridse.common.Status\"\"\n\022Add"
      "DatabaseRequest\022\014\n\004name\030\001 \001(\t\">\n\023AddData"
      "baseResponse\022\'\n\006status\030\001 \001(\0132\027.hybridse."
      "common.Status\"\036\n\016IsExistRequest\022\014\n\004name\030"
      "\001 \001(\t\"I\n\017IsExistResponse\022\'\n\006status\030\001 \001(\013"
      "2\027.hybridse.common.Status\022\r\n\005exist\030\002 \001(\010"
      "\"J\n\017AddTableRequest\022&\n\005table\030\001 \001(\0132\027.hyb"
      "ridse.type.TableDef\022\017\n\007db_name\030\002 \001(\t\";\n\020"
      "AddTableResponse\022\'\n\006status\030\001 \001(\0132\027.hybri"
      "dse.common.Status\"1\n\020GetSchemaRequest\022\014\n"
      "\004name\030\001 \001(\t\022\017\n\007db_name\030\002 \001(\t\"d\n\021GetSchem"
      "aResponse\022\'\n\006status\030\001 \001(\0132\027.hybridse.com"
      "mon.Status\022&\n\005table\030\002 \001(\0132\027.hybridse.typ"
      "e.TableDef\"\025\n\023GetDatabasesRequest\"N\n\024Get"
      "DatabasesResponse\022\'\n\006status\030\001 \001(\0132\027.hybr"
      "idse.common.Status\022\r\n\005names\030\002 \003(\t\"7\n\020Get"
      "TablesRequest\022\017\n\007db_name\030\001 \001(\t\022\022\n\ntable_"
      "name\030\002 \001(\t\"e\n\021GetTablesResponse\022\'\n\006statu"
      "s\030\001 \001(\0132\027.hybridse.common.Status\022\'\n\006tabl"
      "es\030\002 \003(\0132\027.hybridse.type.TableDef\"$\n\020Kee"
      "pAliveRequest\022\020\n\010endpoint\030\001 \001(\t\"<\n\021KeepA"
      "liveResponse\022\'\n\006status\030\001 \001(\0132\027.hybridse."
      "common.Status\"\022\n\020GetTabletRequest\"O\n\021Get"
      "TabletResponse\022\'\n\006status\030\001 \001(\0132\027.hybrids"
      "e.common.Status\022\021\n\tendpoints\030\002 \003(\t2\310\004\n\nD"
      "BMSServer\022T\n\013AddDatabase\022!.hybridse.dbms"
      ".AddDatabaseRequest\032\".hybridse.dbms.AddD"
      "atabaseResponse\022K\n\010AddTable\022\036.hybridse.d"
      "bms.AddTableRequest\032\037.hybridse.dbms.AddT"
      "ableResponse\022N\n\tGetSchema\022\037.hybridse.dbm"
      "s.GetSchemaRequest\032 .hybridse.dbms.GetSc"
      "hemaResponse\022W\n\014GetDatabases\022\".hybridse."
      "dbms.GetDatabasesRequest\032#.hybridse.dbms"
      ".GetDatabasesResponse\022N\n\tGetTables\022\037.hyb"
      "ridse.dbms.GetTablesRequest\032 .hybridse.d"
      "bms.GetTablesResponse\022N\n\tKeepAlive\022\037.hyb"
      "ridse.dbms.KeepAliveRequest\032 .hybridse.d"
      "bms.KeepAliveResponse\022N\n\tGetTablet\022\037.hyb"
      "ridse.dbms.GetTabletRequest\032 .hybridse.d"
      "bms.GetTabletResponseB\'\n\034com._4paradigm."
      "hybridse.dbmsB\004DBMS\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1742);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dbms.proto", &protobuf_RegisterTypes);
  ::protobuf_fe_5fcommon_2eproto::AddDescriptors();
  ::protobuf_fe_5ftype_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_dbms_2eproto
namespace hybridse {
namespace dbms {

// ===================================================================

void AddGroupRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddGroupRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddGroupRequest::AddGroupRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_AddGroupRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.AddGroupRequest)
}
AddGroupRequest::AddGroupRequest(const AddGroupRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.AddGroupRequest)
}

void AddGroupRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AddGroupRequest::~AddGroupRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.AddGroupRequest)
  SharedDtor();
}

void AddGroupRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddGroupRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddGroupRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddGroupRequest& AddGroupRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_AddGroupRequest.base);
  return *internal_default_instance();
}


void AddGroupRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.AddGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddGroupRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.AddGroupRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.AddGroupRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.AddGroupRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.AddGroupRequest)
  return false;
#undef DO_
}

void AddGroupRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.AddGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.AddGroupRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.AddGroupRequest)
}

::google::protobuf::uint8* AddGroupRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.AddGroupRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.AddGroupRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.AddGroupRequest)
  return target;
}

size_t AddGroupRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.AddGroupRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddGroupRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.AddGroupRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.AddGroupRequest)
    MergeFrom(*source);
  }
}

void AddGroupRequest::MergeFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.AddGroupRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AddGroupRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupRequest::CopyFrom(const AddGroupRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.AddGroupRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupRequest::IsInitialized() const {
  return true;
}

void AddGroupRequest::Swap(AddGroupRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddGroupRequest::InternalSwap(AddGroupRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddGroupRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddGroupResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_AddGroupResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void AddGroupResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddGroupResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddGroupResponse::AddGroupResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_AddGroupResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.AddGroupResponse)
}
AddGroupResponse::AddGroupResponse(const AddGroupResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.AddGroupResponse)
}

void AddGroupResponse::SharedCtor() {
  status_ = NULL;
}

AddGroupResponse::~AddGroupResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.AddGroupResponse)
  SharedDtor();
}

void AddGroupResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void AddGroupResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddGroupResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddGroupResponse& AddGroupResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_AddGroupResponse.base);
  return *internal_default_instance();
}


void AddGroupResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.AddGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddGroupResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.AddGroupResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.AddGroupResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.AddGroupResponse)
  return false;
#undef DO_
}

void AddGroupResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.AddGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.AddGroupResponse)
}

::google::protobuf::uint8* AddGroupResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.AddGroupResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.AddGroupResponse)
  return target;
}

size_t AddGroupResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.AddGroupResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddGroupResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddGroupResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddGroupResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.AddGroupResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.AddGroupResponse)
    MergeFrom(*source);
  }
}

void AddGroupResponse::MergeFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.AddGroupResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void AddGroupResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddGroupResponse::CopyFrom(const AddGroupResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.AddGroupResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddGroupResponse::IsInitialized() const {
  return true;
}

void AddGroupResponse::Swap(AddGroupResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddGroupResponse::InternalSwap(AddGroupResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddGroupResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddDatabaseRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddDatabaseRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddDatabaseRequest::AddDatabaseRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_AddDatabaseRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.AddDatabaseRequest)
}
AddDatabaseRequest::AddDatabaseRequest(const AddDatabaseRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.AddDatabaseRequest)
}

void AddDatabaseRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AddDatabaseRequest::~AddDatabaseRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.AddDatabaseRequest)
  SharedDtor();
}

void AddDatabaseRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AddDatabaseRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddDatabaseRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddDatabaseRequest& AddDatabaseRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_AddDatabaseRequest.base);
  return *internal_default_instance();
}


void AddDatabaseRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.AddDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddDatabaseRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.AddDatabaseRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.AddDatabaseRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.AddDatabaseRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.AddDatabaseRequest)
  return false;
#undef DO_
}

void AddDatabaseRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.AddDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.AddDatabaseRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.AddDatabaseRequest)
}

::google::protobuf::uint8* AddDatabaseRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.AddDatabaseRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.AddDatabaseRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.AddDatabaseRequest)
  return target;
}

size_t AddDatabaseRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.AddDatabaseRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDatabaseRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.AddDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDatabaseRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddDatabaseRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.AddDatabaseRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.AddDatabaseRequest)
    MergeFrom(*source);
  }
}

void AddDatabaseRequest::MergeFrom(const AddDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.AddDatabaseRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void AddDatabaseRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.AddDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatabaseRequest::CopyFrom(const AddDatabaseRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.AddDatabaseRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatabaseRequest::IsInitialized() const {
  return true;
}

void AddDatabaseRequest::Swap(AddDatabaseRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddDatabaseRequest::InternalSwap(AddDatabaseRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddDatabaseRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddDatabaseResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_AddDatabaseResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void AddDatabaseResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddDatabaseResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddDatabaseResponse::AddDatabaseResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_AddDatabaseResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.AddDatabaseResponse)
}
AddDatabaseResponse::AddDatabaseResponse(const AddDatabaseResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.AddDatabaseResponse)
}

void AddDatabaseResponse::SharedCtor() {
  status_ = NULL;
}

AddDatabaseResponse::~AddDatabaseResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.AddDatabaseResponse)
  SharedDtor();
}

void AddDatabaseResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void AddDatabaseResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddDatabaseResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddDatabaseResponse& AddDatabaseResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_AddDatabaseResponse.base);
  return *internal_default_instance();
}


void AddDatabaseResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.AddDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddDatabaseResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.AddDatabaseResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.AddDatabaseResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.AddDatabaseResponse)
  return false;
#undef DO_
}

void AddDatabaseResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.AddDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.AddDatabaseResponse)
}

::google::protobuf::uint8* AddDatabaseResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.AddDatabaseResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.AddDatabaseResponse)
  return target;
}

size_t AddDatabaseResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.AddDatabaseResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddDatabaseResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.AddDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddDatabaseResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddDatabaseResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.AddDatabaseResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.AddDatabaseResponse)
    MergeFrom(*source);
  }
}

void AddDatabaseResponse::MergeFrom(const AddDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.AddDatabaseResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void AddDatabaseResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.AddDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddDatabaseResponse::CopyFrom(const AddDatabaseResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.AddDatabaseResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddDatabaseResponse::IsInitialized() const {
  return true;
}

void AddDatabaseResponse::Swap(AddDatabaseResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddDatabaseResponse::InternalSwap(AddDatabaseResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddDatabaseResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IsExistRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsExistRequest::kNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsExistRequest::IsExistRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_IsExistRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.IsExistRequest)
}
IsExistRequest::IsExistRequest(const IsExistRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.IsExistRequest)
}

void IsExistRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

IsExistRequest::~IsExistRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.IsExistRequest)
  SharedDtor();
}

void IsExistRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IsExistRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IsExistRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsExistRequest& IsExistRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_IsExistRequest.base);
  return *internal_default_instance();
}


void IsExistRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.IsExistRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IsExistRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.IsExistRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.IsExistRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.IsExistRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.IsExistRequest)
  return false;
#undef DO_
}

void IsExistRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.IsExistRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.IsExistRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.IsExistRequest)
}

::google::protobuf::uint8* IsExistRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.IsExistRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.IsExistRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.IsExistRequest)
  return target;
}

size_t IsExistRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.IsExistRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsExistRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.IsExistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const IsExistRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsExistRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.IsExistRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.IsExistRequest)
    MergeFrom(*source);
  }
}

void IsExistRequest::MergeFrom(const IsExistRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.IsExistRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_name()) {
    set_has_name();
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
}

void IsExistRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.IsExistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsExistRequest::CopyFrom(const IsExistRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.IsExistRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsExistRequest::IsInitialized() const {
  return true;
}

void IsExistRequest::Swap(IsExistRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsExistRequest::InternalSwap(IsExistRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IsExistRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IsExistResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_IsExistResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void IsExistResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IsExistResponse::kStatusFieldNumber;
const int IsExistResponse::kExistFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IsExistResponse::IsExistResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_IsExistResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.IsExistResponse)
}
IsExistResponse::IsExistResponse(const IsExistResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  exist_ = from.exist_;
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.IsExistResponse)
}

void IsExistResponse::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&exist_) -
      reinterpret_cast<char*>(&status_)) + sizeof(exist_));
}

IsExistResponse::~IsExistResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.IsExistResponse)
  SharedDtor();
}

void IsExistResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void IsExistResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IsExistResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IsExistResponse& IsExistResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_IsExistResponse.base);
  return *internal_default_instance();
}


void IsExistResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.IsExistResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  exist_ = false;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IsExistResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.IsExistResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool exist = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_exist();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &exist_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.IsExistResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.IsExistResponse)
  return false;
#undef DO_
}

void IsExistResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.IsExistResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // optional bool exist = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->exist(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.IsExistResponse)
}

::google::protobuf::uint8* IsExistResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.IsExistResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // optional bool exist = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->exist(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.IsExistResponse)
  return target;
}

size_t IsExistResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.IsExistResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .hybridse.common.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional bool exist = 2;
    if (has_exist()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IsExistResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.IsExistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const IsExistResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IsExistResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.IsExistResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.IsExistResponse)
    MergeFrom(*source);
  }
}

void IsExistResponse::MergeFrom(const IsExistResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.IsExistResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      exist_ = from.exist_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IsExistResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.IsExistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IsExistResponse::CopyFrom(const IsExistResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.IsExistResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IsExistResponse::IsInitialized() const {
  return true;
}

void IsExistResponse::Swap(IsExistResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IsExistResponse::InternalSwap(IsExistResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(exist_, other->exist_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IsExistResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddTableRequest::InitAsDefaultInstance() {
  ::hybridse::dbms::_AddTableRequest_default_instance_._instance.get_mutable()->table_ = const_cast< ::hybridse::type::TableDef*>(
      ::hybridse::type::TableDef::internal_default_instance());
}
void AddTableRequest::clear_table() {
  if (table_ != NULL) table_->Clear();
  clear_has_table();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTableRequest::kTableFieldNumber;
const int AddTableRequest::kDbNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTableRequest::AddTableRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_AddTableRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.AddTableRequest)
}
AddTableRequest::AddTableRequest(const AddTableRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_name()) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  if (from.has_table()) {
    table_ = new ::hybridse::type::TableDef(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.AddTableRequest)
}

void AddTableRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_ = NULL;
}

AddTableRequest::~AddTableRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.AddTableRequest)
  SharedDtor();
}

void AddTableRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete table_;
}

void AddTableRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddTableRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTableRequest& AddTableRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_AddTableRequest.base);
  return *internal_default_instance();
}


void AddTableRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.AddTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      db_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_ != NULL);
      table_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddTableRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.AddTableRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.type.TableDef table = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.AddTableRequest.db_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.AddTableRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.AddTableRequest)
  return false;
#undef DO_
}

void AddTableRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.AddTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.type.TableDef table = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_table(), output);
  }

  // optional string db_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.AddTableRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.AddTableRequest)
}

::google::protobuf::uint8* AddTableRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.AddTableRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.type.TableDef table = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_table(), deterministic, target);
  }

  // optional string db_name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.AddTableRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.AddTableRequest)
  return target;
}

size_t AddTableRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.AddTableRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string db_name = 2;
    if (has_db_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_name());
    }

    // optional .hybridse.type.TableDef table = 1;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *table_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTableRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.AddTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTableRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTableRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.AddTableRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.AddTableRequest)
    MergeFrom(*source);
  }
}

void AddTableRequest::MergeFrom(const AddTableRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.AddTableRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_db_name();
      db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_table()->::hybridse::type::TableDef::MergeFrom(from.table());
    }
  }
}

void AddTableRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.AddTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTableRequest::CopyFrom(const AddTableRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.AddTableRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTableRequest::IsInitialized() const {
  return true;
}

void AddTableRequest::Swap(AddTableRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTableRequest::InternalSwap(AddTableRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(table_, other->table_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTableRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void AddTableResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_AddTableResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void AddTableResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AddTableResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AddTableResponse::AddTableResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_AddTableResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.AddTableResponse)
}
AddTableResponse::AddTableResponse(const AddTableResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.AddTableResponse)
}

void AddTableResponse::SharedCtor() {
  status_ = NULL;
}

AddTableResponse::~AddTableResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.AddTableResponse)
  SharedDtor();
}

void AddTableResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void AddTableResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* AddTableResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const AddTableResponse& AddTableResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_AddTableResponse.base);
  return *internal_default_instance();
}


void AddTableResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.AddTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AddTableResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.AddTableResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.AddTableResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.AddTableResponse)
  return false;
#undef DO_
}

void AddTableResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.AddTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.AddTableResponse)
}

::google::protobuf::uint8* AddTableResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.AddTableResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.AddTableResponse)
  return target;
}

size_t AddTableResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.AddTableResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AddTableResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.AddTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const AddTableResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const AddTableResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.AddTableResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.AddTableResponse)
    MergeFrom(*source);
  }
}

void AddTableResponse::MergeFrom(const AddTableResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.AddTableResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void AddTableResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.AddTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddTableResponse::CopyFrom(const AddTableResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.AddTableResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddTableResponse::IsInitialized() const {
  return true;
}

void AddTableResponse::Swap(AddTableResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AddTableResponse::InternalSwap(AddTableResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata AddTableResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSchemaRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSchemaRequest::kNameFieldNumber;
const int GetSchemaRequest::kDbNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSchemaRequest::GetSchemaRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetSchemaRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetSchemaRequest)
}
GetSchemaRequest::GetSchemaRequest(const GetSchemaRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_name()) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetSchemaRequest)
}

void GetSchemaRequest::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetSchemaRequest::~GetSchemaRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetSchemaRequest)
  SharedDtor();
}

void GetSchemaRequest::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetSchemaRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSchemaRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSchemaRequest& GetSchemaRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetSchemaRequest.base);
  return *internal_default_instance();
}


void GetSchemaRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetSchemaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      db_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSchemaRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetSchemaRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.GetSchemaRequest.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.GetSchemaRequest.db_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetSchemaRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetSchemaRequest)
  return false;
#undef DO_
}

void GetSchemaRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetSchemaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetSchemaRequest.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string db_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetSchemaRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetSchemaRequest)
}

::google::protobuf::uint8* GetSchemaRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetSchemaRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetSchemaRequest.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string db_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetSchemaRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetSchemaRequest)
  return target;
}

size_t GetSchemaRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetSchemaRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string db_name = 2;
    if (has_db_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSchemaRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetSchemaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSchemaRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSchemaRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetSchemaRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetSchemaRequest)
    MergeFrom(*source);
  }
}

void GetSchemaRequest::MergeFrom(const GetSchemaRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetSchemaRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_db_name();
      db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
    }
  }
}

void GetSchemaRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetSchemaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSchemaRequest::CopyFrom(const GetSchemaRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetSchemaRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemaRequest::IsInitialized() const {
  return true;
}

void GetSchemaRequest::Swap(GetSchemaRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSchemaRequest::InternalSwap(GetSchemaRequest* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_name_.Swap(&other->db_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSchemaRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetSchemaResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_GetSchemaResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
  ::hybridse::dbms::_GetSchemaResponse_default_instance_._instance.get_mutable()->table_ = const_cast< ::hybridse::type::TableDef*>(
      ::hybridse::type::TableDef::internal_default_instance());
}
void GetSchemaResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
void GetSchemaResponse::clear_table() {
  if (table_ != NULL) table_->Clear();
  clear_has_table();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetSchemaResponse::kStatusFieldNumber;
const int GetSchemaResponse::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetSchemaResponse::GetSchemaResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetSchemaResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetSchemaResponse)
}
GetSchemaResponse::GetSchemaResponse(const GetSchemaResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  if (from.has_table()) {
    table_ = new ::hybridse::type::TableDef(*from.table_);
  } else {
    table_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetSchemaResponse)
}

void GetSchemaResponse::SharedCtor() {
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&table_) -
      reinterpret_cast<char*>(&status_)) + sizeof(table_));
}

GetSchemaResponse::~GetSchemaResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetSchemaResponse)
  SharedDtor();
}

void GetSchemaResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
  if (this != internal_default_instance()) delete table_;
}

void GetSchemaResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetSchemaResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetSchemaResponse& GetSchemaResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetSchemaResponse.base);
  return *internal_default_instance();
}


void GetSchemaResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetSchemaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(status_ != NULL);
      status_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(table_ != NULL);
      table_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetSchemaResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetSchemaResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hybridse.type.TableDef table = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_table()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetSchemaResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetSchemaResponse)
  return false;
#undef DO_
}

void GetSchemaResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetSchemaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // optional .hybridse.type.TableDef table = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetSchemaResponse)
}

::google::protobuf::uint8* GetSchemaResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetSchemaResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // optional .hybridse.type.TableDef table = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_table(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetSchemaResponse)
  return target;
}

size_t GetSchemaResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetSchemaResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional .hybridse.common.Status status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *status_);
    }

    // optional .hybridse.type.TableDef table = 2;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *table_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetSchemaResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetSchemaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetSchemaResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetSchemaResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetSchemaResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetSchemaResponse)
    MergeFrom(*source);
  }
}

void GetSchemaResponse::MergeFrom(const GetSchemaResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetSchemaResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_table()->::hybridse::type::TableDef::MergeFrom(from.table());
    }
  }
}

void GetSchemaResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetSchemaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetSchemaResponse::CopyFrom(const GetSchemaResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetSchemaResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetSchemaResponse::IsInitialized() const {
  return true;
}

void GetSchemaResponse::Swap(GetSchemaResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetSchemaResponse::InternalSwap(GetSchemaResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(table_, other->table_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetSchemaResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetDatabasesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatabasesRequest::GetDatabasesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetDatabasesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetDatabasesRequest)
}
GetDatabasesRequest::GetDatabasesRequest(const GetDatabasesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetDatabasesRequest)
}

void GetDatabasesRequest::SharedCtor() {
}

GetDatabasesRequest::~GetDatabasesRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetDatabasesRequest)
  SharedDtor();
}

void GetDatabasesRequest::SharedDtor() {
}

void GetDatabasesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetDatabasesRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDatabasesRequest& GetDatabasesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetDatabasesRequest.base);
  return *internal_default_instance();
}


void GetDatabasesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetDatabasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetDatabasesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetDatabasesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetDatabasesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetDatabasesRequest)
  return false;
#undef DO_
}

void GetDatabasesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetDatabasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetDatabasesRequest)
}

::google::protobuf::uint8* GetDatabasesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetDatabasesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetDatabasesRequest)
  return target;
}

size_t GetDatabasesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetDatabasesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDatabasesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetDatabasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatabasesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDatabasesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetDatabasesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetDatabasesRequest)
    MergeFrom(*source);
  }
}

void GetDatabasesRequest::MergeFrom(const GetDatabasesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetDatabasesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetDatabasesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetDatabasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatabasesRequest::CopyFrom(const GetDatabasesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetDatabasesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatabasesRequest::IsInitialized() const {
  return true;
}

void GetDatabasesRequest::Swap(GetDatabasesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDatabasesRequest::InternalSwap(GetDatabasesRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetDatabasesRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetDatabasesResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_GetDatabasesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void GetDatabasesResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetDatabasesResponse::kStatusFieldNumber;
const int GetDatabasesResponse::kNamesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetDatabasesResponse::GetDatabasesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetDatabasesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetDatabasesResponse)
}
GetDatabasesResponse::GetDatabasesResponse(const GetDatabasesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      names_(from.names_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetDatabasesResponse)
}

void GetDatabasesResponse::SharedCtor() {
  status_ = NULL;
}

GetDatabasesResponse::~GetDatabasesResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetDatabasesResponse)
  SharedDtor();
}

void GetDatabasesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetDatabasesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetDatabasesResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetDatabasesResponse& GetDatabasesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetDatabasesResponse.base);
  return *internal_default_instance();
}


void GetDatabasesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetDatabasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  names_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetDatabasesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetDatabasesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string names = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_names()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->names(this->names_size() - 1).data(),
            static_cast<int>(this->names(this->names_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.GetDatabasesResponse.names");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetDatabasesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetDatabasesResponse)
  return false;
#undef DO_
}

void GetDatabasesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetDatabasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetDatabasesResponse.names");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->names(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetDatabasesResponse)
}

::google::protobuf::uint8* GetDatabasesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetDatabasesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // repeated string names = 2;
  for (int i = 0, n = this->names_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->names(i).data(), static_cast<int>(this->names(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetDatabasesResponse.names");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->names(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetDatabasesResponse)
  return target;
}

size_t GetDatabasesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetDatabasesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string names = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->names_size());
  for (int i = 0, n = this->names_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->names(i));
  }

  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetDatabasesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetDatabasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetDatabasesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetDatabasesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetDatabasesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetDatabasesResponse)
    MergeFrom(*source);
  }
}

void GetDatabasesResponse::MergeFrom(const GetDatabasesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetDatabasesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  names_.MergeFrom(from.names_);
  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void GetDatabasesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetDatabasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetDatabasesResponse::CopyFrom(const GetDatabasesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetDatabasesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetDatabasesResponse::IsInitialized() const {
  return true;
}

void GetDatabasesResponse::Swap(GetDatabasesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetDatabasesResponse::InternalSwap(GetDatabasesResponse* other) {
  using std::swap;
  names_.InternalSwap(CastToBase(&other->names_));
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetDatabasesResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTablesRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTablesRequest::kDbNameFieldNumber;
const int GetTablesRequest::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTablesRequest::GetTablesRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetTablesRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetTablesRequest)
}
GetTablesRequest::GetTablesRequest(const GetTablesRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_name()) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetTablesRequest)
}

void GetTablesRequest::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

GetTablesRequest::~GetTablesRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetTablesRequest)
  SharedDtor();
}

void GetTablesRequest::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetTablesRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTablesRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTablesRequest& GetTablesRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetTablesRequest.base);
  return *internal_default_instance();
}


void GetTablesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      db_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTablesRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetTablesRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string db_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.GetTablesRequest.db_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.GetTablesRequest.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetTablesRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetTablesRequest)
  return false;
#undef DO_
}

void GetTablesRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string db_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetTablesRequest.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // optional string table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetTablesRequest.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetTablesRequest)
}

::google::protobuf::uint8* GetTablesRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetTablesRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string db_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetTablesRequest.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // optional string table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetTablesRequest.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetTablesRequest)
  return target;
}

size_t GetTablesRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetTablesRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string db_name = 1;
    if (has_db_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_name());
    }

    // optional string table_name = 2;
    if (has_table_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->table_name());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTablesRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTablesRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTablesRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetTablesRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetTablesRequest)
    MergeFrom(*source);
  }
}

void GetTablesRequest::MergeFrom(const GetTablesRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetTablesRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_db_name();
      db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
  }
}

void GetTablesRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesRequest::CopyFrom(const GetTablesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetTablesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesRequest::IsInitialized() const {
  return true;
}

void GetTablesRequest::Swap(GetTablesRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTablesRequest::InternalSwap(GetTablesRequest* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTablesRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTablesResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_GetTablesResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void GetTablesResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
void GetTablesResponse::clear_tables() {
  tables_.Clear();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTablesResponse::kStatusFieldNumber;
const int GetTablesResponse::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTablesResponse::GetTablesResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetTablesResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetTablesResponse)
}
GetTablesResponse::GetTablesResponse(const GetTablesResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetTablesResponse)
}

void GetTablesResponse::SharedCtor() {
  status_ = NULL;
}

GetTablesResponse::~GetTablesResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetTablesResponse)
  SharedDtor();
}

void GetTablesResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetTablesResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTablesResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTablesResponse& GetTablesResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetTablesResponse.base);
  return *internal_default_instance();
}


void GetTablesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTablesResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetTablesResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hybridse.type.TableDef tables = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetTablesResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetTablesResponse)
  return false;
#undef DO_
}

void GetTablesResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // repeated .hybridse.type.TableDef tables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->tables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetTablesResponse)
}

::google::protobuf::uint8* GetTablesResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetTablesResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // repeated .hybridse.type.TableDef tables = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->tables(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetTablesResponse)
  return target;
}

size_t GetTablesResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetTablesResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .hybridse.type.TableDef tables = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tables(static_cast<int>(i)));
    }
  }

  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTablesResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetTablesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTablesResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTablesResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetTablesResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetTablesResponse)
    MergeFrom(*source);
  }
}

void GetTablesResponse::MergeFrom(const GetTablesResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetTablesResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void GetTablesResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTablesResponse::CopyFrom(const GetTablesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetTablesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTablesResponse::IsInitialized() const {
  return true;
}

void GetTablesResponse::Swap(GetTablesResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTablesResponse::InternalSwap(GetTablesResponse* other) {
  using std::swap;
  CastToBase(&tables_)->InternalSwap(CastToBase(&other->tables_));
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTablesResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeepAliveRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAliveRequest::kEndpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAliveRequest::KeepAliveRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_KeepAliveRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.KeepAliveRequest)
}
KeepAliveRequest::KeepAliveRequest(const KeepAliveRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_endpoint()) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.KeepAliveRequest)
}

void KeepAliveRequest::SharedCtor() {
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KeepAliveRequest::~KeepAliveRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.KeepAliveRequest)
  SharedDtor();
}

void KeepAliveRequest::SharedDtor() {
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KeepAliveRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeepAliveRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepAliveRequest& KeepAliveRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_KeepAliveRequest.base);
  return *internal_default_instance();
}


void KeepAliveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.KeepAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    endpoint_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepAliveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.KeepAliveRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string endpoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.KeepAliveRequest.endpoint");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.KeepAliveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.KeepAliveRequest)
  return false;
#undef DO_
}

void KeepAliveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.KeepAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.KeepAliveRequest.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->endpoint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.KeepAliveRequest)
}

::google::protobuf::uint8* KeepAliveRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.KeepAliveRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.KeepAliveRequest.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->endpoint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.KeepAliveRequest)
  return target;
}

size_t KeepAliveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.KeepAliveRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional string endpoint = 1;
  if (has_endpoint()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->endpoint());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAliveRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAliveRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAliveRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.KeepAliveRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.KeepAliveRequest)
    MergeFrom(*source);
  }
}

void KeepAliveRequest::MergeFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.KeepAliveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_endpoint()) {
    set_has_endpoint();
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
}

void KeepAliveRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveRequest::CopyFrom(const KeepAliveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.KeepAliveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveRequest::IsInitialized() const {
  return true;
}

void KeepAliveRequest::Swap(KeepAliveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAliveRequest::InternalSwap(KeepAliveRequest* other) {
  using std::swap;
  endpoint_.Swap(&other->endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeepAliveRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KeepAliveResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_KeepAliveResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void KeepAliveResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeepAliveResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeepAliveResponse::KeepAliveResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_KeepAliveResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.KeepAliveResponse)
}
KeepAliveResponse::KeepAliveResponse(const KeepAliveResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.KeepAliveResponse)
}

void KeepAliveResponse::SharedCtor() {
  status_ = NULL;
}

KeepAliveResponse::~KeepAliveResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.KeepAliveResponse)
  SharedDtor();
}

void KeepAliveResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void KeepAliveResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KeepAliveResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KeepAliveResponse& KeepAliveResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_KeepAliveResponse.base);
  return *internal_default_instance();
}


void KeepAliveResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.KeepAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KeepAliveResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.KeepAliveResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.KeepAliveResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.KeepAliveResponse)
  return false;
#undef DO_
}

void KeepAliveResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.KeepAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.KeepAliveResponse)
}

::google::protobuf::uint8* KeepAliveResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.KeepAliveResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.KeepAliveResponse)
  return target;
}

size_t KeepAliveResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.KeepAliveResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KeepAliveResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const KeepAliveResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KeepAliveResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.KeepAliveResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.KeepAliveResponse)
    MergeFrom(*source);
  }
}

void KeepAliveResponse::MergeFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.KeepAliveResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void KeepAliveResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeepAliveResponse::CopyFrom(const KeepAliveResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.KeepAliveResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeepAliveResponse::IsInitialized() const {
  return true;
}

void KeepAliveResponse::Swap(KeepAliveResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeepAliveResponse::InternalSwap(KeepAliveResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KeepAliveResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTabletRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTabletRequest::GetTabletRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetTabletRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetTabletRequest)
}
GetTabletRequest::GetTabletRequest(const GetTabletRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetTabletRequest)
}

void GetTabletRequest::SharedCtor() {
}

GetTabletRequest::~GetTabletRequest() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetTabletRequest)
  SharedDtor();
}

void GetTabletRequest::SharedDtor() {
}

void GetTabletRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTabletRequest::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTabletRequest& GetTabletRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetTabletRequest.base);
  return *internal_default_instance();
}


void GetTabletRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetTabletRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTabletRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetTabletRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetTabletRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetTabletRequest)
  return false;
#undef DO_
}

void GetTabletRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetTabletRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetTabletRequest)
}

::google::protobuf::uint8* GetTabletRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetTabletRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetTabletRequest)
  return target;
}

size_t GetTabletRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetTabletRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTabletRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetTabletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTabletRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTabletRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetTabletRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetTabletRequest)
    MergeFrom(*source);
  }
}

void GetTabletRequest::MergeFrom(const GetTabletRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetTabletRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetTabletRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetTabletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTabletRequest::CopyFrom(const GetTabletRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetTabletRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTabletRequest::IsInitialized() const {
  return true;
}

void GetTabletRequest::Swap(GetTabletRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTabletRequest::InternalSwap(GetTabletRequest* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTabletRequest::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetTabletResponse::InitAsDefaultInstance() {
  ::hybridse::dbms::_GetTabletResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void GetTabletResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetTabletResponse::kStatusFieldNumber;
const int GetTabletResponse::kEndpointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetTabletResponse::GetTabletResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_dbms_2eproto::scc_info_GetTabletResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.dbms.GetTabletResponse)
}
GetTabletResponse::GetTabletResponse(const GetTabletResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      endpoints_(from.endpoints_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.dbms.GetTabletResponse)
}

void GetTabletResponse::SharedCtor() {
  status_ = NULL;
}

GetTabletResponse::~GetTabletResponse() {
  // @@protoc_insertion_point(destructor:hybridse.dbms.GetTabletResponse)
  SharedDtor();
}

void GetTabletResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void GetTabletResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetTabletResponse::descriptor() {
  ::protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetTabletResponse& GetTabletResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_dbms_2eproto::scc_info_GetTabletResponse.base);
  return *internal_default_instance();
}


void GetTabletResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.dbms.GetTabletResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  endpoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool GetTabletResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.dbms.GetTabletResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string endpoints = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_endpoints()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoints(this->endpoints_size() - 1).data(),
            static_cast<int>(this->endpoints(this->endpoints_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.dbms.GetTabletResponse.endpoints");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.dbms.GetTabletResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.dbms.GetTabletResponse)
  return false;
#undef DO_
}

void GetTabletResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.dbms.GetTabletResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  // repeated string endpoints = 2;
  for (int i = 0, n = this->endpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoints(i).data(), static_cast<int>(this->endpoints(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetTabletResponse.endpoints");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->endpoints(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.dbms.GetTabletResponse)
}

::google::protobuf::uint8* GetTabletResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.dbms.GetTabletResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  // repeated string endpoints = 2;
  for (int i = 0, n = this->endpoints_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoints(i).data(), static_cast<int>(this->endpoints(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.dbms.GetTabletResponse.endpoints");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->endpoints(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.dbms.GetTabletResponse)
  return target;
}

size_t GetTabletResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.dbms.GetTabletResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string endpoints = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->endpoints_size());
  for (int i = 0, n = this->endpoints_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->endpoints(i));
  }

  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetTabletResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.dbms.GetTabletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const GetTabletResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetTabletResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.dbms.GetTabletResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.dbms.GetTabletResponse)
    MergeFrom(*source);
  }
}

void GetTabletResponse::MergeFrom(const GetTabletResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.dbms.GetTabletResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  endpoints_.MergeFrom(from.endpoints_);
  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void GetTabletResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.dbms.GetTabletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTabletResponse::CopyFrom(const GetTabletResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.dbms.GetTabletResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTabletResponse::IsInitialized() const {
  return true;
}

void GetTabletResponse::Swap(GetTabletResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetTabletResponse::InternalSwap(GetTabletResponse* other) {
  using std::swap;
  endpoints_.InternalSwap(CastToBase(&other->endpoints_));
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetTabletResponse::GetMetadata() const {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_dbms_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

DBMSServer::~DBMSServer() {}

const ::google::protobuf::ServiceDescriptor* DBMSServer::descriptor() {
  protobuf_dbms_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_dbms_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* DBMSServer::GetDescriptor() {
  return descriptor();
}

void DBMSServer::AddDatabase(::google::protobuf::RpcController* controller,
                         const ::hybridse::dbms::AddDatabaseRequest*,
                         ::hybridse::dbms::AddDatabaseResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddDatabase() not implemented.");
  done->Run();
}

void DBMSServer::AddTable(::google::protobuf::RpcController* controller,
                         const ::hybridse::dbms::AddTableRequest*,
                         ::hybridse::dbms::AddTableResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method AddTable() not implemented.");
  done->Run();
}

void DBMSServer::GetSchema(::google::protobuf::RpcController* controller,
                         const ::hybridse::dbms::GetSchemaRequest*,
                         ::hybridse::dbms::GetSchemaResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetSchema() not implemented.");
  done->Run();
}

void DBMSServer::GetDatabases(::google::protobuf::RpcController* controller,
                         const ::hybridse::dbms::GetDatabasesRequest*,
                         ::hybridse::dbms::GetDatabasesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetDatabases() not implemented.");
  done->Run();
}

void DBMSServer::GetTables(::google::protobuf::RpcController* controller,
                         const ::hybridse::dbms::GetTablesRequest*,
                         ::hybridse::dbms::GetTablesResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTables() not implemented.");
  done->Run();
}

void DBMSServer::KeepAlive(::google::protobuf::RpcController* controller,
                         const ::hybridse::dbms::KeepAliveRequest*,
                         ::hybridse::dbms::KeepAliveResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method KeepAlive() not implemented.");
  done->Run();
}

void DBMSServer::GetTablet(::google::protobuf::RpcController* controller,
                         const ::hybridse::dbms::GetTabletRequest*,
                         ::hybridse::dbms::GetTabletResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method GetTablet() not implemented.");
  done->Run();
}

void DBMSServer::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_dbms_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      AddDatabase(controller,
             ::google::protobuf::down_cast<const ::hybridse::dbms::AddDatabaseRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::dbms::AddDatabaseResponse*>(response),
             done);
      break;
    case 1:
      AddTable(controller,
             ::google::protobuf::down_cast<const ::hybridse::dbms::AddTableRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::dbms::AddTableResponse*>(response),
             done);
      break;
    case 2:
      GetSchema(controller,
             ::google::protobuf::down_cast<const ::hybridse::dbms::GetSchemaRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::dbms::GetSchemaResponse*>(response),
             done);
      break;
    case 3:
      GetDatabases(controller,
             ::google::protobuf::down_cast<const ::hybridse::dbms::GetDatabasesRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::dbms::GetDatabasesResponse*>(response),
             done);
      break;
    case 4:
      GetTables(controller,
             ::google::protobuf::down_cast<const ::hybridse::dbms::GetTablesRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::dbms::GetTablesResponse*>(response),
             done);
      break;
    case 5:
      KeepAlive(controller,
             ::google::protobuf::down_cast<const ::hybridse::dbms::KeepAliveRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::dbms::KeepAliveResponse*>(response),
             done);
      break;
    case 6:
      GetTablet(controller,
             ::google::protobuf::down_cast<const ::hybridse::dbms::GetTabletRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::dbms::GetTabletResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& DBMSServer::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hybridse::dbms::AddDatabaseRequest::default_instance();
    case 1:
      return ::hybridse::dbms::AddTableRequest::default_instance();
    case 2:
      return ::hybridse::dbms::GetSchemaRequest::default_instance();
    case 3:
      return ::hybridse::dbms::GetDatabasesRequest::default_instance();
    case 4:
      return ::hybridse::dbms::GetTablesRequest::default_instance();
    case 5:
      return ::hybridse::dbms::KeepAliveRequest::default_instance();
    case 6:
      return ::hybridse::dbms::GetTabletRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& DBMSServer::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hybridse::dbms::AddDatabaseResponse::default_instance();
    case 1:
      return ::hybridse::dbms::AddTableResponse::default_instance();
    case 2:
      return ::hybridse::dbms::GetSchemaResponse::default_instance();
    case 3:
      return ::hybridse::dbms::GetDatabasesResponse::default_instance();
    case 4:
      return ::hybridse::dbms::GetTablesResponse::default_instance();
    case 5:
      return ::hybridse::dbms::KeepAliveResponse::default_instance();
    case 6:
      return ::hybridse::dbms::GetTabletResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

DBMSServer_Stub::DBMSServer_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
DBMSServer_Stub::DBMSServer_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
DBMSServer_Stub::~DBMSServer_Stub() {
  if (owns_channel_) delete channel_;
}

void DBMSServer_Stub::AddDatabase(::google::protobuf::RpcController* controller,
                              const ::hybridse::dbms::AddDatabaseRequest* request,
                              ::hybridse::dbms::AddDatabaseResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void DBMSServer_Stub::AddTable(::google::protobuf::RpcController* controller,
                              const ::hybridse::dbms::AddTableRequest* request,
                              ::hybridse::dbms::AddTableResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}
void DBMSServer_Stub::GetSchema(::google::protobuf::RpcController* controller,
                              const ::hybridse::dbms::GetSchemaRequest* request,
                              ::hybridse::dbms::GetSchemaResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(2),
                       controller, request, response, done);
}
void DBMSServer_Stub::GetDatabases(::google::protobuf::RpcController* controller,
                              const ::hybridse::dbms::GetDatabasesRequest* request,
                              ::hybridse::dbms::GetDatabasesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(3),
                       controller, request, response, done);
}
void DBMSServer_Stub::GetTables(::google::protobuf::RpcController* controller,
                              const ::hybridse::dbms::GetTablesRequest* request,
                              ::hybridse::dbms::GetTablesResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(4),
                       controller, request, response, done);
}
void DBMSServer_Stub::KeepAlive(::google::protobuf::RpcController* controller,
                              const ::hybridse::dbms::KeepAliveRequest* request,
                              ::hybridse::dbms::KeepAliveResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(5),
                       controller, request, response, done);
}
void DBMSServer_Stub::GetTablet(::google::protobuf::RpcController* controller,
                              const ::hybridse::dbms::GetTabletRequest* request,
                              ::hybridse::dbms::GetTabletResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(6),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace dbms
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::AddGroupRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::AddGroupRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::AddGroupRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::AddGroupResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::AddGroupResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::AddGroupResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::AddDatabaseRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::AddDatabaseRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::AddDatabaseRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::AddDatabaseResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::AddDatabaseResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::AddDatabaseResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::IsExistRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::IsExistRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::IsExistRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::IsExistResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::IsExistResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::IsExistResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::AddTableRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::AddTableRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::AddTableRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::AddTableResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::AddTableResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::AddTableResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetSchemaRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::GetSchemaRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetSchemaRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetSchemaResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::GetSchemaResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetSchemaResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetDatabasesRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::GetDatabasesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetDatabasesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetDatabasesResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::GetDatabasesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetDatabasesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetTablesRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::GetTablesRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetTablesRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetTablesResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::GetTablesResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetTablesResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::KeepAliveRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::KeepAliveRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::KeepAliveRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::KeepAliveResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::KeepAliveResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::KeepAliveResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetTabletRequest* Arena::CreateMaybeMessage< ::hybridse::dbms::GetTabletRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetTabletRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::dbms::GetTabletResponse* Arena::CreateMaybeMessage< ::hybridse::dbms::GetTabletResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::dbms::GetTabletResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
