// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: batch.proto

#include "batch.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_batch_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_batch_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_JobDesc;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_batch_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TaskDesc;
}  // namespace protobuf_batch_2eproto
namespace protobuf_fe_5fcommon_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5fcommon_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Status;
}  // namespace protobuf_fe_5fcommon_2eproto
namespace protobuf_fe_5ftype_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5ftype_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TableDef;
}  // namespace protobuf_fe_5ftype_2eproto
namespace protobuf_plan_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_plan_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_GraphDesc;
}  // namespace protobuf_plan_2eproto
namespace hybridse {
namespace batch {
class DataSetDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DataSet>
      _instance;
} _DataSet_default_instance_;
class JobDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<JobDesc>
      _instance;
} _JobDesc_default_instance_;
class TaskDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TaskDesc>
      _instance;
} _TaskDesc_default_instance_;
class StartRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartRequest>
      _instance;
} _StartRequest_default_instance_;
class StartResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<StartResponse>
      _instance;
} _StartResponse_default_instance_;
class RunTaskRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunTaskRequest>
      _instance;
} _RunTaskRequest_default_instance_;
class RunTaskResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RunTaskResponse>
      _instance;
} _RunTaskResponse_default_instance_;
}  // namespace batch
}  // namespace hybridse
namespace protobuf_batch_2eproto {
static void InitDefaultsDataSet() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_DataSet_default_instance_;
    new (ptr) ::hybridse::batch::DataSet();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::DataSet::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_DataSet =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDataSet}, {
      &protobuf_fe_5ftype_2eproto::scc_info_TableDef.base,}};

static void InitDefaultsJobDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_JobDesc_default_instance_;
    new (ptr) ::hybridse::batch::JobDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::JobDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_JobDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsJobDesc}, {}};

static void InitDefaultsTaskDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_TaskDesc_default_instance_;
    new (ptr) ::hybridse::batch::TaskDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::TaskDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TaskDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTaskDesc}, {
      &protobuf_plan_2eproto::scc_info_GraphDesc.base,}};

static void InitDefaultsStartRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_StartRequest_default_instance_;
    new (ptr) ::hybridse::batch::StartRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::StartRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartRequest}, {
      &protobuf_batch_2eproto::scc_info_JobDesc.base,}};

static void InitDefaultsStartResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_StartResponse_default_instance_;
    new (ptr) ::hybridse::batch::StartResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::StartResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_StartResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsStartResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

static void InitDefaultsRunTaskRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_RunTaskRequest_default_instance_;
    new (ptr) ::hybridse::batch::RunTaskRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::RunTaskRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RunTaskRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRunTaskRequest}, {
      &protobuf_batch_2eproto::scc_info_TaskDesc.base,}};

static void InitDefaultsRunTaskResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::batch::_RunTaskResponse_default_instance_;
    new (ptr) ::hybridse::batch::RunTaskResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::batch::RunTaskResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_RunTaskResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsRunTaskResponse}, {
      &protobuf_fe_5fcommon_2eproto::scc_info_Status.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_DataSet.base);
  ::google::protobuf::internal::InitSCC(&scc_info_JobDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TaskDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_StartResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunTaskRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_RunTaskResponse.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::ServiceDescriptor* file_level_service_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSet, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSet, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSet, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::DataSet, schema_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::JobDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::JobDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::JobDesc, sql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::JobDesc, db_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::JobDesc, workers_),
  0,
  1,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::TaskDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::TaskDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::TaskDesc, graph_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::StartRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::StartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::StartRequest, job_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::StartResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::StartResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::StartResponse, status_),
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskRequest, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskRequest, sql_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskRequest, task_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskResponse, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::batch::RunTaskResponse, status_),
  0,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::hybridse::batch::DataSet)},
  { 9, 17, sizeof(::hybridse::batch::JobDesc)},
  { 20, 26, sizeof(::hybridse::batch::TaskDesc)},
  { 27, 33, sizeof(::hybridse::batch::StartRequest)},
  { 34, 40, sizeof(::hybridse::batch::StartResponse)},
  { 41, 49, sizeof(::hybridse::batch::RunTaskRequest)},
  { 52, 58, sizeof(::hybridse::batch::RunTaskResponse)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_DataSet_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_JobDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_TaskDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_StartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_StartResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_RunTaskRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::batch::_RunTaskResponse_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "batch.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, file_level_service_descriptors);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\013batch.proto\022\016hybridse.batch\032\rfe_type.p"
      "roto\032\017fe_common.proto\032\nplan.proto\"@\n\007Dat"
      "aSet\022\014\n\004name\030\001 \001(\t\022\'\n\006schema\030\002 \001(\0132\027.hyb"
      "ridse.type.TableDef\"3\n\007JobDesc\022\013\n\003sql\030\001 "
      "\001(\t\022\n\n\002db\030\002 \001(\t\022\017\n\007workers\030\003 \003(\t\"4\n\010Task"
      "Desc\022(\n\005graph\030\001 \001(\0132\031.hybridse.batch.Gra"
      "phDesc\"4\n\014StartRequest\022$\n\003job\030\001 \001(\0132\027.hy"
      "bridse.batch.JobDesc\"8\n\rStartResponse\022\'\n"
      "\006status\030\001 \001(\0132\027.hybridse.common.Status\"Q"
      "\n\016RunTaskRequest\022\n\n\002id\030\001 \001(\t\022\013\n\003sql\030\002 \001("
      "\t\022&\n\004task\030\003 \001(\0132\030.hybridse.batch.TaskDes"
      "c\":\n\017RunTaskResponse\022\'\n\006status\030\001 \001(\0132\027.h"
      "ybridse.common.Status2\241\001\n\010BatchLet\022I\n\013St"
      "artDriver\022\034.hybridse.batch.StartRequest\032"
      "\034.hybridse.batch.StartRequest\022J\n\007RunTask"
      "\022\036.hybridse.batch.RunTaskRequest\032\037.hybri"
      "dse.batch.RunTaskResponseB\"\n\035com._4parad"
      "igm.hybridse.batch\200\001\001"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 701);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "batch.proto", &protobuf_RegisterTypes);
  ::protobuf_fe_5ftype_2eproto::AddDescriptors();
  ::protobuf_fe_5fcommon_2eproto::AddDescriptors();
  ::protobuf_plan_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_batch_2eproto
namespace hybridse {
namespace batch {

// ===================================================================

void DataSet::InitAsDefaultInstance() {
  ::hybridse::batch::_DataSet_default_instance_._instance.get_mutable()->schema_ = const_cast< ::hybridse::type::TableDef*>(
      ::hybridse::type::TableDef::internal_default_instance());
}
void DataSet::clear_schema() {
  if (schema_ != NULL) schema_->Clear();
  clear_has_schema();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DataSet::kNameFieldNumber;
const int DataSet::kSchemaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DataSet::DataSet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_batch_2eproto::scc_info_DataSet.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.DataSet)
}
DataSet::DataSet(const DataSet& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_schema()) {
    schema_ = new ::hybridse::type::TableDef(*from.schema_);
  } else {
    schema_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.DataSet)
}

void DataSet::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  schema_ = NULL;
}

DataSet::~DataSet() {
  // @@protoc_insertion_point(destructor:hybridse.batch.DataSet)
  SharedDtor();
}

void DataSet::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete schema_;
}

void DataSet::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DataSet::descriptor() {
  ::protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DataSet& DataSet::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_batch_2eproto::scc_info_DataSet.base);
  return *internal_default_instance();
}


void DataSet::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.DataSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(schema_ != NULL);
      schema_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DataSet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.DataSet)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.DataSet.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hybridse.type.TableDef schema = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_schema()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.DataSet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.DataSet)
  return false;
#undef DO_
}

void DataSet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.DataSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSet.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .hybridse.type.TableDef schema = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_schema(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.DataSet)
}

::google::protobuf::uint8* DataSet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.DataSet)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.DataSet.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .hybridse.type.TableDef schema = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_schema(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.DataSet)
  return target;
}

size_t DataSet::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.DataSet)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .hybridse.type.TableDef schema = 2;
    if (has_schema()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *schema_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataSet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.DataSet)
  GOOGLE_DCHECK_NE(&from, this);
  const DataSet* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DataSet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.DataSet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.DataSet)
    MergeFrom(*source);
  }
}

void DataSet::MergeFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.DataSet)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_schema()->::hybridse::type::TableDef::MergeFrom(from.schema());
    }
  }
}

void DataSet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.DataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataSet::CopyFrom(const DataSet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.DataSet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataSet::IsInitialized() const {
  return true;
}

void DataSet::Swap(DataSet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DataSet::InternalSwap(DataSet* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(schema_, other->schema_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DataSet::GetMetadata() const {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void JobDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int JobDesc::kSqlFieldNumber;
const int JobDesc::kDbFieldNumber;
const int JobDesc::kWorkersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

JobDesc::JobDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_batch_2eproto::scc_info_JobDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.JobDesc)
}
JobDesc::JobDesc(const JobDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      workers_(from.workers_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sql()) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db()) {
    db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.JobDesc)
}

void JobDesc::SharedCtor() {
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

JobDesc::~JobDesc() {
  // @@protoc_insertion_point(destructor:hybridse.batch.JobDesc)
  SharedDtor();
}

void JobDesc::SharedDtor() {
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  db_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void JobDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* JobDesc::descriptor() {
  ::protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const JobDesc& JobDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_batch_2eproto::scc_info_JobDesc.base);
  return *internal_default_instance();
}


void JobDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.JobDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  workers_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      sql_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      db_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool JobDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.JobDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string sql = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.JobDesc.sql");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string db = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db().data(), static_cast<int>(this->db().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.JobDesc.db");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string workers = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_workers()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->workers(this->workers_size() - 1).data(),
            static_cast<int>(this->workers(this->workers_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.JobDesc.workers");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.JobDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.JobDesc)
  return false;
#undef DO_
}

void JobDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.JobDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sql = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.JobDesc.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sql(), output);
  }

  // optional string db = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.JobDesc.db");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->db(), output);
  }

  // repeated string workers = 3;
  for (int i = 0, n = this->workers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workers(i).data(), static_cast<int>(this->workers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.JobDesc.workers");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->workers(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.JobDesc)
}

::google::protobuf::uint8* JobDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.JobDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string sql = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.JobDesc.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sql(), target);
  }

  // optional string db = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db().data(), static_cast<int>(this->db().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.JobDesc.db");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->db(), target);
  }

  // repeated string workers = 3;
  for (int i = 0, n = this->workers_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->workers(i).data(), static_cast<int>(this->workers(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.JobDesc.workers");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->workers(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.JobDesc)
  return target;
}

size_t JobDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.JobDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string workers = 3;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->workers_size());
  for (int i = 0, n = this->workers_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->workers(i));
  }

  if (_has_bits_[0 / 32] & 3u) {
    // optional string sql = 1;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

    // optional string db = 2;
    if (has_db()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void JobDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.JobDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const JobDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const JobDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.JobDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.JobDesc)
    MergeFrom(*source);
  }
}

void JobDesc::MergeFrom(const JobDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.JobDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  workers_.MergeFrom(from.workers_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_sql();
      sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_db();
      db_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_);
    }
  }
}

void JobDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.JobDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobDesc::CopyFrom(const JobDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.JobDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobDesc::IsInitialized() const {
  return true;
}

void JobDesc::Swap(JobDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void JobDesc::InternalSwap(JobDesc* other) {
  using std::swap;
  workers_.InternalSwap(CastToBase(&other->workers_));
  sql_.Swap(&other->sql_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  db_.Swap(&other->db_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata JobDesc::GetMetadata() const {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TaskDesc::InitAsDefaultInstance() {
  ::hybridse::batch::_TaskDesc_default_instance_._instance.get_mutable()->graph_ = const_cast< ::hybridse::batch::GraphDesc*>(
      ::hybridse::batch::GraphDesc::internal_default_instance());
}
void TaskDesc::clear_graph() {
  if (graph_ != NULL) graph_->Clear();
  clear_has_graph();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TaskDesc::kGraphFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TaskDesc::TaskDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_batch_2eproto::scc_info_TaskDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.TaskDesc)
}
TaskDesc::TaskDesc(const TaskDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_graph()) {
    graph_ = new ::hybridse::batch::GraphDesc(*from.graph_);
  } else {
    graph_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.TaskDesc)
}

void TaskDesc::SharedCtor() {
  graph_ = NULL;
}

TaskDesc::~TaskDesc() {
  // @@protoc_insertion_point(destructor:hybridse.batch.TaskDesc)
  SharedDtor();
}

void TaskDesc::SharedDtor() {
  if (this != internal_default_instance()) delete graph_;
}

void TaskDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TaskDesc::descriptor() {
  ::protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TaskDesc& TaskDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_batch_2eproto::scc_info_TaskDesc.base);
  return *internal_default_instance();
}


void TaskDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.TaskDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(graph_ != NULL);
    graph_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TaskDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.TaskDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.batch.GraphDesc graph = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_graph()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.TaskDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.TaskDesc)
  return false;
#undef DO_
}

void TaskDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.TaskDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.batch.GraphDesc graph = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_graph(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.TaskDesc)
}

::google::protobuf::uint8* TaskDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.TaskDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.batch.GraphDesc graph = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_graph(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.TaskDesc)
  return target;
}

size_t TaskDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.TaskDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.batch.GraphDesc graph = 1;
  if (has_graph()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *graph_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TaskDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.TaskDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const TaskDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TaskDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.TaskDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.TaskDesc)
    MergeFrom(*source);
  }
}

void TaskDesc::MergeFrom(const TaskDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.TaskDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_graph()) {
    mutable_graph()->::hybridse::batch::GraphDesc::MergeFrom(from.graph());
  }
}

void TaskDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.TaskDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskDesc::CopyFrom(const TaskDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.TaskDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskDesc::IsInitialized() const {
  return true;
}

void TaskDesc::Swap(TaskDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TaskDesc::InternalSwap(TaskDesc* other) {
  using std::swap;
  swap(graph_, other->graph_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TaskDesc::GetMetadata() const {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartRequest::InitAsDefaultInstance() {
  ::hybridse::batch::_StartRequest_default_instance_._instance.get_mutable()->job_ = const_cast< ::hybridse::batch::JobDesc*>(
      ::hybridse::batch::JobDesc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRequest::kJobFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRequest::StartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_batch_2eproto::scc_info_StartRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.StartRequest)
}
StartRequest::StartRequest(const StartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_job()) {
    job_ = new ::hybridse::batch::JobDesc(*from.job_);
  } else {
    job_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.StartRequest)
}

void StartRequest::SharedCtor() {
  job_ = NULL;
}

StartRequest::~StartRequest() {
  // @@protoc_insertion_point(destructor:hybridse.batch.StartRequest)
  SharedDtor();
}

void StartRequest::SharedDtor() {
  if (this != internal_default_instance()) delete job_;
}

void StartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartRequest::descriptor() {
  ::protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartRequest& StartRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_batch_2eproto::scc_info_StartRequest.base);
  return *internal_default_instance();
}


void StartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.StartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(job_ != NULL);
    job_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.StartRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.batch.JobDesc job = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_job()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.StartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.StartRequest)
  return false;
#undef DO_
}

void StartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.StartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.batch.JobDesc job = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_job(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.StartRequest)
}

::google::protobuf::uint8* StartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.StartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.batch.JobDesc job = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_job(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.StartRequest)
  return target;
}

size_t StartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.StartRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.batch.JobDesc job = 1;
  if (has_job()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *job_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.StartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.StartRequest)
    MergeFrom(*source);
  }
}

void StartRequest::MergeFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.StartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_job()) {
    mutable_job()->::hybridse::batch::JobDesc::MergeFrom(from.job());
  }
}

void StartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRequest::CopyFrom(const StartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.StartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRequest::IsInitialized() const {
  return true;
}

void StartRequest::Swap(StartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRequest::InternalSwap(StartRequest* other) {
  using std::swap;
  swap(job_, other->job_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartRequest::GetMetadata() const {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void StartResponse::InitAsDefaultInstance() {
  ::hybridse::batch::_StartResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void StartResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartResponse::StartResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_batch_2eproto::scc_info_StartResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.StartResponse)
}
StartResponse::StartResponse(const StartResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.StartResponse)
}

void StartResponse::SharedCtor() {
  status_ = NULL;
}

StartResponse::~StartResponse() {
  // @@protoc_insertion_point(destructor:hybridse.batch.StartResponse)
  SharedDtor();
}

void StartResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void StartResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* StartResponse::descriptor() {
  ::protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const StartResponse& StartResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_batch_2eproto::scc_info_StartResponse.base);
  return *internal_default_instance();
}


void StartResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.StartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool StartResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.StartResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.StartResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.StartResponse)
  return false;
#undef DO_
}

void StartResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.StartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.StartResponse)
}

::google::protobuf::uint8* StartResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.StartResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.StartResponse)
  return target;
}

size_t StartResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.StartResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.StartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const StartResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.StartResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.StartResponse)
    MergeFrom(*source);
  }
}

void StartResponse::MergeFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.StartResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void StartResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.StartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartResponse::CopyFrom(const StartResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.StartResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartResponse::IsInitialized() const {
  return true;
}

void StartResponse::Swap(StartResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartResponse::InternalSwap(StartResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata StartResponse::GetMetadata() const {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RunTaskRequest::InitAsDefaultInstance() {
  ::hybridse::batch::_RunTaskRequest_default_instance_._instance.get_mutable()->task_ = const_cast< ::hybridse::batch::TaskDesc*>(
      ::hybridse::batch::TaskDesc::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunTaskRequest::kIdFieldNumber;
const int RunTaskRequest::kSqlFieldNumber;
const int RunTaskRequest::kTaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunTaskRequest::RunTaskRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_batch_2eproto::scc_info_RunTaskRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.RunTaskRequest)
}
RunTaskRequest::RunTaskRequest(const RunTaskRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_id()) {
    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_sql()) {
    sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
  }
  if (from.has_task()) {
    task_ = new ::hybridse::batch::TaskDesc(*from.task_);
  } else {
    task_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.RunTaskRequest)
}

void RunTaskRequest::SharedCtor() {
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  task_ = NULL;
}

RunTaskRequest::~RunTaskRequest() {
  // @@protoc_insertion_point(destructor:hybridse.batch.RunTaskRequest)
  SharedDtor();
}

void RunTaskRequest::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sql_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete task_;
}

void RunTaskRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RunTaskRequest::descriptor() {
  ::protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunTaskRequest& RunTaskRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_batch_2eproto::scc_info_RunTaskRequest.base);
  return *internal_default_instance();
}


void RunTaskRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.RunTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      sql_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(task_ != NULL);
      task_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RunTaskRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.RunTaskRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), static_cast<int>(this->id().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.RunTaskRequest.id");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string sql = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sql()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sql().data(), static_cast<int>(this->sql().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.batch.RunTaskRequest.sql");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hybridse.batch.TaskDesc task = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_task()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.RunTaskRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.RunTaskRequest)
  return false;
#undef DO_
}

void RunTaskRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.RunTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.RunTaskRequest.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string sql = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.RunTaskRequest.sql");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sql(), output);
  }

  // optional .hybridse.batch.TaskDesc task = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_task(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.RunTaskRequest)
}

::google::protobuf::uint8* RunTaskRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.RunTaskRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), static_cast<int>(this->id().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.RunTaskRequest.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string sql = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sql().data(), static_cast<int>(this->sql().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.batch.RunTaskRequest.sql");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sql(), target);
  }

  // optional .hybridse.batch.TaskDesc task = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_task(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.RunTaskRequest)
  return target;
}

size_t RunTaskRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.RunTaskRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // optional string sql = 2;
    if (has_sql()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sql());
    }

    // optional .hybridse.batch.TaskDesc task = 3;
    if (has_task()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *task_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunTaskRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.RunTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const RunTaskRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunTaskRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.RunTaskRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.RunTaskRequest)
    MergeFrom(*source);
  }
}

void RunTaskRequest::MergeFrom(const RunTaskRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.RunTaskRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_sql();
      sql_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sql_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_task()->::hybridse::batch::TaskDesc::MergeFrom(from.task());
    }
  }
}

void RunTaskRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.RunTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunTaskRequest::CopyFrom(const RunTaskRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.RunTaskRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunTaskRequest::IsInitialized() const {
  return true;
}

void RunTaskRequest::Swap(RunTaskRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunTaskRequest::InternalSwap(RunTaskRequest* other) {
  using std::swap;
  id_.Swap(&other->id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sql_.Swap(&other->sql_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(task_, other->task_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RunTaskRequest::GetMetadata() const {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void RunTaskResponse::InitAsDefaultInstance() {
  ::hybridse::batch::_RunTaskResponse_default_instance_._instance.get_mutable()->status_ = const_cast< ::hybridse::common::Status*>(
      ::hybridse::common::Status::internal_default_instance());
}
void RunTaskResponse::clear_status() {
  if (status_ != NULL) status_->Clear();
  clear_has_status();
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RunTaskResponse::kStatusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RunTaskResponse::RunTaskResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_batch_2eproto::scc_info_RunTaskResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.batch.RunTaskResponse)
}
RunTaskResponse::RunTaskResponse(const RunTaskResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_status()) {
    status_ = new ::hybridse::common::Status(*from.status_);
  } else {
    status_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:hybridse.batch.RunTaskResponse)
}

void RunTaskResponse::SharedCtor() {
  status_ = NULL;
}

RunTaskResponse::~RunTaskResponse() {
  // @@protoc_insertion_point(destructor:hybridse.batch.RunTaskResponse)
  SharedDtor();
}

void RunTaskResponse::SharedDtor() {
  if (this != internal_default_instance()) delete status_;
}

void RunTaskResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RunTaskResponse::descriptor() {
  ::protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RunTaskResponse& RunTaskResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_batch_2eproto::scc_info_RunTaskResponse.base);
  return *internal_default_instance();
}


void RunTaskResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.batch.RunTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(status_ != NULL);
    status_->Clear();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool RunTaskResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.batch.RunTaskResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .hybridse.common.Status status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_status()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.batch.RunTaskResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.batch.RunTaskResponse)
  return false;
#undef DO_
}

void RunTaskResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.batch.RunTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_status(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.batch.RunTaskResponse)
}

::google::protobuf::uint8* RunTaskResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.batch.RunTaskResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .hybridse.common.Status status = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_status(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.batch.RunTaskResponse)
  return target;
}

size_t RunTaskResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.batch.RunTaskResponse)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // optional .hybridse.common.Status status = 1;
  if (has_status()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *status_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RunTaskResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.batch.RunTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const RunTaskResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RunTaskResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.batch.RunTaskResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.batch.RunTaskResponse)
    MergeFrom(*source);
  }
}

void RunTaskResponse::MergeFrom(const RunTaskResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.batch.RunTaskResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_status()) {
    mutable_status()->::hybridse::common::Status::MergeFrom(from.status());
  }
}

void RunTaskResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.batch.RunTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RunTaskResponse::CopyFrom(const RunTaskResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.batch.RunTaskResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RunTaskResponse::IsInitialized() const {
  return true;
}

void RunTaskResponse::Swap(RunTaskResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RunTaskResponse::InternalSwap(RunTaskResponse* other) {
  using std::swap;
  swap(status_, other->status_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RunTaskResponse::GetMetadata() const {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_batch_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

BatchLet::~BatchLet() {}

const ::google::protobuf::ServiceDescriptor* BatchLet::descriptor() {
  protobuf_batch_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_batch_2eproto::file_level_service_descriptors[0];
}

const ::google::protobuf::ServiceDescriptor* BatchLet::GetDescriptor() {
  return descriptor();
}

void BatchLet::StartDriver(::google::protobuf::RpcController* controller,
                         const ::hybridse::batch::StartRequest*,
                         ::hybridse::batch::StartRequest*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method StartDriver() not implemented.");
  done->Run();
}

void BatchLet::RunTask(::google::protobuf::RpcController* controller,
                         const ::hybridse::batch::RunTaskRequest*,
                         ::hybridse::batch::RunTaskResponse*,
                         ::google::protobuf::Closure* done) {
  controller->SetFailed("Method RunTask() not implemented.");
  done->Run();
}

void BatchLet::CallMethod(const ::google::protobuf::MethodDescriptor* method,
                             ::google::protobuf::RpcController* controller,
                             const ::google::protobuf::Message* request,
                             ::google::protobuf::Message* response,
                             ::google::protobuf::Closure* done) {
  GOOGLE_DCHECK_EQ(method->service(), protobuf_batch_2eproto::file_level_service_descriptors[0]);
  switch(method->index()) {
    case 0:
      StartDriver(controller,
             ::google::protobuf::down_cast<const ::hybridse::batch::StartRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::batch::StartRequest*>(response),
             done);
      break;
    case 1:
      RunTask(controller,
             ::google::protobuf::down_cast<const ::hybridse::batch::RunTaskRequest*>(request),
             ::google::protobuf::down_cast< ::hybridse::batch::RunTaskResponse*>(response),
             done);
      break;
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      break;
  }
}

const ::google::protobuf::Message& BatchLet::GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hybridse::batch::StartRequest::default_instance();
    case 1:
      return ::hybridse::batch::RunTaskRequest::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->input_type());
  }
}

const ::google::protobuf::Message& BatchLet::GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const {
  GOOGLE_DCHECK_EQ(method->service(), descriptor());
  switch(method->index()) {
    case 0:
      return ::hybridse::batch::StartRequest::default_instance();
    case 1:
      return ::hybridse::batch::RunTaskResponse::default_instance();
    default:
      GOOGLE_LOG(FATAL) << "Bad method index; this should never happen.";
      return *::google::protobuf::MessageFactory::generated_factory()
          ->GetPrototype(method->output_type());
  }
}

BatchLet_Stub::BatchLet_Stub(::google::protobuf::RpcChannel* channel)
  : channel_(channel), owns_channel_(false) {}
BatchLet_Stub::BatchLet_Stub(
    ::google::protobuf::RpcChannel* channel,
    ::google::protobuf::Service::ChannelOwnership ownership)
  : channel_(channel),
    owns_channel_(ownership == ::google::protobuf::Service::STUB_OWNS_CHANNEL) {}
BatchLet_Stub::~BatchLet_Stub() {
  if (owns_channel_) delete channel_;
}

void BatchLet_Stub::StartDriver(::google::protobuf::RpcController* controller,
                              const ::hybridse::batch::StartRequest* request,
                              ::hybridse::batch::StartRequest* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(0),
                       controller, request, response, done);
}
void BatchLet_Stub::RunTask(::google::protobuf::RpcController* controller,
                              const ::hybridse::batch::RunTaskRequest* request,
                              ::hybridse::batch::RunTaskResponse* response,
                              ::google::protobuf::Closure* done) {
  channel_->CallMethod(descriptor()->method(1),
                       controller, request, response, done);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace batch
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::DataSet* Arena::CreateMaybeMessage< ::hybridse::batch::DataSet >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::DataSet >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::JobDesc* Arena::CreateMaybeMessage< ::hybridse::batch::JobDesc >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::JobDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::TaskDesc* Arena::CreateMaybeMessage< ::hybridse::batch::TaskDesc >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::TaskDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::StartRequest* Arena::CreateMaybeMessage< ::hybridse::batch::StartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::StartRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::StartResponse* Arena::CreateMaybeMessage< ::hybridse::batch::StartResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::StartResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::RunTaskRequest* Arena::CreateMaybeMessage< ::hybridse::batch::RunTaskRequest >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::RunTaskRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::batch::RunTaskResponse* Arena::CreateMaybeMessage< ::hybridse::batch::RunTaskResponse >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::batch::RunTaskResponse >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
