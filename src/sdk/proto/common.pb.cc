// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: common.proto

#include "common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_common_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_KvPair;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_PartitionMeta;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_common_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TTLSt;
}  // namespace protobuf_common_2eproto
namespace openmldb {
namespace common {
class KvPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KvPair>
      _instance;
} _KvPair_default_instance_;
class KvListDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<KvList>
      _instance;
} _KvList_default_instance_;
class VersionPairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<VersionPair>
      _instance;
} _VersionPair_default_instance_;
class DbTableNamePairDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DbTableNamePair>
      _instance;
} _DbTableNamePair_default_instance_;
class ColumnDescDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnDesc>
      _instance;
} _ColumnDesc_default_instance_;
class TTLStDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TTLSt>
      _instance;
} _TTLSt_default_instance_;
class ColumnKeyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnKey>
      _instance;
} _ColumnKey_default_instance_;
class EndpointAndTidDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EndpointAndTid>
      _instance;
} _EndpointAndTid_default_instance_;
class PartitionMetaDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<PartitionMeta>
      _instance;
} _PartitionMeta_default_instance_;
class TablePartitionDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TablePartition>
      _instance;
} _TablePartition_default_instance_;
class CatalogInfoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CatalogInfo>
      _instance;
} _CatalogInfo_default_instance_;
class ExternalFunDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ExternalFun>
      _instance;
} _ExternalFun_default_instance_;
}  // namespace common
}  // namespace openmldb
namespace protobuf_common_2eproto {
static void InitDefaultsKvPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_KvPair_default_instance_;
    new (ptr) ::openmldb::common::KvPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::KvPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_KvPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsKvPair}, {}};

static void InitDefaultsKvList() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_KvList_default_instance_;
    new (ptr) ::openmldb::common::KvList();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::KvList::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_KvList =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsKvList}, {
      &protobuf_common_2eproto::scc_info_KvPair.base,}};

static void InitDefaultsVersionPair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_VersionPair_default_instance_;
    new (ptr) ::openmldb::common::VersionPair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::VersionPair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_VersionPair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsVersionPair}, {}};

static void InitDefaultsDbTableNamePair() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_DbTableNamePair_default_instance_;
    new (ptr) ::openmldb::common::DbTableNamePair();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::DbTableNamePair::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_DbTableNamePair =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsDbTableNamePair}, {}};

static void InitDefaultsColumnDesc() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_ColumnDesc_default_instance_;
    new (ptr) ::openmldb::common::ColumnDesc();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::ColumnDesc::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ColumnDesc =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColumnDesc}, {}};

static void InitDefaultsTTLSt() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_TTLSt_default_instance_;
    new (ptr) ::openmldb::common::TTLSt();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::TTLSt::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_TTLSt =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsTTLSt}, {}};

static void InitDefaultsColumnKey() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_ColumnKey_default_instance_;
    new (ptr) ::openmldb::common::ColumnKey();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::ColumnKey::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_ColumnKey =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsColumnKey}, {
      &protobuf_common_2eproto::scc_info_TTLSt.base,}};

static void InitDefaultsEndpointAndTid() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_EndpointAndTid_default_instance_;
    new (ptr) ::openmldb::common::EndpointAndTid();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::EndpointAndTid::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EndpointAndTid =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEndpointAndTid}, {}};

static void InitDefaultsPartitionMeta() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_PartitionMeta_default_instance_;
    new (ptr) ::openmldb::common::PartitionMeta();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::PartitionMeta::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_PartitionMeta =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsPartitionMeta}, {}};

static void InitDefaultsTablePartition() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_TablePartition_default_instance_;
    new (ptr) ::openmldb::common::TablePartition();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::TablePartition::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_TablePartition =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsTablePartition}, {
      &protobuf_common_2eproto::scc_info_PartitionMeta.base,}};

static void InitDefaultsCatalogInfo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_CatalogInfo_default_instance_;
    new (ptr) ::openmldb::common::CatalogInfo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::CatalogInfo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CatalogInfo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCatalogInfo}, {}};

static void InitDefaultsExternalFun() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::openmldb::common::_ExternalFun_default_instance_;
    new (ptr) ::openmldb::common::ExternalFun();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::openmldb::common::ExternalFun::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ExternalFun =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsExternalFun}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_KvPair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_KvList.base);
  ::google::protobuf::internal::InitSCC(&scc_info_VersionPair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DbTableNamePair.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnDesc.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TTLSt.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnKey.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EndpointAndTid.base);
  ::google::protobuf::internal::InitSCC(&scc_info_PartitionMeta.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TablePartition.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CatalogInfo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_ExternalFun.base);
}

::google::protobuf::Metadata file_level_metadata[12];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvPair, time_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvPair, value_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvList, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvList, pk_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::KvList, pairs_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::VersionPair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::VersionPair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::VersionPair, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::VersionPair, field_count_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::DbTableNamePair, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::DbTableNamePair, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::DbTableNamePair, db_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::DbTableNamePair, table_name_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnDesc, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnDesc, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnDesc, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnDesc, data_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnDesc, not_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnDesc, is_constant_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnDesc, default_value_),
  0,
  4,
  2,
  3,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TTLSt, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TTLSt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TTLSt, ttl_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TTLSt, abs_ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TTLSt, lat_ttl_),
  2,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnKey, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnKey, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnKey, index_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnKey, col_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnKey, ts_name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnKey, flag_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ColumnKey, ttl_),
  0,
  ~0u,
  1,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::EndpointAndTid, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::EndpointAndTid, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::EndpointAndTid, endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::EndpointAndTid, tid_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::PartitionMeta, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::PartitionMeta, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::PartitionMeta, endpoint_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::PartitionMeta, is_leader_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::PartitionMeta, is_alive_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TablePartition, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TablePartition, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TablePartition, pid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::TablePartition, partition_meta_),
  0,
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::CatalogInfo, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::CatalogInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::CatalogInfo, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::CatalogInfo, endpoint_),
  1,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ExternalFun, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ExternalFun, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ExternalFun, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ExternalFun, return_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ExternalFun, arg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ExternalFun, is_aggregate_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::openmldb::common::ExternalFun, file_),
  0,
  3,
  ~0u,
  2,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::openmldb::common::KvPair)},
  { 9, 16, sizeof(::openmldb::common::KvList)},
  { 18, 25, sizeof(::openmldb::common::VersionPair)},
  { 27, 34, sizeof(::openmldb::common::DbTableNamePair)},
  { 36, 46, sizeof(::openmldb::common::ColumnDesc)},
  { 51, 59, sizeof(::openmldb::common::TTLSt)},
  { 62, 72, sizeof(::openmldb::common::ColumnKey)},
  { 77, 84, sizeof(::openmldb::common::EndpointAndTid)},
  { 86, 94, sizeof(::openmldb::common::PartitionMeta)},
  { 97, 104, sizeof(::openmldb::common::TablePartition)},
  { 106, 113, sizeof(::openmldb::common::CatalogInfo)},
  { 115, 125, sizeof(::openmldb::common::ExternalFun)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_KvPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_KvList_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_VersionPair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_DbTableNamePair_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_ColumnDesc_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_TTLSt_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_ColumnKey_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_EndpointAndTid_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_PartitionMeta_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_TablePartition_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_CatalogInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::openmldb::common::_ExternalFun_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "common.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 12);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014common.proto\022\017openmldb.common\032\ntype.pr"
      "oto\"%\n\006KvPair\022\014\n\004time\030\001 \001(\003\022\r\n\005value\030\002 \001"
      "(\014\"<\n\006KvList\022\n\n\002pk\030\001 \001(\t\022&\n\005pairs\030\002 \003(\0132"
      "\027.openmldb.common.KvPair\".\n\013VersionPair\022"
      "\n\n\002id\030\001 \001(\005\022\023\n\013field_count\030\002 \001(\005\"6\n\017DbTa"
      "bleNamePair\022\017\n\007db_name\030\001 \002(\t\022\022\n\ntable_na"
      "me\030\002 \002(\t\"\222\001\n\nColumnDesc\022\014\n\004name\030\001 \002(\t\022*\n"
      "\tdata_type\030\002 \001(\0162\027.openmldb.type.DataTyp"
      "e\022\027\n\010not_null\030\003 \001(\010:\005false\022\032\n\013is_constan"
      "t\030\004 \001(\010:\005false\022\025\n\rdefault_value\030\005 \001(\t\"h\n"
      "\005TTLSt\0227\n\010ttl_type\030\001 \001(\0162\026.openmldb.type"
      ".TTLType:\rkAbsoluteTime\022\022\n\007abs_ttl\030\002 \001(\004"
      ":\0010\022\022\n\007lat_ttl\030\003 \001(\004:\0010\"x\n\tColumnKey\022\022\n\n"
      "index_name\030\001 \001(\t\022\020\n\010col_name\030\002 \003(\t\022\017\n\007ts"
      "_name\030\003 \001(\t\022\017\n\004flag\030\004 \001(\r:\0010\022#\n\003ttl\030\005 \001("
      "\0132\026.openmldb.common.TTLSt\"/\n\016EndpointAnd"
      "Tid\022\020\n\010endpoint\030\001 \001(\t\022\013\n\003tid\030\002 \001(\r\"L\n\rPa"
      "rtitionMeta\022\020\n\010endpoint\030\001 \001(\t\022\021\n\tis_lead"
      "er\030\002 \001(\010\022\026\n\010is_alive\030\003 \001(\010:\004true\"U\n\016Tabl"
      "ePartition\022\013\n\003pid\030\001 \001(\r\0226\n\016partition_met"
      "a\030\002 \003(\0132\036.openmldb.common.PartitionMeta\""
      "0\n\013CatalogInfo\022\017\n\007version\030\001 \001(\004\022\020\n\010endpo"
      "int\030\002 \001(\t\"\237\001\n\013ExternalFun\022\014\n\004name\030\001 \001(\t\022"
      ",\n\013return_type\030\002 \001(\0162\027.openmldb.type.Dat"
      "aType\022)\n\010arg_type\030\003 \003(\0162\027.openmldb.type."
      "DataType\022\033\n\014is_aggregate\030\004 \001(\010:\005false\022\014\n"
      "\004file\030\005 \001(\t*<\n\013StorageMode\022\014\n\010kUnknown\020\000"
      "\022\013\n\007kMemory\020\001\022\010\n\004kSSD\020\002\022\010\n\004kHDD\020\003B*\n\035com"
      "._4paradigm.openmldb.protoB\006Common\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1157);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "common.proto", &protobuf_RegisterTypes);
  ::protobuf_type_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_common_2eproto
namespace openmldb {
namespace common {
const ::google::protobuf::EnumDescriptor* StorageMode_descriptor() {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_common_2eproto::file_level_enum_descriptors[0];
}
bool StorageMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void KvPair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvPair::kTimeFieldNumber;
const int KvPair::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvPair::KvPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_KvPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.KvPair)
}
KvPair::KvPair(const KvPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:openmldb.common.KvPair)
}

void KvPair::SharedCtor() {
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = GOOGLE_LONGLONG(0);
}

KvPair::~KvPair() {
  // @@protoc_insertion_point(destructor:openmldb.common.KvPair)
  SharedDtor();
}

void KvPair::SharedDtor() {
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KvPair::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvPair& KvPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_KvPair.base);
  return *internal_default_instance();
}


void KvPair::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.KvPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmptyNoArena();
  }
  time_ = GOOGLE_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KvPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.KvPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_time();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.KvPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.KvPair)
  return false;
#undef DO_
}

void KvPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.KvPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.KvPair)
}

::google::protobuf::uint8* KvPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.KvPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int64 time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional bytes value = 2;
  if (cached_has_bits & 0x00000001u) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.KvPair)
  return target;
}

size_t KvPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.KvPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional bytes value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  const KvPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.KvPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.KvPair)
    MergeFrom(*source);
  }
}

void KvPair::MergeFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.KvPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void KvPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvPair::CopyFrom(const KvPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.KvPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvPair::IsInitialized() const {
  return true;
}

void KvPair::Swap(KvPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvPair::InternalSwap(KvPair* other) {
  using std::swap;
  value_.Swap(&other->value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(time_, other->time_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KvPair::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void KvList::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KvList::kPkFieldNumber;
const int KvList::kPairsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KvList::KvList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_KvList.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.KvList)
}
KvList::KvList(const KvList& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      pairs_(from.pairs_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_pk()) {
    pk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pk_);
  }
  // @@protoc_insertion_point(copy_constructor:openmldb.common.KvList)
}

void KvList::SharedCtor() {
  pk_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

KvList::~KvList() {
  // @@protoc_insertion_point(destructor:openmldb.common.KvList)
  SharedDtor();
}

void KvList::SharedDtor() {
  pk_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void KvList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* KvList::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const KvList& KvList::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_KvList.base);
  return *internal_default_instance();
}


void KvList::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.KvList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  pairs_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    pk_.ClearNonDefaultToEmptyNoArena();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool KvList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.KvList)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string pk = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pk()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->pk().data(), static_cast<int>(this->pk().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.KvList.pk");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openmldb.common.KvPair pairs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_pairs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.KvList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.KvList)
  return false;
#undef DO_
}

void KvList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.KvList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pk = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pk().data(), static_cast<int>(this->pk().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.KvList.pk");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->pk(), output);
  }

  // repeated .openmldb.common.KvPair pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->pairs(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.KvList)
}

::google::protobuf::uint8* KvList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.KvList)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string pk = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->pk().data(), static_cast<int>(this->pk().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.KvList.pk");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->pk(), target);
  }

  // repeated .openmldb.common.KvPair pairs = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->pairs_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->pairs(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.KvList)
  return target;
}

size_t KvList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.KvList)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .openmldb.common.KvPair pairs = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->pairs_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->pairs(static_cast<int>(i)));
    }
  }

  // optional string pk = 1;
  if (has_pk()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->pk());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void KvList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.KvList)
  GOOGLE_DCHECK_NE(&from, this);
  const KvList* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const KvList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.KvList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.KvList)
    MergeFrom(*source);
  }
}

void KvList::MergeFrom(const KvList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.KvList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  pairs_.MergeFrom(from.pairs_);
  if (from.has_pk()) {
    set_has_pk();
    pk_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pk_);
  }
}

void KvList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.KvList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KvList::CopyFrom(const KvList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.KvList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KvList::IsInitialized() const {
  return true;
}

void KvList::Swap(KvList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KvList::InternalSwap(KvList* other) {
  using std::swap;
  CastToBase(&pairs_)->InternalSwap(CastToBase(&other->pairs_));
  pk_.Swap(&other->pk_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata KvList::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void VersionPair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VersionPair::kIdFieldNumber;
const int VersionPair::kFieldCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VersionPair::VersionPair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_VersionPair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.VersionPair)
}
VersionPair::VersionPair(const VersionPair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&field_count_) -
    reinterpret_cast<char*>(&id_)) + sizeof(field_count_));
  // @@protoc_insertion_point(copy_constructor:openmldb.common.VersionPair)
}

void VersionPair::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&field_count_) -
      reinterpret_cast<char*>(&id_)) + sizeof(field_count_));
}

VersionPair::~VersionPair() {
  // @@protoc_insertion_point(destructor:openmldb.common.VersionPair)
  SharedDtor();
}

void VersionPair::SharedDtor() {
}

void VersionPair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* VersionPair::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const VersionPair& VersionPair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_VersionPair.base);
  return *internal_default_instance();
}


void VersionPair::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.VersionPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&field_count_) -
        reinterpret_cast<char*>(&id_)) + sizeof(field_count_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool VersionPair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.VersionPair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 field_count = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_field_count();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &field_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.VersionPair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.VersionPair)
  return false;
#undef DO_
}

void VersionPair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.VersionPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 field_count = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->field_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.VersionPair)
}

::google::protobuf::uint8* VersionPair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.VersionPair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 field_count = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->field_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.VersionPair)
  return target;
}

size_t VersionPair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.VersionPair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 field_count = 2;
    if (has_field_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->field_count());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VersionPair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.VersionPair)
  GOOGLE_DCHECK_NE(&from, this);
  const VersionPair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VersionPair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.VersionPair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.VersionPair)
    MergeFrom(*source);
  }
}

void VersionPair::MergeFrom(const VersionPair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.VersionPair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      field_count_ = from.field_count_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VersionPair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.VersionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VersionPair::CopyFrom(const VersionPair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.VersionPair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VersionPair::IsInitialized() const {
  return true;
}

void VersionPair::Swap(VersionPair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VersionPair::InternalSwap(VersionPair* other) {
  using std::swap;
  swap(id_, other->id_);
  swap(field_count_, other->field_count_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata VersionPair::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void DbTableNamePair::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DbTableNamePair::kDbNameFieldNumber;
const int DbTableNamePair::kTableNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DbTableNamePair::DbTableNamePair()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_DbTableNamePair.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.DbTableNamePair)
}
DbTableNamePair::DbTableNamePair(const DbTableNamePair& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_db_name()) {
    db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
  }
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_table_name()) {
    table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
  }
  // @@protoc_insertion_point(copy_constructor:openmldb.common.DbTableNamePair)
}

void DbTableNamePair::SharedCtor() {
  db_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

DbTableNamePair::~DbTableNamePair() {
  // @@protoc_insertion_point(destructor:openmldb.common.DbTableNamePair)
  SharedDtor();
}

void DbTableNamePair::SharedDtor() {
  db_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DbTableNamePair::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* DbTableNamePair::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const DbTableNamePair& DbTableNamePair::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_DbTableNamePair.base);
  return *internal_default_instance();
}


void DbTableNamePair::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.DbTableNamePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      db_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      table_name_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DbTableNamePair::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.DbTableNamePair)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string db_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->db_name().data(), static_cast<int>(this->db_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.DbTableNamePair.db_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string table_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_table_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->table_name().data(), static_cast<int>(this->table_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.DbTableNamePair.table_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.DbTableNamePair)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.DbTableNamePair)
  return false;
#undef DO_
}

void DbTableNamePair::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.DbTableNamePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string db_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.DbTableNamePair.db_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->db_name(), output);
  }

  // required string table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.DbTableNamePair.table_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->table_name(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.DbTableNamePair)
}

::google::protobuf::uint8* DbTableNamePair::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.DbTableNamePair)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string db_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->db_name().data(), static_cast<int>(this->db_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.DbTableNamePair.db_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->db_name(), target);
  }

  // required string table_name = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->table_name().data(), static_cast<int>(this->table_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.DbTableNamePair.table_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->table_name(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.DbTableNamePair)
  return target;
}

size_t DbTableNamePair::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:openmldb.common.DbTableNamePair)
  size_t total_size = 0;

  if (has_db_name()) {
    // required string db_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());
  }

  if (has_table_name()) {
    // required string table_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());
  }

  return total_size;
}
size_t DbTableNamePair::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.DbTableNamePair)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string db_name = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->db_name());

    // required string table_name = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->table_name());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbTableNamePair::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.DbTableNamePair)
  GOOGLE_DCHECK_NE(&from, this);
  const DbTableNamePair* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const DbTableNamePair>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.DbTableNamePair)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.DbTableNamePair)
    MergeFrom(*source);
  }
}

void DbTableNamePair::MergeFrom(const DbTableNamePair& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.DbTableNamePair)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_db_name();
      db_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.db_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_table_name();
      table_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_name_);
    }
  }
}

void DbTableNamePair::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.DbTableNamePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbTableNamePair::CopyFrom(const DbTableNamePair& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.DbTableNamePair)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbTableNamePair::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void DbTableNamePair::Swap(DbTableNamePair* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DbTableNamePair::InternalSwap(DbTableNamePair* other) {
  using std::swap;
  db_name_.Swap(&other->db_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  table_name_.Swap(&other->table_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata DbTableNamePair::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnDesc::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnDesc::kNameFieldNumber;
const int ColumnDesc::kDataTypeFieldNumber;
const int ColumnDesc::kNotNullFieldNumber;
const int ColumnDesc::kIsConstantFieldNumber;
const int ColumnDesc::kDefaultValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnDesc::ColumnDesc()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_ColumnDesc.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.ColumnDesc)
}
ColumnDesc::ColumnDesc(const ColumnDesc& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  default_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_default_value()) {
    default_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_value_);
  }
  ::memcpy(&not_null_, &from.not_null_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_type_) -
    reinterpret_cast<char*>(&not_null_)) + sizeof(data_type_));
  // @@protoc_insertion_point(copy_constructor:openmldb.common.ColumnDesc)
}

void ColumnDesc::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&not_null_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_constant_) -
      reinterpret_cast<char*>(&not_null_)) + sizeof(is_constant_));
  data_type_ = 1;
}

ColumnDesc::~ColumnDesc() {
  // @@protoc_insertion_point(destructor:openmldb.common.ColumnDesc)
  SharedDtor();
}

void ColumnDesc::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  default_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnDesc::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnDesc::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnDesc& ColumnDesc::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_ColumnDesc.base);
  return *internal_default_instance();
}


void ColumnDesc::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.ColumnDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      default_value_.ClearNonDefaultToEmptyNoArena();
    }
  }
  ::memset(&not_null_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_constant_) -
      reinterpret_cast<char*>(&not_null_)) + sizeof(is_constant_));
  data_type_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnDesc::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.ColumnDesc)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.ColumnDesc.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .openmldb.type.DataType data_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openmldb::type::DataType_IsValid(value)) {
            set_data_type(static_cast< ::openmldb::type::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool not_null = 3 [default = false];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_not_null();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &not_null_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_constant = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_constant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string default_value = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_default_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->default_value().data(), static_cast<int>(this->default_value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.ColumnDesc.default_value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.ColumnDesc)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.ColumnDesc)
  return false;
#undef DO_
}

void ColumnDesc::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.ColumnDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnDesc.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .openmldb.type.DataType data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // optional bool not_null = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->not_null(), output);
  }

  // optional bool is_constant = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_constant(), output);
  }

  // optional string default_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_value().data(), static_cast<int>(this->default_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnDesc.default_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->default_value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.ColumnDesc)
}

::google::protobuf::uint8* ColumnDesc::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.ColumnDesc)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnDesc.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .openmldb.type.DataType data_type = 2;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // optional bool not_null = 3 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->not_null(), target);
  }

  // optional bool is_constant = 4 [default = false];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_constant(), target);
  }

  // optional string default_value = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->default_value().data(), static_cast<int>(this->default_value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnDesc.default_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->default_value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.ColumnDesc)
  return target;
}

size_t ColumnDesc::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.ColumnDesc)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required string name = 1;
  if (has_name()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }
  if (_has_bits_[0 / 32] & 30u) {
    // optional string default_value = 5;
    if (has_default_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->default_value());
    }

    // optional bool not_null = 3 [default = false];
    if (has_not_null()) {
      total_size += 1 + 1;
    }

    // optional bool is_constant = 4 [default = false];
    if (has_is_constant()) {
      total_size += 1 + 1;
    }

    // optional .openmldb.type.DataType data_type = 2;
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnDesc::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.ColumnDesc)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnDesc* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnDesc>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.ColumnDesc)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.ColumnDesc)
    MergeFrom(*source);
  }
}

void ColumnDesc::MergeFrom(const ColumnDesc& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.ColumnDesc)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_default_value();
      default_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.default_value_);
    }
    if (cached_has_bits & 0x00000004u) {
      not_null_ = from.not_null_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_constant_ = from.is_constant_;
    }
    if (cached_has_bits & 0x00000010u) {
      data_type_ = from.data_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnDesc::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.ColumnDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnDesc::CopyFrom(const ColumnDesc& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.ColumnDesc)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnDesc::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void ColumnDesc::Swap(ColumnDesc* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnDesc::InternalSwap(ColumnDesc* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  default_value_.Swap(&other->default_value_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(not_null_, other->not_null_);
  swap(is_constant_, other->is_constant_);
  swap(data_type_, other->data_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnDesc::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TTLSt::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TTLSt::kTtlTypeFieldNumber;
const int TTLSt::kAbsTtlFieldNumber;
const int TTLSt::kLatTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TTLSt::TTLSt()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_TTLSt.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.TTLSt)
}
TTLSt::TTLSt(const TTLSt& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&abs_ttl_, &from.abs_ttl_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_type_) -
    reinterpret_cast<char*>(&abs_ttl_)) + sizeof(ttl_type_));
  // @@protoc_insertion_point(copy_constructor:openmldb.common.TTLSt)
}

void TTLSt::SharedCtor() {
  ::memset(&abs_ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_ttl_) -
      reinterpret_cast<char*>(&abs_ttl_)) + sizeof(lat_ttl_));
  ttl_type_ = 1;
}

TTLSt::~TTLSt() {
  // @@protoc_insertion_point(destructor:openmldb.common.TTLSt)
  SharedDtor();
}

void TTLSt::SharedDtor() {
}

void TTLSt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TTLSt::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TTLSt& TTLSt::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_TTLSt.base);
  return *internal_default_instance();
}


void TTLSt::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.TTLSt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    ::memset(&abs_ttl_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lat_ttl_) -
        reinterpret_cast<char*>(&abs_ttl_)) + sizeof(lat_ttl_));
    ttl_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TTLSt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.TTLSt)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .openmldb.type.TTLType ttl_type = 1 [default = kAbsoluteTime];
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openmldb::type::TTLType_IsValid(value)) {
            set_ttl_type(static_cast< ::openmldb::type::TTLType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                1, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 abs_ttl = 2 [default = 0];
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_abs_ttl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &abs_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 lat_ttl = 3 [default = 0];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_lat_ttl();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lat_ttl_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.TTLSt)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.TTLSt)
  return false;
#undef DO_
}

void TTLSt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.TTLSt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .openmldb.type.TTLType ttl_type = 1 [default = kAbsoluteTime];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->ttl_type(), output);
  }

  // optional uint64 abs_ttl = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->abs_ttl(), output);
  }

  // optional uint64 lat_ttl = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->lat_ttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.TTLSt)
}

::google::protobuf::uint8* TTLSt::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.TTLSt)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .openmldb.type.TTLType ttl_type = 1 [default = kAbsoluteTime];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->ttl_type(), target);
  }

  // optional uint64 abs_ttl = 2 [default = 0];
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->abs_ttl(), target);
  }

  // optional uint64 lat_ttl = 3 [default = 0];
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->lat_ttl(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.TTLSt)
  return target;
}

size_t TTLSt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.TTLSt)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional uint64 abs_ttl = 2 [default = 0];
    if (has_abs_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->abs_ttl());
    }

    // optional uint64 lat_ttl = 3 [default = 0];
    if (has_lat_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lat_ttl());
    }

    // optional .openmldb.type.TTLType ttl_type = 1 [default = kAbsoluteTime];
    if (has_ttl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ttl_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TTLSt::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.TTLSt)
  GOOGLE_DCHECK_NE(&from, this);
  const TTLSt* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TTLSt>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.TTLSt)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.TTLSt)
    MergeFrom(*source);
  }
}

void TTLSt::MergeFrom(const TTLSt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.TTLSt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      abs_ttl_ = from.abs_ttl_;
    }
    if (cached_has_bits & 0x00000002u) {
      lat_ttl_ = from.lat_ttl_;
    }
    if (cached_has_bits & 0x00000004u) {
      ttl_type_ = from.ttl_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TTLSt::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.TTLSt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TTLSt::CopyFrom(const TTLSt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.TTLSt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TTLSt::IsInitialized() const {
  return true;
}

void TTLSt::Swap(TTLSt* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TTLSt::InternalSwap(TTLSt* other) {
  using std::swap;
  swap(abs_ttl_, other->abs_ttl_);
  swap(lat_ttl_, other->lat_ttl_);
  swap(ttl_type_, other->ttl_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TTLSt::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ColumnKey::InitAsDefaultInstance() {
  ::openmldb::common::_ColumnKey_default_instance_._instance.get_mutable()->ttl_ = const_cast< ::openmldb::common::TTLSt*>(
      ::openmldb::common::TTLSt::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnKey::kIndexNameFieldNumber;
const int ColumnKey::kColNameFieldNumber;
const int ColumnKey::kTsNameFieldNumber;
const int ColumnKey::kFlagFieldNumber;
const int ColumnKey::kTtlFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnKey::ColumnKey()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_ColumnKey.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.ColumnKey)
}
ColumnKey::ColumnKey(const ColumnKey& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      col_name_(from.col_name_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  index_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_index_name()) {
    index_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_name_);
  }
  ts_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_ts_name()) {
    ts_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ts_name_);
  }
  if (from.has_ttl()) {
    ttl_ = new ::openmldb::common::TTLSt(*from.ttl_);
  } else {
    ttl_ = NULL;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:openmldb.common.ColumnKey)
}

void ColumnKey::SharedCtor() {
  index_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ttl_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&ttl_)) + sizeof(flag_));
}

ColumnKey::~ColumnKey() {
  // @@protoc_insertion_point(destructor:openmldb.common.ColumnKey)
  SharedDtor();
}

void ColumnKey::SharedDtor() {
  index_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete ttl_;
}

void ColumnKey::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnKey::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnKey& ColumnKey::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_ColumnKey.base);
  return *internal_default_instance();
}


void ColumnKey::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.ColumnKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  col_name_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      index_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      ts_name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(ttl_ != NULL);
      ttl_->Clear();
    }
  }
  flag_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.ColumnKey)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string index_name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_index_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->index_name().data(), static_cast<int>(this->index_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.ColumnKey.index_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string col_name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_col_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->col_name(this->col_name_size() - 1).data(),
            static_cast<int>(this->col_name(this->col_name_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.ColumnKey.col_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string ts_name = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ts_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ts_name().data(), static_cast<int>(this->ts_name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.ColumnKey.ts_name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 flag = 4 [default = 0];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_flag();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .openmldb.common.TTLSt ttl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_ttl()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.ColumnKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.ColumnKey)
  return false;
#undef DO_
}

void ColumnKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.ColumnKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string index_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnKey.index_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->index_name(), output);
  }

  // repeated string col_name = 2;
  for (int i = 0, n = this->col_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name(i).data(), static_cast<int>(this->col_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnKey.col_name");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->col_name(i), output);
  }

  // optional string ts_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ts_name().data(), static_cast<int>(this->ts_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnKey.ts_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ts_name(), output);
  }

  // optional uint32 flag = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->flag(), output);
  }

  // optional .openmldb.common.TTLSt ttl = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_ttl(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.ColumnKey)
}

::google::protobuf::uint8* ColumnKey::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.ColumnKey)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string index_name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->index_name().data(), static_cast<int>(this->index_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnKey.index_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->index_name(), target);
  }

  // repeated string col_name = 2;
  for (int i = 0, n = this->col_name_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->col_name(i).data(), static_cast<int>(this->col_name(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnKey.col_name");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->col_name(i), target);
  }

  // optional string ts_name = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ts_name().data(), static_cast<int>(this->ts_name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ColumnKey.ts_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ts_name(), target);
  }

  // optional uint32 flag = 4 [default = 0];
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->flag(), target);
  }

  // optional .openmldb.common.TTLSt ttl = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_ttl(), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.ColumnKey)
  return target;
}

size_t ColumnKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.ColumnKey)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string col_name = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->col_name_size());
  for (int i = 0, n = this->col_name_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->col_name(i));
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string index_name = 1;
    if (has_index_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->index_name());
    }

    // optional string ts_name = 3;
    if (has_ts_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ts_name());
    }

    // optional .openmldb.common.TTLSt ttl = 5;
    if (has_ttl()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *ttl_);
    }

    // optional uint32 flag = 4 [default = 0];
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnKey::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.ColumnKey)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnKey* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnKey>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.ColumnKey)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.ColumnKey)
    MergeFrom(*source);
  }
}

void ColumnKey::MergeFrom(const ColumnKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.ColumnKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  col_name_.MergeFrom(from.col_name_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_index_name();
      index_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.index_name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_ts_name();
      ts_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ts_name_);
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_ttl()->::openmldb::common::TTLSt::MergeFrom(from.ttl());
    }
    if (cached_has_bits & 0x00000008u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnKey::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.ColumnKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnKey::CopyFrom(const ColumnKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.ColumnKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnKey::IsInitialized() const {
  return true;
}

void ColumnKey::Swap(ColumnKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnKey::InternalSwap(ColumnKey* other) {
  using std::swap;
  col_name_.InternalSwap(CastToBase(&other->col_name_));
  index_name_.Swap(&other->index_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  ts_name_.Swap(&other->ts_name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ttl_, other->ttl_);
  swap(flag_, other->flag_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnKey::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EndpointAndTid::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EndpointAndTid::kEndpointFieldNumber;
const int EndpointAndTid::kTidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EndpointAndTid::EndpointAndTid()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_EndpointAndTid.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.EndpointAndTid)
}
EndpointAndTid::EndpointAndTid(const EndpointAndTid& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_endpoint()) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  tid_ = from.tid_;
  // @@protoc_insertion_point(copy_constructor:openmldb.common.EndpointAndTid)
}

void EndpointAndTid::SharedCtor() {
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tid_ = 0u;
}

EndpointAndTid::~EndpointAndTid() {
  // @@protoc_insertion_point(destructor:openmldb.common.EndpointAndTid)
  SharedDtor();
}

void EndpointAndTid::SharedDtor() {
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EndpointAndTid::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EndpointAndTid::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EndpointAndTid& EndpointAndTid::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_EndpointAndTid.base);
  return *internal_default_instance();
}


void EndpointAndTid::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.EndpointAndTid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    endpoint_.ClearNonDefaultToEmptyNoArena();
  }
  tid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool EndpointAndTid::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.EndpointAndTid)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string endpoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.EndpointAndTid.endpoint");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 tid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_tid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.EndpointAndTid)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.EndpointAndTid)
  return false;
#undef DO_
}

void EndpointAndTid::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.EndpointAndTid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.EndpointAndTid.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->endpoint(), output);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.EndpointAndTid)
}

::google::protobuf::uint8* EndpointAndTid::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.EndpointAndTid)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.EndpointAndTid.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->endpoint(), target);
  }

  // optional uint32 tid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.EndpointAndTid)
  return target;
}

size_t EndpointAndTid::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.EndpointAndTid)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // optional uint32 tid = 2;
    if (has_tid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tid());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EndpointAndTid::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.EndpointAndTid)
  GOOGLE_DCHECK_NE(&from, this);
  const EndpointAndTid* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EndpointAndTid>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.EndpointAndTid)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.EndpointAndTid)
    MergeFrom(*source);
  }
}

void EndpointAndTid::MergeFrom(const EndpointAndTid& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.EndpointAndTid)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_endpoint();
      endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
    }
    if (cached_has_bits & 0x00000002u) {
      tid_ = from.tid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void EndpointAndTid::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.EndpointAndTid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EndpointAndTid::CopyFrom(const EndpointAndTid& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.EndpointAndTid)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EndpointAndTid::IsInitialized() const {
  return true;
}

void EndpointAndTid::Swap(EndpointAndTid* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EndpointAndTid::InternalSwap(EndpointAndTid* other) {
  using std::swap;
  endpoint_.Swap(&other->endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(tid_, other->tid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EndpointAndTid::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void PartitionMeta::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PartitionMeta::kEndpointFieldNumber;
const int PartitionMeta::kIsLeaderFieldNumber;
const int PartitionMeta::kIsAliveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PartitionMeta::PartitionMeta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_PartitionMeta.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.PartitionMeta)
}
PartitionMeta::PartitionMeta(const PartitionMeta& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_endpoint()) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  ::memcpy(&is_leader_, &from.is_leader_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_alive_) -
    reinterpret_cast<char*>(&is_leader_)) + sizeof(is_alive_));
  // @@protoc_insertion_point(copy_constructor:openmldb.common.PartitionMeta)
}

void PartitionMeta::SharedCtor() {
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_leader_ = false;
  is_alive_ = true;
}

PartitionMeta::~PartitionMeta() {
  // @@protoc_insertion_point(destructor:openmldb.common.PartitionMeta)
  SharedDtor();
}

void PartitionMeta::SharedDtor() {
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PartitionMeta::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* PartitionMeta::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PartitionMeta& PartitionMeta::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_PartitionMeta.base);
  return *internal_default_instance();
}


void PartitionMeta::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.PartitionMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    endpoint_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    is_leader_ = false;
    is_alive_ = true;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool PartitionMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.PartitionMeta)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string endpoint = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.PartitionMeta.endpoint");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_leader = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_is_leader();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_leader_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_alive = 3 [default = true];
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_is_alive();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_alive_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.PartitionMeta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.PartitionMeta)
  return false;
#undef DO_
}

void PartitionMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.PartitionMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.PartitionMeta.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->endpoint(), output);
  }

  // optional bool is_leader = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->is_leader(), output);
  }

  // optional bool is_alive = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->is_alive(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.PartitionMeta)
}

::google::protobuf::uint8* PartitionMeta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.PartitionMeta)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string endpoint = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.PartitionMeta.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->endpoint(), target);
  }

  // optional bool is_leader = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->is_leader(), target);
  }

  // optional bool is_alive = 3 [default = true];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->is_alive(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.PartitionMeta)
  return target;
}

size_t PartitionMeta::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.PartitionMeta)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string endpoint = 1;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // optional bool is_leader = 2;
    if (has_is_leader()) {
      total_size += 1 + 1;
    }

    // optional bool is_alive = 3 [default = true];
    if (has_is_alive()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PartitionMeta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.PartitionMeta)
  GOOGLE_DCHECK_NE(&from, this);
  const PartitionMeta* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PartitionMeta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.PartitionMeta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.PartitionMeta)
    MergeFrom(*source);
  }
}

void PartitionMeta::MergeFrom(const PartitionMeta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.PartitionMeta)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_endpoint();
      endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
    }
    if (cached_has_bits & 0x00000002u) {
      is_leader_ = from.is_leader_;
    }
    if (cached_has_bits & 0x00000004u) {
      is_alive_ = from.is_alive_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PartitionMeta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.PartitionMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PartitionMeta::CopyFrom(const PartitionMeta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.PartitionMeta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PartitionMeta::IsInitialized() const {
  return true;
}

void PartitionMeta::Swap(PartitionMeta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PartitionMeta::InternalSwap(PartitionMeta* other) {
  using std::swap;
  endpoint_.Swap(&other->endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_leader_, other->is_leader_);
  swap(is_alive_, other->is_alive_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata PartitionMeta::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TablePartition::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TablePartition::kPidFieldNumber;
const int TablePartition::kPartitionMetaFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TablePartition::TablePartition()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_TablePartition.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.TablePartition)
}
TablePartition::TablePartition(const TablePartition& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      partition_meta_(from.partition_meta_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pid_ = from.pid_;
  // @@protoc_insertion_point(copy_constructor:openmldb.common.TablePartition)
}

void TablePartition::SharedCtor() {
  pid_ = 0u;
}

TablePartition::~TablePartition() {
  // @@protoc_insertion_point(destructor:openmldb.common.TablePartition)
  SharedDtor();
}

void TablePartition::SharedDtor() {
}

void TablePartition::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TablePartition::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TablePartition& TablePartition::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_TablePartition.base);
  return *internal_default_instance();
}


void TablePartition::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.TablePartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  partition_meta_.Clear();
  pid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TablePartition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.TablePartition)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 pid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_pid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &pid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openmldb.common.PartitionMeta partition_meta = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_partition_meta()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.TablePartition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.TablePartition)
  return false;
#undef DO_
}

void TablePartition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.TablePartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->pid(), output);
  }

  // repeated .openmldb.common.PartitionMeta partition_meta = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_meta_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2,
      this->partition_meta(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.TablePartition)
}

::google::protobuf::uint8* TablePartition::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.TablePartition)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint32 pid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->pid(), target);
  }

  // repeated .openmldb.common.PartitionMeta partition_meta = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->partition_meta_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->partition_meta(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.TablePartition)
  return target;
}

size_t TablePartition::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.TablePartition)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .openmldb.common.PartitionMeta partition_meta = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->partition_meta_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->partition_meta(static_cast<int>(i)));
    }
  }

  // optional uint32 pid = 1;
  if (has_pid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->pid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TablePartition::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.TablePartition)
  GOOGLE_DCHECK_NE(&from, this);
  const TablePartition* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TablePartition>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.TablePartition)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.TablePartition)
    MergeFrom(*source);
  }
}

void TablePartition::MergeFrom(const TablePartition& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.TablePartition)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  partition_meta_.MergeFrom(from.partition_meta_);
  if (from.has_pid()) {
    set_pid(from.pid());
  }
}

void TablePartition::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.TablePartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TablePartition::CopyFrom(const TablePartition& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.TablePartition)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TablePartition::IsInitialized() const {
  return true;
}

void TablePartition::Swap(TablePartition* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TablePartition::InternalSwap(TablePartition* other) {
  using std::swap;
  CastToBase(&partition_meta_)->InternalSwap(CastToBase(&other->partition_meta_));
  swap(pid_, other->pid_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TablePartition::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CatalogInfo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CatalogInfo::kVersionFieldNumber;
const int CatalogInfo::kEndpointFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CatalogInfo::CatalogInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_CatalogInfo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.CatalogInfo)
}
CatalogInfo::CatalogInfo(const CatalogInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_endpoint()) {
    endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
  }
  version_ = from.version_;
  // @@protoc_insertion_point(copy_constructor:openmldb.common.CatalogInfo)
}

void CatalogInfo::SharedCtor() {
  endpoint_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = GOOGLE_ULONGLONG(0);
}

CatalogInfo::~CatalogInfo() {
  // @@protoc_insertion_point(destructor:openmldb.common.CatalogInfo)
  SharedDtor();
}

void CatalogInfo::SharedDtor() {
  endpoint_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CatalogInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CatalogInfo::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CatalogInfo& CatalogInfo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_CatalogInfo.base);
  return *internal_default_instance();
}


void CatalogInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.CatalogInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    endpoint_.ClearNonDefaultToEmptyNoArena();
  }
  version_ = GOOGLE_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CatalogInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.CatalogInfo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint64 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string endpoint = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_endpoint()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->endpoint().data(), static_cast<int>(this->endpoint().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.CatalogInfo.endpoint");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.CatalogInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.CatalogInfo)
  return false;
#undef DO_
}

void CatalogInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.CatalogInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->version(), output);
  }

  // optional string endpoint = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.CatalogInfo.endpoint");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->endpoint(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.CatalogInfo)
}

::google::protobuf::uint8* CatalogInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.CatalogInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional uint64 version = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->version(), target);
  }

  // optional string endpoint = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->endpoint().data(), static_cast<int>(this->endpoint().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.CatalogInfo.endpoint");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->endpoint(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.CatalogInfo)
  return target;
}

size_t CatalogInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.CatalogInfo)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string endpoint = 2;
    if (has_endpoint()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->endpoint());
    }

    // optional uint64 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->version());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CatalogInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.CatalogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const CatalogInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CatalogInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.CatalogInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.CatalogInfo)
    MergeFrom(*source);
  }
}

void CatalogInfo::MergeFrom(const CatalogInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.CatalogInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_endpoint();
      endpoint_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.endpoint_);
    }
    if (cached_has_bits & 0x00000002u) {
      version_ = from.version_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CatalogInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.CatalogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CatalogInfo::CopyFrom(const CatalogInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.CatalogInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CatalogInfo::IsInitialized() const {
  return true;
}

void CatalogInfo::Swap(CatalogInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CatalogInfo::InternalSwap(CatalogInfo* other) {
  using std::swap;
  endpoint_.Swap(&other->endpoint_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(version_, other->version_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CatalogInfo::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void ExternalFun::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ExternalFun::kNameFieldNumber;
const int ExternalFun::kReturnTypeFieldNumber;
const int ExternalFun::kArgTypeFieldNumber;
const int ExternalFun::kIsAggregateFieldNumber;
const int ExternalFun::kFileFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ExternalFun::ExternalFun()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_common_2eproto::scc_info_ExternalFun.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:openmldb.common.ExternalFun)
}
ExternalFun::ExternalFun(const ExternalFun& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      arg_type_(from.arg_type_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_file()) {
    file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
  }
  ::memcpy(&is_aggregate_, &from.is_aggregate_,
    static_cast<size_t>(reinterpret_cast<char*>(&return_type_) -
    reinterpret_cast<char*>(&is_aggregate_)) + sizeof(return_type_));
  // @@protoc_insertion_point(copy_constructor:openmldb.common.ExternalFun)
}

void ExternalFun::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  is_aggregate_ = false;
  return_type_ = 1;
}

ExternalFun::~ExternalFun() {
  // @@protoc_insertion_point(destructor:openmldb.common.ExternalFun)
  SharedDtor();
}

void ExternalFun::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ExternalFun::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ExternalFun::descriptor() {
  ::protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ExternalFun& ExternalFun::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_common_2eproto::scc_info_ExternalFun.base);
  return *internal_default_instance();
}


void ExternalFun::Clear() {
// @@protoc_insertion_point(message_clear_start:openmldb.common.ExternalFun)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  arg_type_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      file_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    is_aggregate_ = false;
    return_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ExternalFun::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:openmldb.common.ExternalFun)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.ExternalFun.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .openmldb.type.DataType return_type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openmldb::type::DataType_IsValid(value)) {
            set_return_type(static_cast< ::openmldb::type::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .openmldb.type.DataType arg_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::openmldb::type::DataType_IsValid(value)) {
            add_arg_type(static_cast< ::openmldb::type::DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                3, static_cast< ::google::protobuf::uint64>(value));
          }
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormat::ReadPackedEnumPreserveUnknowns(
                 input,
                 3,
                 ::openmldb::type::DataType_IsValid,
                 mutable_unknown_fields(),
                 this->mutable_arg_type())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_aggregate = 4 [default = false];
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_aggregate();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_aggregate_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string file = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->file().data(), static_cast<int>(this->file().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "openmldb.common.ExternalFun.file");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:openmldb.common.ExternalFun)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:openmldb.common.ExternalFun)
  return false;
#undef DO_
}

void ExternalFun::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:openmldb.common.ExternalFun)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ExternalFun.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .openmldb.type.DataType return_type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->return_type(), output);
  }

  // repeated .openmldb.type.DataType arg_type = 3;
  for (int i = 0, n = this->arg_type_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->arg_type(i), output);
  }

  // optional bool is_aggregate = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_aggregate(), output);
  }

  // optional string file = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ExternalFun.file");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->file(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:openmldb.common.ExternalFun)
}

::google::protobuf::uint8* ExternalFun::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:openmldb.common.ExternalFun)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ExternalFun.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .openmldb.type.DataType return_type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->return_type(), target);
  }

  // repeated .openmldb.type.DataType arg_type = 3;
  target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
    3, this->arg_type_, target);

  // optional bool is_aggregate = 4 [default = false];
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_aggregate(), target);
  }

  // optional string file = 5;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->file().data(), static_cast<int>(this->file().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "openmldb.common.ExternalFun.file");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->file(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:openmldb.common.ExternalFun)
  return target;
}

size_t ExternalFun::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:openmldb.common.ExternalFun)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .openmldb.type.DataType arg_type = 3;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->arg_type_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->arg_type(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string file = 5;
    if (has_file()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->file());
    }

    // optional bool is_aggregate = 4 [default = false];
    if (has_is_aggregate()) {
      total_size += 1 + 1;
    }

    // optional .openmldb.type.DataType return_type = 2;
    if (has_return_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->return_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ExternalFun::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:openmldb.common.ExternalFun)
  GOOGLE_DCHECK_NE(&from, this);
  const ExternalFun* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ExternalFun>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:openmldb.common.ExternalFun)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:openmldb.common.ExternalFun)
    MergeFrom(*source);
  }
}

void ExternalFun::MergeFrom(const ExternalFun& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:openmldb.common.ExternalFun)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  arg_type_.MergeFrom(from.arg_type_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_file();
      file_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_);
    }
    if (cached_has_bits & 0x00000004u) {
      is_aggregate_ = from.is_aggregate_;
    }
    if (cached_has_bits & 0x00000008u) {
      return_type_ = from.return_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ExternalFun::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:openmldb.common.ExternalFun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExternalFun::CopyFrom(const ExternalFun& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:openmldb.common.ExternalFun)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExternalFun::IsInitialized() const {
  return true;
}

void ExternalFun::Swap(ExternalFun* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ExternalFun::InternalSwap(ExternalFun* other) {
  using std::swap;
  arg_type_.InternalSwap(&other->arg_type_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  file_.Swap(&other->file_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_aggregate_, other->is_aggregate_);
  swap(return_type_, other->return_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ExternalFun::GetMetadata() const {
  protobuf_common_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_common_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace common
}  // namespace openmldb
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::KvPair* Arena::CreateMaybeMessage< ::openmldb::common::KvPair >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::KvPair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::KvList* Arena::CreateMaybeMessage< ::openmldb::common::KvList >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::KvList >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::VersionPair* Arena::CreateMaybeMessage< ::openmldb::common::VersionPair >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::VersionPair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::DbTableNamePair* Arena::CreateMaybeMessage< ::openmldb::common::DbTableNamePair >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::DbTableNamePair >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::ColumnDesc* Arena::CreateMaybeMessage< ::openmldb::common::ColumnDesc >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::ColumnDesc >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::TTLSt* Arena::CreateMaybeMessage< ::openmldb::common::TTLSt >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::TTLSt >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::ColumnKey* Arena::CreateMaybeMessage< ::openmldb::common::ColumnKey >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::ColumnKey >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::EndpointAndTid* Arena::CreateMaybeMessage< ::openmldb::common::EndpointAndTid >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::EndpointAndTid >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::PartitionMeta* Arena::CreateMaybeMessage< ::openmldb::common::PartitionMeta >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::PartitionMeta >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::TablePartition* Arena::CreateMaybeMessage< ::openmldb::common::TablePartition >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::TablePartition >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::CatalogInfo* Arena::CreateMaybeMessage< ::openmldb::common::CatalogInfo >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::CatalogInfo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::openmldb::common::ExternalFun* Arena::CreateMaybeMessage< ::openmldb::common::ExternalFun >(Arena* arena) {
  return Arena::CreateInternal< ::openmldb::common::ExternalFun >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
