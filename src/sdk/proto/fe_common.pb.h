// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fe_common.proto

#ifndef PROTOBUF_INCLUDED_fe_5fcommon_2eproto
#define PROTOBUF_INCLUDED_fe_5fcommon_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5fcommon_2eproto 

namespace protobuf_fe_5fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_fe_5fcommon_2eproto
namespace hybridse {
namespace common {
class Status;
class StatusDefaultTypeInternal;
extern StatusDefaultTypeInternal _Status_default_instance_;
}  // namespace common
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> ::hybridse::common::Status* Arena::CreateMaybeMessage<::hybridse::common::Status>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hybridse {
namespace common {

enum StatusCode {
  kOk = 0,
  kRunning = 1,
  kRunError = 2,
  kTypeError = 3,
  kNullPointer = 10,
  kNullInputPointer = 11,
  kNullOutputPointer = 12,
  kUnSupport = 100,
  kUnsupportSql = 101,
  kUnsupportPlan = 102,
  kUnsupportPerformanceSensitive = 103,
  kUnsupportDistribution = 104,
  kUnSupportCommand = 105,
  kPlanError = 1000,
  kSyntaxError = 1001,
  kSqlAstError = 1002,
  kLogicalPlanError = 1003,
  kPhysicalPlanError = 1004,
  kExecutionPlanError = 1005,
  kEngineModeError = 1006,
  kEngineCacheError = 1007,
  kCommonIndexError = 1008,
  kCodegenError = 1100,
  kCodegenLoadValueError = 1101,
  kCodegenStoreValueError = 1102,
  kCodegenExpressionError = 1103,
  kCodegenCallFunctionError = 1104,
  kCodegenUdfError = 1105,
  kCodegenUdafError = 1106,
  kCodegenGetFieldError = 1107,
  kCodegenEncodeError = 1108,
  kCodegenDecodeError = 1109,
  kExternalUDFError = 1110,
  kCatalogError = 1200,
  kNoDatabase = 1201,
  kTableNotFound = 1202,
  kProcedureNotFound = 1203,
  kColumnNotFound = 1204,
  kIndexNotFound = 1205,
  kDatabaseExists = 1206,
  kTableExists = 1207,
  kColumnExists = 1208,
  kColumnAmbiguous = 1209,
  kCodecError = 1300,
  kSchemaCodecError = 1301,
  kRuntimeError = 1400,
  kJitError = 1401,
  kCoreAPIRuntimeError = 1402,
  kRunSessionError = 1403,
  kRpcError = 1500,
  kConnError = 1501,
  kRequestError = 1502,
  kResponseError = 1503,
  kTimeoutError = 1504,
  kCallRpcMethodError = 1505,
  kStorageError = 1600,
  kTablePutFailed = 1601,
  kExternalError = 1700,
  kFileIOError = 1701,
  kTestError = 1800,
  kTestEngineError = 1801,
  kSqlCaseError = 1802,
  kTestRunSessionError = 1803,
  kCmdError = 2000
};
bool StatusCode_IsValid(int value);
const StatusCode StatusCode_MIN = kOk;
const StatusCode StatusCode_MAX = kCmdError;
const int StatusCode_ARRAYSIZE = StatusCode_MAX + 1;

const ::google::protobuf::EnumDescriptor* StatusCode_descriptor();
inline const ::std::string& StatusCode_Name(StatusCode value) {
  return ::google::protobuf::internal::NameOfEnum(
    StatusCode_descriptor(), value);
}
inline bool StatusCode_Parse(
    const ::std::string& name, StatusCode* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StatusCode>(
    StatusCode_descriptor(), name, value);
}
// ===================================================================

class Status : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.common.Status) */ {
 public:
  Status();
  virtual ~Status();

  Status(const Status& from);

  inline Status& operator=(const Status& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Status(Status&& from) noexcept
    : Status() {
    *this = ::std::move(from);
  }

  inline Status& operator=(Status&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Status& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Status* internal_default_instance() {
    return reinterpret_cast<const Status*>(
               &_Status_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Status* other);
  friend void swap(Status& a, Status& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Status* New() const final {
    return CreateMaybeMessage<Status>(NULL);
  }

  Status* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Status>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Status& from);
  void MergeFrom(const Status& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Status* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string msg = 2;
  bool has_msg() const;
  void clear_msg();
  static const int kMsgFieldNumber = 2;
  const ::std::string& msg() const;
  void set_msg(const ::std::string& value);
  #if LANG_CXX11
  void set_msg(::std::string&& value);
  #endif
  void set_msg(const char* value);
  void set_msg(const char* value, size_t size);
  ::std::string* mutable_msg();
  ::std::string* release_msg();
  void set_allocated_msg(::std::string* msg);

  // optional string trace = 3;
  bool has_trace() const;
  void clear_trace();
  static const int kTraceFieldNumber = 3;
  const ::std::string& trace() const;
  void set_trace(const ::std::string& value);
  #if LANG_CXX11
  void set_trace(::std::string&& value);
  #endif
  void set_trace(const char* value);
  void set_trace(const char* value, size_t size);
  ::std::string* mutable_trace();
  ::std::string* release_trace();
  void set_allocated_trace(::std::string* trace);

  // optional .hybridse.common.StatusCode code = 1;
  bool has_code() const;
  void clear_code();
  static const int kCodeFieldNumber = 1;
  ::hybridse::common::StatusCode code() const;
  void set_code(::hybridse::common::StatusCode value);

  // @@protoc_insertion_point(class_scope:hybridse.common.Status)
 private:
  void set_has_code();
  void clear_has_code();
  void set_has_msg();
  void clear_has_msg();
  void set_has_trace();
  void clear_has_trace();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr msg_;
  ::google::protobuf::internal::ArenaStringPtr trace_;
  int code_;
  friend struct ::protobuf_fe_5fcommon_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Status

// optional .hybridse.common.StatusCode code = 1;
inline bool Status::has_code() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Status::set_has_code() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Status::clear_has_code() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Status::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::hybridse::common::StatusCode Status::code() const {
  // @@protoc_insertion_point(field_get:hybridse.common.Status.code)
  return static_cast< ::hybridse::common::StatusCode >(code_);
}
inline void Status::set_code(::hybridse::common::StatusCode value) {
  assert(::hybridse::common::StatusCode_IsValid(value));
  set_has_code();
  code_ = value;
  // @@protoc_insertion_point(field_set:hybridse.common.Status.code)
}

// optional string msg = 2;
inline bool Status::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Status::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Status::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Status::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_msg();
}
inline const ::std::string& Status::msg() const {
  // @@protoc_insertion_point(field_get:hybridse.common.Status.msg)
  return msg_.GetNoArena();
}
inline void Status::set_msg(const ::std::string& value) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.common.Status.msg)
}
#if LANG_CXX11
inline void Status::set_msg(::std::string&& value) {
  set_has_msg();
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.common.Status.msg)
}
#endif
inline void Status::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.common.Status.msg)
}
inline void Status::set_msg(const char* value, size_t size) {
  set_has_msg();
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.common.Status.msg)
}
inline ::std::string* Status::mutable_msg() {
  set_has_msg();
  // @@protoc_insertion_point(field_mutable:hybridse.common.Status.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_msg() {
  // @@protoc_insertion_point(field_release:hybridse.common.Status.msg)
  if (!has_msg()) {
    return NULL;
  }
  clear_has_msg();
  return msg_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:hybridse.common.Status.msg)
}

// optional string trace = 3;
inline bool Status::has_trace() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Status::set_has_trace() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Status::clear_has_trace() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Status::clear_trace() {
  trace_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_trace();
}
inline const ::std::string& Status::trace() const {
  // @@protoc_insertion_point(field_get:hybridse.common.Status.trace)
  return trace_.GetNoArena();
}
inline void Status::set_trace(const ::std::string& value) {
  set_has_trace();
  trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.common.Status.trace)
}
#if LANG_CXX11
inline void Status::set_trace(::std::string&& value) {
  set_has_trace();
  trace_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.common.Status.trace)
}
#endif
inline void Status::set_trace(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_trace();
  trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.common.Status.trace)
}
inline void Status::set_trace(const char* value, size_t size) {
  set_has_trace();
  trace_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.common.Status.trace)
}
inline ::std::string* Status::mutable_trace() {
  set_has_trace();
  // @@protoc_insertion_point(field_mutable:hybridse.common.Status.trace)
  return trace_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Status::release_trace() {
  // @@protoc_insertion_point(field_release:hybridse.common.Status.trace)
  if (!has_trace()) {
    return NULL;
  }
  clear_has_trace();
  return trace_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Status::set_allocated_trace(::std::string* trace) {
  if (trace != NULL) {
    set_has_trace();
  } else {
    clear_has_trace();
  }
  trace_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), trace);
  // @@protoc_insertion_point(field_set_allocated:hybridse.common.Status.trace)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace common
}  // namespace hybridse

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::hybridse::common::StatusCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::hybridse::common::StatusCode>() {
  return ::hybridse::common::StatusCode_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_fe_5fcommon_2eproto
