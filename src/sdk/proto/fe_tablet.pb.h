// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fe_tablet.proto

#ifndef PROTOBUF_INCLUDED_fe_5ftablet_2eproto
#define PROTOBUF_INCLUDED_fe_5ftablet_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/service.h>
#include <google/protobuf/unknown_field_set.h>
#include "fe_type.pb.h"
#include "fe_common.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5ftablet_2eproto 

namespace protobuf_fe_5ftablet_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[10];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_fe_5ftablet_2eproto
namespace hybridse {
namespace tablet {
class CreateTableRequest;
class CreateTableRequestDefaultTypeInternal;
extern CreateTableRequestDefaultTypeInternal _CreateTableRequest_default_instance_;
class CreateTableResponse;
class CreateTableResponseDefaultTypeInternal;
extern CreateTableResponseDefaultTypeInternal _CreateTableResponse_default_instance_;
class ExplainRequest;
class ExplainRequestDefaultTypeInternal;
extern ExplainRequestDefaultTypeInternal _ExplainRequest_default_instance_;
class ExplainResponse;
class ExplainResponseDefaultTypeInternal;
extern ExplainResponseDefaultTypeInternal _ExplainResponse_default_instance_;
class GetTableSchemaReponse;
class GetTableSchemaReponseDefaultTypeInternal;
extern GetTableSchemaReponseDefaultTypeInternal _GetTableSchemaReponse_default_instance_;
class GetTablesSchemaRequest;
class GetTablesSchemaRequestDefaultTypeInternal;
extern GetTablesSchemaRequestDefaultTypeInternal _GetTablesSchemaRequest_default_instance_;
class InsertRequest;
class InsertRequestDefaultTypeInternal;
extern InsertRequestDefaultTypeInternal _InsertRequest_default_instance_;
class InsertResponse;
class InsertResponseDefaultTypeInternal;
extern InsertResponseDefaultTypeInternal _InsertResponse_default_instance_;
class QueryRequest;
class QueryRequestDefaultTypeInternal;
extern QueryRequestDefaultTypeInternal _QueryRequest_default_instance_;
class QueryResponse;
class QueryResponseDefaultTypeInternal;
extern QueryResponseDefaultTypeInternal _QueryResponse_default_instance_;
}  // namespace tablet
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> ::hybridse::tablet::CreateTableRequest* Arena::CreateMaybeMessage<::hybridse::tablet::CreateTableRequest>(Arena*);
template<> ::hybridse::tablet::CreateTableResponse* Arena::CreateMaybeMessage<::hybridse::tablet::CreateTableResponse>(Arena*);
template<> ::hybridse::tablet::ExplainRequest* Arena::CreateMaybeMessage<::hybridse::tablet::ExplainRequest>(Arena*);
template<> ::hybridse::tablet::ExplainResponse* Arena::CreateMaybeMessage<::hybridse::tablet::ExplainResponse>(Arena*);
template<> ::hybridse::tablet::GetTableSchemaReponse* Arena::CreateMaybeMessage<::hybridse::tablet::GetTableSchemaReponse>(Arena*);
template<> ::hybridse::tablet::GetTablesSchemaRequest* Arena::CreateMaybeMessage<::hybridse::tablet::GetTablesSchemaRequest>(Arena*);
template<> ::hybridse::tablet::InsertRequest* Arena::CreateMaybeMessage<::hybridse::tablet::InsertRequest>(Arena*);
template<> ::hybridse::tablet::InsertResponse* Arena::CreateMaybeMessage<::hybridse::tablet::InsertResponse>(Arena*);
template<> ::hybridse::tablet::QueryRequest* Arena::CreateMaybeMessage<::hybridse::tablet::QueryRequest>(Arena*);
template<> ::hybridse::tablet::QueryResponse* Arena::CreateMaybeMessage<::hybridse::tablet::QueryResponse>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace hybridse {
namespace tablet {

// ===================================================================

class QueryRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.QueryRequest) */ {
 public:
  QueryRequest();
  virtual ~QueryRequest();

  QueryRequest(const QueryRequest& from);

  inline QueryRequest& operator=(const QueryRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryRequest(QueryRequest&& from) noexcept
    : QueryRequest() {
    *this = ::std::move(from);
  }

  inline QueryRequest& operator=(QueryRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRequest* internal_default_instance() {
    return reinterpret_cast<const QueryRequest*>(
               &_QueryRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(QueryRequest* other);
  friend void swap(QueryRequest& a, QueryRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryRequest* New() const final {
    return CreateMaybeMessage<QueryRequest>(NULL);
  }

  QueryRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryRequest& from);
  void MergeFrom(const QueryRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridse.type.ColumnDef parameter_schema = 7;
  int parameter_schema_size() const;
  void clear_parameter_schema();
  static const int kParameterSchemaFieldNumber = 7;
  ::hybridse::type::ColumnDef* mutable_parameter_schema(int index);
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
      mutable_parameter_schema();
  const ::hybridse::type::ColumnDef& parameter_schema(int index) const;
  ::hybridse::type::ColumnDef* add_parameter_schema();
  const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
      parameter_schema() const;

  // optional string sql = 1;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 1;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // optional string db = 2;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 2;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional bytes row = 4;
  bool has_row() const;
  void clear_row();
  static const int kRowFieldNumber = 4;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const void* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // optional bytes parameter_row = 8;
  bool has_parameter_row() const;
  void clear_parameter_row();
  static const int kParameterRowFieldNumber = 8;
  const ::std::string& parameter_row() const;
  void set_parameter_row(const ::std::string& value);
  #if LANG_CXX11
  void set_parameter_row(::std::string&& value);
  #endif
  void set_parameter_row(const char* value);
  void set_parameter_row(const void* value, size_t size);
  ::std::string* mutable_parameter_row();
  ::std::string* release_parameter_row();
  void set_allocated_parameter_row(::std::string* parameter_row);

  // optional uint32 task_id = 6 [default = 0];
  bool has_task_id() const;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 6;
  ::google::protobuf::uint32 task_id() const;
  void set_task_id(::google::protobuf::uint32 value);

  // optional bool is_batch = 3 [default = true];
  bool has_is_batch() const;
  void clear_is_batch();
  static const int kIsBatchFieldNumber = 3;
  bool is_batch() const;
  void set_is_batch(bool value);

  // optional bool is_debug = 5 [default = true];
  bool has_is_debug() const;
  void clear_is_debug();
  static const int kIsDebugFieldNumber = 5;
  bool is_debug() const;
  void set_is_debug(bool value);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.QueryRequest)
 private:
  void set_has_sql();
  void clear_has_sql();
  void set_has_db();
  void clear_has_db();
  void set_has_is_batch();
  void clear_has_is_batch();
  void set_has_row();
  void clear_has_row();
  void set_has_is_debug();
  void clear_has_is_debug();
  void set_has_task_id();
  void clear_has_task_id();
  void set_has_parameter_row();
  void clear_has_parameter_row();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef > parameter_schema_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr parameter_row_;
  ::google::protobuf::uint32 task_id_;
  bool is_batch_;
  bool is_debug_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class QueryResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.QueryResponse) */ {
 public:
  QueryResponse();
  virtual ~QueryResponse();

  QueryResponse(const QueryResponse& from);

  inline QueryResponse& operator=(const QueryResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  QueryResponse(QueryResponse&& from) noexcept
    : QueryResponse() {
    *this = ::std::move(from);
  }

  inline QueryResponse& operator=(QueryResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryResponse* internal_default_instance() {
    return reinterpret_cast<const QueryResponse*>(
               &_QueryResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(QueryResponse* other);
  friend void swap(QueryResponse& a, QueryResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline QueryResponse* New() const final {
    return CreateMaybeMessage<QueryResponse>(NULL);
  }

  QueryResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<QueryResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const QueryResponse& from);
  void MergeFrom(const QueryResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes schema = 2;
  bool has_schema() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 2;
  const ::std::string& schema() const;
  void set_schema(const ::std::string& value);
  #if LANG_CXX11
  void set_schema(::std::string&& value);
  #endif
  void set_schema(const char* value);
  void set_schema(const void* value, size_t size);
  ::std::string* mutable_schema();
  ::std::string* release_schema();
  void set_allocated_schema(::std::string* schema);

  // optional .hybridse.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::hybridse::common::Status& _internal_status() const;
  public:
  const ::hybridse::common::Status& status() const;
  ::hybridse::common::Status* release_status();
  ::hybridse::common::Status* mutable_status();
  void set_allocated_status(::hybridse::common::Status* status);

  // optional uint32 byte_size = 3;
  bool has_byte_size() const;
  void clear_byte_size();
  static const int kByteSizeFieldNumber = 3;
  ::google::protobuf::uint32 byte_size() const;
  void set_byte_size(::google::protobuf::uint32 value);

  // optional uint32 count = 4;
  bool has_count() const;
  void clear_count();
  static const int kCountFieldNumber = 4;
  ::google::protobuf::uint32 count() const;
  void set_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.QueryResponse)
 private:
  void set_has_status();
  void clear_has_status();
  void set_has_schema();
  void clear_has_schema();
  void set_has_byte_size();
  void clear_has_byte_size();
  void set_has_count();
  void clear_has_count();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr schema_;
  ::hybridse::common::Status* status_;
  ::google::protobuf::uint32 byte_size_;
  ::google::protobuf::uint32 count_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTableRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.CreateTableRequest) */ {
 public:
  CreateTableRequest();
  virtual ~CreateTableRequest();

  CreateTableRequest(const CreateTableRequest& from);

  inline CreateTableRequest& operator=(const CreateTableRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTableRequest(CreateTableRequest&& from) noexcept
    : CreateTableRequest() {
    *this = ::std::move(from);
  }

  inline CreateTableRequest& operator=(CreateTableRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableRequest* internal_default_instance() {
    return reinterpret_cast<const CreateTableRequest*>(
               &_CreateTableRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(CreateTableRequest* other);
  friend void swap(CreateTableRequest& a, CreateTableRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableRequest* New() const final {
    return CreateMaybeMessage<CreateTableRequest>(NULL);
  }

  CreateTableRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTableRequest& from);
  void MergeFrom(const CreateTableRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 pids = 3;
  int pids_size() const;
  void clear_pids();
  static const int kPidsFieldNumber = 3;
  ::google::protobuf::uint32 pids(int index) const;
  void set_pids(int index, ::google::protobuf::uint32 value);
  void add_pids(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      pids() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_pids();

  // optional string db = 4;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 4;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional .hybridse.type.TableDef table = 1;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 1;
  private:
  const ::hybridse::type::TableDef& _internal_table() const;
  public:
  const ::hybridse::type::TableDef& table() const;
  ::hybridse::type::TableDef* release_table();
  ::hybridse::type::TableDef* mutable_table();
  void set_allocated_table(::hybridse::type::TableDef* table);

  // optional uint32 tid = 2;
  bool has_tid() const;
  void clear_tid();
  static const int kTidFieldNumber = 2;
  ::google::protobuf::uint32 tid() const;
  void set_tid(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.CreateTableRequest)
 private:
  void set_has_table();
  void clear_has_table();
  void set_has_tid();
  void clear_has_tid();
  void set_has_db();
  void clear_has_db();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > pids_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::hybridse::type::TableDef* table_;
  ::google::protobuf::uint32 tid_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CreateTableResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.CreateTableResponse) */ {
 public:
  CreateTableResponse();
  virtual ~CreateTableResponse();

  CreateTableResponse(const CreateTableResponse& from);

  inline CreateTableResponse& operator=(const CreateTableResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CreateTableResponse(CreateTableResponse&& from) noexcept
    : CreateTableResponse() {
    *this = ::std::move(from);
  }

  inline CreateTableResponse& operator=(CreateTableResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateTableResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CreateTableResponse* internal_default_instance() {
    return reinterpret_cast<const CreateTableResponse*>(
               &_CreateTableResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(CreateTableResponse* other);
  friend void swap(CreateTableResponse& a, CreateTableResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CreateTableResponse* New() const final {
    return CreateMaybeMessage<CreateTableResponse>(NULL);
  }

  CreateTableResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CreateTableResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const CreateTableResponse& from);
  void MergeFrom(const CreateTableResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CreateTableResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hybridse.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::hybridse::common::Status& _internal_status() const;
  public:
  const ::hybridse::common::Status& status() const;
  ::hybridse::common::Status* release_status();
  ::hybridse::common::Status* mutable_status();
  void set_allocated_status(::hybridse::common::Status* status);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.CreateTableResponse)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hybridse::common::Status* status_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.InsertRequest) */ {
 public:
  InsertRequest();
  virtual ~InsertRequest();

  InsertRequest(const InsertRequest& from);

  inline InsertRequest& operator=(const InsertRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertRequest(InsertRequest&& from) noexcept
    : InsertRequest() {
    *this = ::std::move(from);
  }

  inline InsertRequest& operator=(InsertRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertRequest* internal_default_instance() {
    return reinterpret_cast<const InsertRequest*>(
               &_InsertRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(InsertRequest* other);
  friend void swap(InsertRequest& a, InsertRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertRequest* New() const final {
    return CreateMaybeMessage<InsertRequest>(NULL);
  }

  InsertRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertRequest& from);
  void MergeFrom(const InsertRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional string table = 2;
  bool has_table() const;
  void clear_table();
  static const int kTableFieldNumber = 2;
  const ::std::string& table() const;
  void set_table(const ::std::string& value);
  #if LANG_CXX11
  void set_table(::std::string&& value);
  #endif
  void set_table(const char* value);
  void set_table(const char* value, size_t size);
  ::std::string* mutable_table();
  ::std::string* release_table();
  void set_allocated_table(::std::string* table);

  // optional bytes row = 3;
  bool has_row() const;
  void clear_row();
  static const int kRowFieldNumber = 3;
  const ::std::string& row() const;
  void set_row(const ::std::string& value);
  #if LANG_CXX11
  void set_row(::std::string&& value);
  #endif
  void set_row(const char* value);
  void set_row(const void* value, size_t size);
  ::std::string* mutable_row();
  ::std::string* release_row();
  void set_allocated_row(::std::string* row);

  // optional string key = 4;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 4;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // optional uint64 ts = 5;
  bool has_ts() const;
  void clear_ts();
  static const int kTsFieldNumber = 5;
  ::google::protobuf::uint64 ts() const;
  void set_ts(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.InsertRequest)
 private:
  void set_has_db();
  void clear_has_db();
  void set_has_table();
  void clear_has_table();
  void set_has_row();
  void clear_has_row();
  void set_has_key();
  void clear_has_key();
  void set_has_ts();
  void clear_has_ts();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr table_;
  ::google::protobuf::internal::ArenaStringPtr row_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::uint64 ts_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplainRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.ExplainRequest) */ {
 public:
  ExplainRequest();
  virtual ~ExplainRequest();

  ExplainRequest(const ExplainRequest& from);

  inline ExplainRequest& operator=(const ExplainRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplainRequest(ExplainRequest&& from) noexcept
    : ExplainRequest() {
    *this = ::std::move(from);
  }

  inline ExplainRequest& operator=(ExplainRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplainRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplainRequest* internal_default_instance() {
    return reinterpret_cast<const ExplainRequest*>(
               &_ExplainRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(ExplainRequest* other);
  friend void swap(ExplainRequest& a, ExplainRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplainRequest* New() const final {
    return CreateMaybeMessage<ExplainRequest>(NULL);
  }

  ExplainRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplainRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplainRequest& from);
  void MergeFrom(const ExplainRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplainRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .hybridse.type.ColumnDef parameter_schema = 3;
  int parameter_schema_size() const;
  void clear_parameter_schema();
  static const int kParameterSchemaFieldNumber = 3;
  ::hybridse::type::ColumnDef* mutable_parameter_schema(int index);
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
      mutable_parameter_schema();
  const ::hybridse::type::ColumnDef& parameter_schema(int index) const;
  ::hybridse::type::ColumnDef* add_parameter_schema();
  const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
      parameter_schema() const;

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional string sql = 2;
  bool has_sql() const;
  void clear_sql();
  static const int kSqlFieldNumber = 2;
  const ::std::string& sql() const;
  void set_sql(const ::std::string& value);
  #if LANG_CXX11
  void set_sql(::std::string&& value);
  #endif
  void set_sql(const char* value);
  void set_sql(const char* value, size_t size);
  ::std::string* mutable_sql();
  ::std::string* release_sql();
  void set_allocated_sql(::std::string* sql);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.ExplainRequest)
 private:
  void set_has_db();
  void clear_has_db();
  void set_has_sql();
  void clear_has_sql();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef > parameter_schema_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr sql_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ExplainResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.ExplainResponse) */ {
 public:
  ExplainResponse();
  virtual ~ExplainResponse();

  ExplainResponse(const ExplainResponse& from);

  inline ExplainResponse& operator=(const ExplainResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ExplainResponse(ExplainResponse&& from) noexcept
    : ExplainResponse() {
    *this = ::std::move(from);
  }

  inline ExplainResponse& operator=(ExplainResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ExplainResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ExplainResponse* internal_default_instance() {
    return reinterpret_cast<const ExplainResponse*>(
               &_ExplainResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  void Swap(ExplainResponse* other);
  friend void swap(ExplainResponse& a, ExplainResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ExplainResponse* New() const final {
    return CreateMaybeMessage<ExplainResponse>(NULL);
  }

  ExplainResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<ExplainResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const ExplainResponse& from);
  void MergeFrom(const ExplainResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExplainResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bytes input_schema = 1;
  bool has_input_schema() const;
  void clear_input_schema();
  static const int kInputSchemaFieldNumber = 1;
  const ::std::string& input_schema() const;
  void set_input_schema(const ::std::string& value);
  #if LANG_CXX11
  void set_input_schema(::std::string&& value);
  #endif
  void set_input_schema(const char* value);
  void set_input_schema(const void* value, size_t size);
  ::std::string* mutable_input_schema();
  ::std::string* release_input_schema();
  void set_allocated_input_schema(::std::string* input_schema);

  // optional string logical_plan = 3;
  bool has_logical_plan() const;
  void clear_logical_plan();
  static const int kLogicalPlanFieldNumber = 3;
  const ::std::string& logical_plan() const;
  void set_logical_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_logical_plan(::std::string&& value);
  #endif
  void set_logical_plan(const char* value);
  void set_logical_plan(const char* value, size_t size);
  ::std::string* mutable_logical_plan();
  ::std::string* release_logical_plan();
  void set_allocated_logical_plan(::std::string* logical_plan);

  // optional string physical_plan = 4;
  bool has_physical_plan() const;
  void clear_physical_plan();
  static const int kPhysicalPlanFieldNumber = 4;
  const ::std::string& physical_plan() const;
  void set_physical_plan(const ::std::string& value);
  #if LANG_CXX11
  void set_physical_plan(::std::string&& value);
  #endif
  void set_physical_plan(const char* value);
  void set_physical_plan(const char* value, size_t size);
  ::std::string* mutable_physical_plan();
  ::std::string* release_physical_plan();
  void set_allocated_physical_plan(::std::string* physical_plan);

  // optional string ir = 5;
  bool has_ir() const;
  void clear_ir();
  static const int kIrFieldNumber = 5;
  const ::std::string& ir() const;
  void set_ir(const ::std::string& value);
  #if LANG_CXX11
  void set_ir(::std::string&& value);
  #endif
  void set_ir(const char* value);
  void set_ir(const char* value, size_t size);
  ::std::string* mutable_ir();
  ::std::string* release_ir();
  void set_allocated_ir(::std::string* ir);

  // optional bytes output_schema = 6;
  bool has_output_schema() const;
  void clear_output_schema();
  static const int kOutputSchemaFieldNumber = 6;
  const ::std::string& output_schema() const;
  void set_output_schema(const ::std::string& value);
  #if LANG_CXX11
  void set_output_schema(::std::string&& value);
  #endif
  void set_output_schema(const char* value);
  void set_output_schema(const void* value, size_t size);
  ::std::string* mutable_output_schema();
  ::std::string* release_output_schema();
  void set_allocated_output_schema(::std::string* output_schema);

  // optional .hybridse.common.Status status = 2;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 2;
  private:
  const ::hybridse::common::Status& _internal_status() const;
  public:
  const ::hybridse::common::Status& status() const;
  ::hybridse::common::Status* release_status();
  ::hybridse::common::Status* mutable_status();
  void set_allocated_status(::hybridse::common::Status* status);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.ExplainResponse)
 private:
  void set_has_input_schema();
  void clear_has_input_schema();
  void set_has_status();
  void clear_has_status();
  void set_has_logical_plan();
  void clear_has_logical_plan();
  void set_has_physical_plan();
  void clear_has_physical_plan();
  void set_has_ir();
  void clear_has_ir();
  void set_has_output_schema();
  void clear_has_output_schema();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr input_schema_;
  ::google::protobuf::internal::ArenaStringPtr logical_plan_;
  ::google::protobuf::internal::ArenaStringPtr physical_plan_;
  ::google::protobuf::internal::ArenaStringPtr ir_;
  ::google::protobuf::internal::ArenaStringPtr output_schema_;
  ::hybridse::common::Status* status_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class InsertResponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.InsertResponse) */ {
 public:
  InsertResponse();
  virtual ~InsertResponse();

  InsertResponse(const InsertResponse& from);

  inline InsertResponse& operator=(const InsertResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  InsertResponse(InsertResponse&& from) noexcept
    : InsertResponse() {
    *this = ::std::move(from);
  }

  inline InsertResponse& operator=(InsertResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InsertResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InsertResponse* internal_default_instance() {
    return reinterpret_cast<const InsertResponse*>(
               &_InsertResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  void Swap(InsertResponse* other);
  friend void swap(InsertResponse& a, InsertResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline InsertResponse* New() const final {
    return CreateMaybeMessage<InsertResponse>(NULL);
  }

  InsertResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<InsertResponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const InsertResponse& from);
  void MergeFrom(const InsertResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InsertResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .hybridse.common.Status status = 1;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 1;
  private:
  const ::hybridse::common::Status& _internal_status() const;
  public:
  const ::hybridse::common::Status& status() const;
  ::hybridse::common::Status* release_status();
  ::hybridse::common::Status* mutable_status();
  void set_allocated_status(::hybridse::common::Status* status);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.InsertResponse)
 private:
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::hybridse::common::Status* status_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTablesSchemaRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.GetTablesSchemaRequest) */ {
 public:
  GetTablesSchemaRequest();
  virtual ~GetTablesSchemaRequest();

  GetTablesSchemaRequest(const GetTablesSchemaRequest& from);

  inline GetTablesSchemaRequest& operator=(const GetTablesSchemaRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTablesSchemaRequest(GetTablesSchemaRequest&& from) noexcept
    : GetTablesSchemaRequest() {
    *this = ::std::move(from);
  }

  inline GetTablesSchemaRequest& operator=(GetTablesSchemaRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTablesSchemaRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTablesSchemaRequest* internal_default_instance() {
    return reinterpret_cast<const GetTablesSchemaRequest*>(
               &_GetTablesSchemaRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  void Swap(GetTablesSchemaRequest* other);
  friend void swap(GetTablesSchemaRequest& a, GetTablesSchemaRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTablesSchemaRequest* New() const final {
    return CreateMaybeMessage<GetTablesSchemaRequest>(NULL);
  }

  GetTablesSchemaRequest* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTablesSchemaRequest>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTablesSchemaRequest& from);
  void MergeFrom(const GetTablesSchemaRequest& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTablesSchemaRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string db = 1;
  bool has_db() const;
  void clear_db();
  static const int kDbFieldNumber = 1;
  const ::std::string& db() const;
  void set_db(const ::std::string& value);
  #if LANG_CXX11
  void set_db(::std::string&& value);
  #endif
  void set_db(const char* value);
  void set_db(const char* value, size_t size);
  ::std::string* mutable_db();
  ::std::string* release_db();
  void set_allocated_db(::std::string* db);

  // optional string name = 2;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.GetTablesSchemaRequest)
 private:
  void set_has_db();
  void clear_has_db();
  void set_has_name();
  void clear_has_name();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr db_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class GetTableSchemaReponse : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:hybridse.tablet.GetTableSchemaReponse) */ {
 public:
  GetTableSchemaReponse();
  virtual ~GetTableSchemaReponse();

  GetTableSchemaReponse(const GetTableSchemaReponse& from);

  inline GetTableSchemaReponse& operator=(const GetTableSchemaReponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  GetTableSchemaReponse(GetTableSchemaReponse&& from) noexcept
    : GetTableSchemaReponse() {
    *this = ::std::move(from);
  }

  inline GetTableSchemaReponse& operator=(GetTableSchemaReponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetTableSchemaReponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetTableSchemaReponse* internal_default_instance() {
    return reinterpret_cast<const GetTableSchemaReponse*>(
               &_GetTableSchemaReponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  void Swap(GetTableSchemaReponse* other);
  friend void swap(GetTableSchemaReponse& a, GetTableSchemaReponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline GetTableSchemaReponse* New() const final {
    return CreateMaybeMessage<GetTableSchemaReponse>(NULL);
  }

  GetTableSchemaReponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<GetTableSchemaReponse>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const GetTableSchemaReponse& from);
  void MergeFrom(const GetTableSchemaReponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetTableSchemaReponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string name = 1;
  bool has_name() const;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional .hybridse.type.TableDef schema = 2;
  bool has_schema() const;
  void clear_schema();
  static const int kSchemaFieldNumber = 2;
  private:
  const ::hybridse::type::TableDef& _internal_schema() const;
  public:
  const ::hybridse::type::TableDef& schema() const;
  ::hybridse::type::TableDef* release_schema();
  ::hybridse::type::TableDef* mutable_schema();
  void set_allocated_schema(::hybridse::type::TableDef* schema);

  // optional .hybridse.common.Status status = 3;
  bool has_status() const;
  void clear_status();
  static const int kStatusFieldNumber = 3;
  private:
  const ::hybridse::common::Status& _internal_status() const;
  public:
  const ::hybridse::common::Status& status() const;
  ::hybridse::common::Status* release_status();
  ::hybridse::common::Status* mutable_status();
  void set_allocated_status(::hybridse::common::Status* status);

  // @@protoc_insertion_point(class_scope:hybridse.tablet.GetTableSchemaReponse)
 private:
  void set_has_name();
  void clear_has_name();
  void set_has_schema();
  void clear_has_schema();
  void set_has_status();
  void clear_has_status();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::hybridse::type::TableDef* schema_;
  ::hybridse::common::Status* status_;
  friend struct ::protobuf_fe_5ftablet_2eproto::TableStruct;
};
// ===================================================================

class TabletServer_Stub;

class TabletServer : public ::google::protobuf::Service {
 protected:
  // This class should be treated as an abstract interface.
  inline TabletServer() {};
 public:
  virtual ~TabletServer();

  typedef TabletServer_Stub Stub;

  static const ::google::protobuf::ServiceDescriptor* descriptor();

  virtual void GetTableSchema(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::GetTablesSchemaRequest* request,
                       ::hybridse::tablet::GetTableSchemaReponse* response,
                       ::google::protobuf::Closure* done);
  virtual void CreateTable(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::CreateTableRequest* request,
                       ::hybridse::tablet::CreateTableResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Query(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::QueryRequest* request,
                       ::hybridse::tablet::QueryResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Insert(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::InsertRequest* request,
                       ::hybridse::tablet::InsertResponse* response,
                       ::google::protobuf::Closure* done);
  virtual void Explain(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::ExplainRequest* request,
                       ::hybridse::tablet::ExplainResponse* response,
                       ::google::protobuf::Closure* done);

  // implements Service ----------------------------------------------

  const ::google::protobuf::ServiceDescriptor* GetDescriptor();
  void CallMethod(const ::google::protobuf::MethodDescriptor* method,
                  ::google::protobuf::RpcController* controller,
                  const ::google::protobuf::Message* request,
                  ::google::protobuf::Message* response,
                  ::google::protobuf::Closure* done);
  const ::google::protobuf::Message& GetRequestPrototype(
    const ::google::protobuf::MethodDescriptor* method) const;
  const ::google::protobuf::Message& GetResponsePrototype(
    const ::google::protobuf::MethodDescriptor* method) const;

 private:
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TabletServer);
};

class TabletServer_Stub : public TabletServer {
 public:
  TabletServer_Stub(::google::protobuf::RpcChannel* channel);
  TabletServer_Stub(::google::protobuf::RpcChannel* channel,
                   ::google::protobuf::Service::ChannelOwnership ownership);
  ~TabletServer_Stub();

  inline ::google::protobuf::RpcChannel* channel() { return channel_; }

  // implements TabletServer ------------------------------------------

  void GetTableSchema(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::GetTablesSchemaRequest* request,
                       ::hybridse::tablet::GetTableSchemaReponse* response,
                       ::google::protobuf::Closure* done);
  void CreateTable(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::CreateTableRequest* request,
                       ::hybridse::tablet::CreateTableResponse* response,
                       ::google::protobuf::Closure* done);
  void Query(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::QueryRequest* request,
                       ::hybridse::tablet::QueryResponse* response,
                       ::google::protobuf::Closure* done);
  void Insert(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::InsertRequest* request,
                       ::hybridse::tablet::InsertResponse* response,
                       ::google::protobuf::Closure* done);
  void Explain(::google::protobuf::RpcController* controller,
                       const ::hybridse::tablet::ExplainRequest* request,
                       ::hybridse::tablet::ExplainResponse* response,
                       ::google::protobuf::Closure* done);
 private:
  ::google::protobuf::RpcChannel* channel_;
  bool owns_channel_;
  GOOGLE_DISALLOW_EVIL_CONSTRUCTORS(TabletServer_Stub);
};


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryRequest

// optional string sql = 1;
inline bool QueryRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& QueryRequest::sql() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.sql)
  return sql_.GetNoArena();
}
inline void QueryRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryRequest.sql)
}
#if LANG_CXX11
inline void QueryRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.QueryRequest.sql)
}
#endif
inline void QueryRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.QueryRequest.sql)
}
inline void QueryRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.QueryRequest.sql)
}
inline ::std::string* QueryRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.QueryRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_sql() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.QueryRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.QueryRequest.sql)
}

// optional string db = 2;
inline bool QueryRequest::has_db() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryRequest::set_has_db() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& QueryRequest::db() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.db)
  return db_.GetNoArena();
}
inline void QueryRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryRequest.db)
}
#if LANG_CXX11
inline void QueryRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.QueryRequest.db)
}
#endif
inline void QueryRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.QueryRequest.db)
}
inline void QueryRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.QueryRequest.db)
}
inline ::std::string* QueryRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.QueryRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.QueryRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.QueryRequest.db)
}

// optional bool is_batch = 3 [default = true];
inline bool QueryRequest::has_is_batch() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void QueryRequest::set_has_is_batch() {
  _has_bits_[0] |= 0x00000020u;
}
inline void QueryRequest::clear_has_is_batch() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void QueryRequest::clear_is_batch() {
  is_batch_ = true;
  clear_has_is_batch();
}
inline bool QueryRequest::is_batch() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.is_batch)
  return is_batch_;
}
inline void QueryRequest::set_is_batch(bool value) {
  set_has_is_batch();
  is_batch_ = value;
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryRequest.is_batch)
}

// optional bytes row = 4;
inline bool QueryRequest::has_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryRequest::set_has_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryRequest::clear_has_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_row();
}
inline const ::std::string& QueryRequest::row() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.row)
  return row_.GetNoArena();
}
inline void QueryRequest::set_row(const ::std::string& value) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryRequest.row)
}
#if LANG_CXX11
inline void QueryRequest::set_row(::std::string&& value) {
  set_has_row();
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.QueryRequest.row)
}
#endif
inline void QueryRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.QueryRequest.row)
}
inline void QueryRequest::set_row(const void* value, size_t size) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.QueryRequest.row)
}
inline ::std::string* QueryRequest::mutable_row() {
  set_has_row();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.QueryRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_row() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.QueryRequest.row)
  if (!has_row()) {
    return NULL;
  }
  clear_has_row();
  return row_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    set_has_row();
  } else {
    clear_has_row();
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.QueryRequest.row)
}

// optional bool is_debug = 5 [default = true];
inline bool QueryRequest::has_is_debug() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void QueryRequest::set_has_is_debug() {
  _has_bits_[0] |= 0x00000040u;
}
inline void QueryRequest::clear_has_is_debug() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void QueryRequest::clear_is_debug() {
  is_debug_ = true;
  clear_has_is_debug();
}
inline bool QueryRequest::is_debug() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.is_debug)
  return is_debug_;
}
inline void QueryRequest::set_is_debug(bool value) {
  set_has_is_debug();
  is_debug_ = value;
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryRequest.is_debug)
}

// optional uint32 task_id = 6 [default = 0];
inline bool QueryRequest::has_task_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryRequest::set_has_task_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryRequest::clear_has_task_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryRequest::clear_task_id() {
  task_id_ = 0u;
  clear_has_task_id();
}
inline ::google::protobuf::uint32 QueryRequest::task_id() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.task_id)
  return task_id_;
}
inline void QueryRequest::set_task_id(::google::protobuf::uint32 value) {
  set_has_task_id();
  task_id_ = value;
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryRequest.task_id)
}

// repeated .hybridse.type.ColumnDef parameter_schema = 7;
inline int QueryRequest::parameter_schema_size() const {
  return parameter_schema_.size();
}
inline ::hybridse::type::ColumnDef* QueryRequest::mutable_parameter_schema(int index) {
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.QueryRequest.parameter_schema)
  return parameter_schema_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
QueryRequest::mutable_parameter_schema() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.tablet.QueryRequest.parameter_schema)
  return &parameter_schema_;
}
inline const ::hybridse::type::ColumnDef& QueryRequest::parameter_schema(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.parameter_schema)
  return parameter_schema_.Get(index);
}
inline ::hybridse::type::ColumnDef* QueryRequest::add_parameter_schema() {
  // @@protoc_insertion_point(field_add:hybridse.tablet.QueryRequest.parameter_schema)
  return parameter_schema_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
QueryRequest::parameter_schema() const {
  // @@protoc_insertion_point(field_list:hybridse.tablet.QueryRequest.parameter_schema)
  return parameter_schema_;
}

// optional bytes parameter_row = 8;
inline bool QueryRequest::has_parameter_row() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryRequest::set_has_parameter_row() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryRequest::clear_has_parameter_row() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryRequest::clear_parameter_row() {
  parameter_row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_parameter_row();
}
inline const ::std::string& QueryRequest::parameter_row() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryRequest.parameter_row)
  return parameter_row_.GetNoArena();
}
inline void QueryRequest::set_parameter_row(const ::std::string& value) {
  set_has_parameter_row();
  parameter_row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryRequest.parameter_row)
}
#if LANG_CXX11
inline void QueryRequest::set_parameter_row(::std::string&& value) {
  set_has_parameter_row();
  parameter_row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.QueryRequest.parameter_row)
}
#endif
inline void QueryRequest::set_parameter_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_parameter_row();
  parameter_row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.QueryRequest.parameter_row)
}
inline void QueryRequest::set_parameter_row(const void* value, size_t size) {
  set_has_parameter_row();
  parameter_row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.QueryRequest.parameter_row)
}
inline ::std::string* QueryRequest::mutable_parameter_row() {
  set_has_parameter_row();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.QueryRequest.parameter_row)
  return parameter_row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryRequest::release_parameter_row() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.QueryRequest.parameter_row)
  if (!has_parameter_row()) {
    return NULL;
  }
  clear_has_parameter_row();
  return parameter_row_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryRequest::set_allocated_parameter_row(::std::string* parameter_row) {
  if (parameter_row != NULL) {
    set_has_parameter_row();
  } else {
    clear_has_parameter_row();
  }
  parameter_row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), parameter_row);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.QueryRequest.parameter_row)
}

// -------------------------------------------------------------------

// QueryResponse

// optional .hybridse.common.Status status = 1;
inline bool QueryResponse::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryResponse::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hybridse::common::Status& QueryResponse::_internal_status() const {
  return *status_;
}
inline const ::hybridse::common::Status& QueryResponse::status() const {
  const ::hybridse::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::common::Status*>(
      &::hybridse::common::_Status_default_instance_);
}
inline ::hybridse::common::Status* QueryResponse::release_status() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.QueryResponse.status)
  clear_has_status();
  ::hybridse::common::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::hybridse::common::Status* QueryResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.QueryResponse.status)
  return status_;
}
inline void QueryResponse::set_allocated_status(::hybridse::common::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.QueryResponse.status)
}

// optional bytes schema = 2;
inline bool QueryResponse::has_schema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryResponse::set_has_schema() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryResponse::clear_has_schema() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryResponse::clear_schema() {
  schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_schema();
}
inline const ::std::string& QueryResponse::schema() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryResponse.schema)
  return schema_.GetNoArena();
}
inline void QueryResponse::set_schema(const ::std::string& value) {
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryResponse.schema)
}
#if LANG_CXX11
inline void QueryResponse::set_schema(::std::string&& value) {
  set_has_schema();
  schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.QueryResponse.schema)
}
#endif
inline void QueryResponse::set_schema(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.QueryResponse.schema)
}
inline void QueryResponse::set_schema(const void* value, size_t size) {
  set_has_schema();
  schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.QueryResponse.schema)
}
inline ::std::string* QueryResponse::mutable_schema() {
  set_has_schema();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.QueryResponse.schema)
  return schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QueryResponse::release_schema() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.QueryResponse.schema)
  if (!has_schema()) {
    return NULL;
  }
  clear_has_schema();
  return schema_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QueryResponse::set_allocated_schema(::std::string* schema) {
  if (schema != NULL) {
    set_has_schema();
  } else {
    clear_has_schema();
  }
  schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), schema);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.QueryResponse.schema)
}

// optional uint32 byte_size = 3;
inline bool QueryResponse::has_byte_size() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryResponse::set_has_byte_size() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryResponse::clear_has_byte_size() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryResponse::clear_byte_size() {
  byte_size_ = 0u;
  clear_has_byte_size();
}
inline ::google::protobuf::uint32 QueryResponse::byte_size() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryResponse.byte_size)
  return byte_size_;
}
inline void QueryResponse::set_byte_size(::google::protobuf::uint32 value) {
  set_has_byte_size();
  byte_size_ = value;
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryResponse.byte_size)
}

// optional uint32 count = 4;
inline bool QueryResponse::has_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryResponse::set_has_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryResponse::clear_has_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryResponse::clear_count() {
  count_ = 0u;
  clear_has_count();
}
inline ::google::protobuf::uint32 QueryResponse::count() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.QueryResponse.count)
  return count_;
}
inline void QueryResponse::set_count(::google::protobuf::uint32 value) {
  set_has_count();
  count_ = value;
  // @@protoc_insertion_point(field_set:hybridse.tablet.QueryResponse.count)
}

// -------------------------------------------------------------------

// CreateTableRequest

// optional .hybridse.type.TableDef table = 1;
inline bool CreateTableRequest::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateTableRequest::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateTableRequest::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hybridse::type::TableDef& CreateTableRequest::_internal_table() const {
  return *table_;
}
inline const ::hybridse::type::TableDef& CreateTableRequest::table() const {
  const ::hybridse::type::TableDef* p = table_;
  // @@protoc_insertion_point(field_get:hybridse.tablet.CreateTableRequest.table)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::type::TableDef*>(
      &::hybridse::type::_TableDef_default_instance_);
}
inline ::hybridse::type::TableDef* CreateTableRequest::release_table() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.CreateTableRequest.table)
  clear_has_table();
  ::hybridse::type::TableDef* temp = table_;
  table_ = NULL;
  return temp;
}
inline ::hybridse::type::TableDef* CreateTableRequest::mutable_table() {
  set_has_table();
  if (table_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::type::TableDef>(GetArenaNoVirtual());
    table_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.CreateTableRequest.table)
  return table_;
}
inline void CreateTableRequest::set_allocated_table(::hybridse::type::TableDef* table) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(table_);
  }
  if (table) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      table = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, table, submessage_arena);
    }
    set_has_table();
  } else {
    clear_has_table();
  }
  table_ = table;
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.CreateTableRequest.table)
}

// optional uint32 tid = 2;
inline bool CreateTableRequest::has_tid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateTableRequest::set_has_tid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateTableRequest::clear_has_tid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateTableRequest::clear_tid() {
  tid_ = 0u;
  clear_has_tid();
}
inline ::google::protobuf::uint32 CreateTableRequest::tid() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.CreateTableRequest.tid)
  return tid_;
}
inline void CreateTableRequest::set_tid(::google::protobuf::uint32 value) {
  set_has_tid();
  tid_ = value;
  // @@protoc_insertion_point(field_set:hybridse.tablet.CreateTableRequest.tid)
}

// repeated uint32 pids = 3;
inline int CreateTableRequest::pids_size() const {
  return pids_.size();
}
inline void CreateTableRequest::clear_pids() {
  pids_.Clear();
}
inline ::google::protobuf::uint32 CreateTableRequest::pids(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.CreateTableRequest.pids)
  return pids_.Get(index);
}
inline void CreateTableRequest::set_pids(int index, ::google::protobuf::uint32 value) {
  pids_.Set(index, value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.CreateTableRequest.pids)
}
inline void CreateTableRequest::add_pids(::google::protobuf::uint32 value) {
  pids_.Add(value);
  // @@protoc_insertion_point(field_add:hybridse.tablet.CreateTableRequest.pids)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
CreateTableRequest::pids() const {
  // @@protoc_insertion_point(field_list:hybridse.tablet.CreateTableRequest.pids)
  return pids_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
CreateTableRequest::mutable_pids() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.tablet.CreateTableRequest.pids)
  return &pids_;
}

// optional string db = 4;
inline bool CreateTableRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTableRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTableRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateTableRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& CreateTableRequest::db() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.CreateTableRequest.db)
  return db_.GetNoArena();
}
inline void CreateTableRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.CreateTableRequest.db)
}
#if LANG_CXX11
inline void CreateTableRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.CreateTableRequest.db)
}
#endif
inline void CreateTableRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.CreateTableRequest.db)
}
inline void CreateTableRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.CreateTableRequest.db)
}
inline ::std::string* CreateTableRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.CreateTableRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CreateTableRequest::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.CreateTableRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CreateTableRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.CreateTableRequest.db)
}

// -------------------------------------------------------------------

// CreateTableResponse

// optional .hybridse.common.Status status = 1;
inline bool CreateTableResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateTableResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateTableResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hybridse::common::Status& CreateTableResponse::_internal_status() const {
  return *status_;
}
inline const ::hybridse::common::Status& CreateTableResponse::status() const {
  const ::hybridse::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:hybridse.tablet.CreateTableResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::common::Status*>(
      &::hybridse::common::_Status_default_instance_);
}
inline ::hybridse::common::Status* CreateTableResponse::release_status() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.CreateTableResponse.status)
  clear_has_status();
  ::hybridse::common::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::hybridse::common::Status* CreateTableResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.CreateTableResponse.status)
  return status_;
}
inline void CreateTableResponse::set_allocated_status(::hybridse::common::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.CreateTableResponse.status)
}

// -------------------------------------------------------------------

// InsertRequest

// optional string db = 1;
inline bool InsertRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsertRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsertRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InsertRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& InsertRequest::db() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.InsertRequest.db)
  return db_.GetNoArena();
}
inline void InsertRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.InsertRequest.db)
}
#if LANG_CXX11
inline void InsertRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.InsertRequest.db)
}
#endif
inline void InsertRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.InsertRequest.db)
}
inline void InsertRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.InsertRequest.db)
}
inline ::std::string* InsertRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.InsertRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertRequest::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.InsertRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.InsertRequest.db)
}

// optional string table = 2;
inline bool InsertRequest::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InsertRequest::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InsertRequest::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InsertRequest::clear_table() {
  table_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table();
}
inline const ::std::string& InsertRequest::table() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.InsertRequest.table)
  return table_.GetNoArena();
}
inline void InsertRequest::set_table(const ::std::string& value) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.InsertRequest.table)
}
#if LANG_CXX11
inline void InsertRequest::set_table(::std::string&& value) {
  set_has_table();
  table_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.InsertRequest.table)
}
#endif
inline void InsertRequest::set_table(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.InsertRequest.table)
}
inline void InsertRequest::set_table(const char* value, size_t size) {
  set_has_table();
  table_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.InsertRequest.table)
}
inline ::std::string* InsertRequest::mutable_table() {
  set_has_table();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.InsertRequest.table)
  return table_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertRequest::release_table() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.InsertRequest.table)
  if (!has_table()) {
    return NULL;
  }
  clear_has_table();
  return table_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_table(::std::string* table) {
  if (table != NULL) {
    set_has_table();
  } else {
    clear_has_table();
  }
  table_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.InsertRequest.table)
}

// optional bytes row = 3;
inline bool InsertRequest::has_row() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InsertRequest::set_has_row() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InsertRequest::clear_has_row() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InsertRequest::clear_row() {
  row_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_row();
}
inline const ::std::string& InsertRequest::row() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.InsertRequest.row)
  return row_.GetNoArena();
}
inline void InsertRequest::set_row(const ::std::string& value) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.InsertRequest.row)
}
#if LANG_CXX11
inline void InsertRequest::set_row(::std::string&& value) {
  set_has_row();
  row_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.InsertRequest.row)
}
#endif
inline void InsertRequest::set_row(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.InsertRequest.row)
}
inline void InsertRequest::set_row(const void* value, size_t size) {
  set_has_row();
  row_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.InsertRequest.row)
}
inline ::std::string* InsertRequest::mutable_row() {
  set_has_row();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.InsertRequest.row)
  return row_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertRequest::release_row() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.InsertRequest.row)
  if (!has_row()) {
    return NULL;
  }
  clear_has_row();
  return row_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_row(::std::string* row) {
  if (row != NULL) {
    set_has_row();
  } else {
    clear_has_row();
  }
  row_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), row);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.InsertRequest.row)
}

// optional string key = 4;
inline bool InsertRequest::has_key() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InsertRequest::set_has_key() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InsertRequest::clear_has_key() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InsertRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& InsertRequest::key() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.InsertRequest.key)
  return key_.GetNoArena();
}
inline void InsertRequest::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.InsertRequest.key)
}
#if LANG_CXX11
inline void InsertRequest::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.InsertRequest.key)
}
#endif
inline void InsertRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.InsertRequest.key)
}
inline void InsertRequest::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.InsertRequest.key)
}
inline ::std::string* InsertRequest::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.InsertRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* InsertRequest::release_key() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.InsertRequest.key)
  if (!has_key()) {
    return NULL;
  }
  clear_has_key();
  return key_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void InsertRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.InsertRequest.key)
}

// optional uint64 ts = 5;
inline bool InsertRequest::has_ts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InsertRequest::set_has_ts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InsertRequest::clear_has_ts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InsertRequest::clear_ts() {
  ts_ = GOOGLE_ULONGLONG(0);
  clear_has_ts();
}
inline ::google::protobuf::uint64 InsertRequest::ts() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.InsertRequest.ts)
  return ts_;
}
inline void InsertRequest::set_ts(::google::protobuf::uint64 value) {
  set_has_ts();
  ts_ = value;
  // @@protoc_insertion_point(field_set:hybridse.tablet.InsertRequest.ts)
}

// -------------------------------------------------------------------

// ExplainRequest

// optional string db = 1;
inline bool ExplainRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExplainRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExplainRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExplainRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& ExplainRequest::db() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainRequest.db)
  return db_.GetNoArena();
}
inline void ExplainRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.ExplainRequest.db)
}
#if LANG_CXX11
inline void ExplainRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.ExplainRequest.db)
}
#endif
inline void ExplainRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.ExplainRequest.db)
}
inline void ExplainRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.ExplainRequest.db)
}
inline ::std::string* ExplainRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainRequest::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainRequest.db)
}

// optional string sql = 2;
inline bool ExplainRequest::has_sql() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExplainRequest::set_has_sql() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExplainRequest::clear_has_sql() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExplainRequest::clear_sql() {
  sql_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_sql();
}
inline const ::std::string& ExplainRequest::sql() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainRequest.sql)
  return sql_.GetNoArena();
}
inline void ExplainRequest::set_sql(const ::std::string& value) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.ExplainRequest.sql)
}
#if LANG_CXX11
inline void ExplainRequest::set_sql(::std::string&& value) {
  set_has_sql();
  sql_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.ExplainRequest.sql)
}
#endif
inline void ExplainRequest::set_sql(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.ExplainRequest.sql)
}
inline void ExplainRequest::set_sql(const char* value, size_t size) {
  set_has_sql();
  sql_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.ExplainRequest.sql)
}
inline ::std::string* ExplainRequest::mutable_sql() {
  set_has_sql();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainRequest.sql)
  return sql_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainRequest::release_sql() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainRequest.sql)
  if (!has_sql()) {
    return NULL;
  }
  clear_has_sql();
  return sql_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainRequest::set_allocated_sql(::std::string* sql) {
  if (sql != NULL) {
    set_has_sql();
  } else {
    clear_has_sql();
  }
  sql_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sql);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainRequest.sql)
}

// repeated .hybridse.type.ColumnDef parameter_schema = 3;
inline int ExplainRequest::parameter_schema_size() const {
  return parameter_schema_.size();
}
inline ::hybridse::type::ColumnDef* ExplainRequest::mutable_parameter_schema(int index) {
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainRequest.parameter_schema)
  return parameter_schema_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >*
ExplainRequest::mutable_parameter_schema() {
  // @@protoc_insertion_point(field_mutable_list:hybridse.tablet.ExplainRequest.parameter_schema)
  return &parameter_schema_;
}
inline const ::hybridse::type::ColumnDef& ExplainRequest::parameter_schema(int index) const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainRequest.parameter_schema)
  return parameter_schema_.Get(index);
}
inline ::hybridse::type::ColumnDef* ExplainRequest::add_parameter_schema() {
  // @@protoc_insertion_point(field_add:hybridse.tablet.ExplainRequest.parameter_schema)
  return parameter_schema_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::hybridse::type::ColumnDef >&
ExplainRequest::parameter_schema() const {
  // @@protoc_insertion_point(field_list:hybridse.tablet.ExplainRequest.parameter_schema)
  return parameter_schema_;
}

// -------------------------------------------------------------------

// ExplainResponse

// optional bytes input_schema = 1;
inline bool ExplainResponse::has_input_schema() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ExplainResponse::set_has_input_schema() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ExplainResponse::clear_has_input_schema() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ExplainResponse::clear_input_schema() {
  input_schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_input_schema();
}
inline const ::std::string& ExplainResponse::input_schema() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainResponse.input_schema)
  return input_schema_.GetNoArena();
}
inline void ExplainResponse::set_input_schema(const ::std::string& value) {
  set_has_input_schema();
  input_schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.ExplainResponse.input_schema)
}
#if LANG_CXX11
inline void ExplainResponse::set_input_schema(::std::string&& value) {
  set_has_input_schema();
  input_schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.ExplainResponse.input_schema)
}
#endif
inline void ExplainResponse::set_input_schema(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_input_schema();
  input_schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.ExplainResponse.input_schema)
}
inline void ExplainResponse::set_input_schema(const void* value, size_t size) {
  set_has_input_schema();
  input_schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.ExplainResponse.input_schema)
}
inline ::std::string* ExplainResponse::mutable_input_schema() {
  set_has_input_schema();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainResponse.input_schema)
  return input_schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainResponse::release_input_schema() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainResponse.input_schema)
  if (!has_input_schema()) {
    return NULL;
  }
  clear_has_input_schema();
  return input_schema_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainResponse::set_allocated_input_schema(::std::string* input_schema) {
  if (input_schema != NULL) {
    set_has_input_schema();
  } else {
    clear_has_input_schema();
  }
  input_schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_schema);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainResponse.input_schema)
}

// optional .hybridse.common.Status status = 2;
inline bool ExplainResponse::has_status() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ExplainResponse::set_has_status() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ExplainResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::hybridse::common::Status& ExplainResponse::_internal_status() const {
  return *status_;
}
inline const ::hybridse::common::Status& ExplainResponse::status() const {
  const ::hybridse::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::common::Status*>(
      &::hybridse::common::_Status_default_instance_);
}
inline ::hybridse::common::Status* ExplainResponse::release_status() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainResponse.status)
  clear_has_status();
  ::hybridse::common::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::hybridse::common::Status* ExplainResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainResponse.status)
  return status_;
}
inline void ExplainResponse::set_allocated_status(::hybridse::common::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainResponse.status)
}

// optional string logical_plan = 3;
inline bool ExplainResponse::has_logical_plan() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ExplainResponse::set_has_logical_plan() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ExplainResponse::clear_has_logical_plan() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ExplainResponse::clear_logical_plan() {
  logical_plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_logical_plan();
}
inline const ::std::string& ExplainResponse::logical_plan() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainResponse.logical_plan)
  return logical_plan_.GetNoArena();
}
inline void ExplainResponse::set_logical_plan(const ::std::string& value) {
  set_has_logical_plan();
  logical_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.ExplainResponse.logical_plan)
}
#if LANG_CXX11
inline void ExplainResponse::set_logical_plan(::std::string&& value) {
  set_has_logical_plan();
  logical_plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.ExplainResponse.logical_plan)
}
#endif
inline void ExplainResponse::set_logical_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_logical_plan();
  logical_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.ExplainResponse.logical_plan)
}
inline void ExplainResponse::set_logical_plan(const char* value, size_t size) {
  set_has_logical_plan();
  logical_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.ExplainResponse.logical_plan)
}
inline ::std::string* ExplainResponse::mutable_logical_plan() {
  set_has_logical_plan();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainResponse.logical_plan)
  return logical_plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainResponse::release_logical_plan() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainResponse.logical_plan)
  if (!has_logical_plan()) {
    return NULL;
  }
  clear_has_logical_plan();
  return logical_plan_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainResponse::set_allocated_logical_plan(::std::string* logical_plan) {
  if (logical_plan != NULL) {
    set_has_logical_plan();
  } else {
    clear_has_logical_plan();
  }
  logical_plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), logical_plan);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainResponse.logical_plan)
}

// optional string physical_plan = 4;
inline bool ExplainResponse::has_physical_plan() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ExplainResponse::set_has_physical_plan() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ExplainResponse::clear_has_physical_plan() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ExplainResponse::clear_physical_plan() {
  physical_plan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_physical_plan();
}
inline const ::std::string& ExplainResponse::physical_plan() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainResponse.physical_plan)
  return physical_plan_.GetNoArena();
}
inline void ExplainResponse::set_physical_plan(const ::std::string& value) {
  set_has_physical_plan();
  physical_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.ExplainResponse.physical_plan)
}
#if LANG_CXX11
inline void ExplainResponse::set_physical_plan(::std::string&& value) {
  set_has_physical_plan();
  physical_plan_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.ExplainResponse.physical_plan)
}
#endif
inline void ExplainResponse::set_physical_plan(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_physical_plan();
  physical_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.ExplainResponse.physical_plan)
}
inline void ExplainResponse::set_physical_plan(const char* value, size_t size) {
  set_has_physical_plan();
  physical_plan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.ExplainResponse.physical_plan)
}
inline ::std::string* ExplainResponse::mutable_physical_plan() {
  set_has_physical_plan();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainResponse.physical_plan)
  return physical_plan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainResponse::release_physical_plan() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainResponse.physical_plan)
  if (!has_physical_plan()) {
    return NULL;
  }
  clear_has_physical_plan();
  return physical_plan_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainResponse::set_allocated_physical_plan(::std::string* physical_plan) {
  if (physical_plan != NULL) {
    set_has_physical_plan();
  } else {
    clear_has_physical_plan();
  }
  physical_plan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), physical_plan);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainResponse.physical_plan)
}

// optional string ir = 5;
inline bool ExplainResponse::has_ir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ExplainResponse::set_has_ir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ExplainResponse::clear_has_ir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ExplainResponse::clear_ir() {
  ir_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_ir();
}
inline const ::std::string& ExplainResponse::ir() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainResponse.ir)
  return ir_.GetNoArena();
}
inline void ExplainResponse::set_ir(const ::std::string& value) {
  set_has_ir();
  ir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.ExplainResponse.ir)
}
#if LANG_CXX11
inline void ExplainResponse::set_ir(::std::string&& value) {
  set_has_ir();
  ir_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.ExplainResponse.ir)
}
#endif
inline void ExplainResponse::set_ir(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_ir();
  ir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.ExplainResponse.ir)
}
inline void ExplainResponse::set_ir(const char* value, size_t size) {
  set_has_ir();
  ir_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.ExplainResponse.ir)
}
inline ::std::string* ExplainResponse::mutable_ir() {
  set_has_ir();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainResponse.ir)
  return ir_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainResponse::release_ir() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainResponse.ir)
  if (!has_ir()) {
    return NULL;
  }
  clear_has_ir();
  return ir_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainResponse::set_allocated_ir(::std::string* ir) {
  if (ir != NULL) {
    set_has_ir();
  } else {
    clear_has_ir();
  }
  ir_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ir);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainResponse.ir)
}

// optional bytes output_schema = 6;
inline bool ExplainResponse::has_output_schema() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ExplainResponse::set_has_output_schema() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ExplainResponse::clear_has_output_schema() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ExplainResponse::clear_output_schema() {
  output_schema_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_output_schema();
}
inline const ::std::string& ExplainResponse::output_schema() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.ExplainResponse.output_schema)
  return output_schema_.GetNoArena();
}
inline void ExplainResponse::set_output_schema(const ::std::string& value) {
  set_has_output_schema();
  output_schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.ExplainResponse.output_schema)
}
#if LANG_CXX11
inline void ExplainResponse::set_output_schema(::std::string&& value) {
  set_has_output_schema();
  output_schema_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.ExplainResponse.output_schema)
}
#endif
inline void ExplainResponse::set_output_schema(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_output_schema();
  output_schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.ExplainResponse.output_schema)
}
inline void ExplainResponse::set_output_schema(const void* value, size_t size) {
  set_has_output_schema();
  output_schema_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.ExplainResponse.output_schema)
}
inline ::std::string* ExplainResponse::mutable_output_schema() {
  set_has_output_schema();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.ExplainResponse.output_schema)
  return output_schema_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ExplainResponse::release_output_schema() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.ExplainResponse.output_schema)
  if (!has_output_schema()) {
    return NULL;
  }
  clear_has_output_schema();
  return output_schema_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ExplainResponse::set_allocated_output_schema(::std::string* output_schema) {
  if (output_schema != NULL) {
    set_has_output_schema();
  } else {
    clear_has_output_schema();
  }
  output_schema_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_schema);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.ExplainResponse.output_schema)
}

// -------------------------------------------------------------------

// InsertResponse

// optional .hybridse.common.Status status = 1;
inline bool InsertResponse::has_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InsertResponse::set_has_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InsertResponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::hybridse::common::Status& InsertResponse::_internal_status() const {
  return *status_;
}
inline const ::hybridse::common::Status& InsertResponse::status() const {
  const ::hybridse::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:hybridse.tablet.InsertResponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::common::Status*>(
      &::hybridse::common::_Status_default_instance_);
}
inline ::hybridse::common::Status* InsertResponse::release_status() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.InsertResponse.status)
  clear_has_status();
  ::hybridse::common::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::hybridse::common::Status* InsertResponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.InsertResponse.status)
  return status_;
}
inline void InsertResponse::set_allocated_status(::hybridse::common::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.InsertResponse.status)
}

// -------------------------------------------------------------------

// GetTablesSchemaRequest

// optional string db = 1;
inline bool GetTablesSchemaRequest::has_db() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTablesSchemaRequest::set_has_db() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTablesSchemaRequest::clear_has_db() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTablesSchemaRequest::clear_db() {
  db_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_db();
}
inline const ::std::string& GetTablesSchemaRequest::db() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.GetTablesSchemaRequest.db)
  return db_.GetNoArena();
}
inline void GetTablesSchemaRequest::set_db(const ::std::string& value) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.GetTablesSchemaRequest.db)
}
#if LANG_CXX11
inline void GetTablesSchemaRequest::set_db(::std::string&& value) {
  set_has_db();
  db_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.GetTablesSchemaRequest.db)
}
#endif
inline void GetTablesSchemaRequest::set_db(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.GetTablesSchemaRequest.db)
}
inline void GetTablesSchemaRequest::set_db(const char* value, size_t size) {
  set_has_db();
  db_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.GetTablesSchemaRequest.db)
}
inline ::std::string* GetTablesSchemaRequest::mutable_db() {
  set_has_db();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.GetTablesSchemaRequest.db)
  return db_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTablesSchemaRequest::release_db() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.GetTablesSchemaRequest.db)
  if (!has_db()) {
    return NULL;
  }
  clear_has_db();
  return db_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTablesSchemaRequest::set_allocated_db(::std::string* db) {
  if (db != NULL) {
    set_has_db();
  } else {
    clear_has_db();
  }
  db_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), db);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.GetTablesSchemaRequest.db)
}

// optional string name = 2;
inline bool GetTablesSchemaRequest::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTablesSchemaRequest::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTablesSchemaRequest::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetTablesSchemaRequest::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GetTablesSchemaRequest::name() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.GetTablesSchemaRequest.name)
  return name_.GetNoArena();
}
inline void GetTablesSchemaRequest::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.GetTablesSchemaRequest.name)
}
#if LANG_CXX11
inline void GetTablesSchemaRequest::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.GetTablesSchemaRequest.name)
}
#endif
inline void GetTablesSchemaRequest::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.GetTablesSchemaRequest.name)
}
inline void GetTablesSchemaRequest::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.GetTablesSchemaRequest.name)
}
inline ::std::string* GetTablesSchemaRequest::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.GetTablesSchemaRequest.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTablesSchemaRequest::release_name() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.GetTablesSchemaRequest.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTablesSchemaRequest::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.GetTablesSchemaRequest.name)
}

// -------------------------------------------------------------------

// GetTableSchemaReponse

// optional string name = 1;
inline bool GetTableSchemaReponse::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetTableSchemaReponse::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetTableSchemaReponse::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetTableSchemaReponse::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_name();
}
inline const ::std::string& GetTableSchemaReponse::name() const {
  // @@protoc_insertion_point(field_get:hybridse.tablet.GetTableSchemaReponse.name)
  return name_.GetNoArena();
}
inline void GetTableSchemaReponse::set_name(const ::std::string& value) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:hybridse.tablet.GetTableSchemaReponse.name)
}
#if LANG_CXX11
inline void GetTableSchemaReponse::set_name(::std::string&& value) {
  set_has_name();
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:hybridse.tablet.GetTableSchemaReponse.name)
}
#endif
inline void GetTableSchemaReponse::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:hybridse.tablet.GetTableSchemaReponse.name)
}
inline void GetTableSchemaReponse::set_name(const char* value, size_t size) {
  set_has_name();
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:hybridse.tablet.GetTableSchemaReponse.name)
}
inline ::std::string* GetTableSchemaReponse::mutable_name() {
  set_has_name();
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.GetTableSchemaReponse.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* GetTableSchemaReponse::release_name() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.GetTableSchemaReponse.name)
  if (!has_name()) {
    return NULL;
  }
  clear_has_name();
  return name_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void GetTableSchemaReponse::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    set_has_name();
  } else {
    clear_has_name();
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.GetTableSchemaReponse.name)
}

// optional .hybridse.type.TableDef schema = 2;
inline bool GetTableSchemaReponse::has_schema() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetTableSchemaReponse::set_has_schema() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetTableSchemaReponse::clear_has_schema() {
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::hybridse::type::TableDef& GetTableSchemaReponse::_internal_schema() const {
  return *schema_;
}
inline const ::hybridse::type::TableDef& GetTableSchemaReponse::schema() const {
  const ::hybridse::type::TableDef* p = schema_;
  // @@protoc_insertion_point(field_get:hybridse.tablet.GetTableSchemaReponse.schema)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::type::TableDef*>(
      &::hybridse::type::_TableDef_default_instance_);
}
inline ::hybridse::type::TableDef* GetTableSchemaReponse::release_schema() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.GetTableSchemaReponse.schema)
  clear_has_schema();
  ::hybridse::type::TableDef* temp = schema_;
  schema_ = NULL;
  return temp;
}
inline ::hybridse::type::TableDef* GetTableSchemaReponse::mutable_schema() {
  set_has_schema();
  if (schema_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::type::TableDef>(GetArenaNoVirtual());
    schema_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.GetTableSchemaReponse.schema)
  return schema_;
}
inline void GetTableSchemaReponse::set_allocated_schema(::hybridse::type::TableDef* schema) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(schema_);
  }
  if (schema) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      schema = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, schema, submessage_arena);
    }
    set_has_schema();
  } else {
    clear_has_schema();
  }
  schema_ = schema;
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.GetTableSchemaReponse.schema)
}

// optional .hybridse.common.Status status = 3;
inline bool GetTableSchemaReponse::has_status() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetTableSchemaReponse::set_has_status() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetTableSchemaReponse::clear_has_status() {
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::hybridse::common::Status& GetTableSchemaReponse::_internal_status() const {
  return *status_;
}
inline const ::hybridse::common::Status& GetTableSchemaReponse::status() const {
  const ::hybridse::common::Status* p = status_;
  // @@protoc_insertion_point(field_get:hybridse.tablet.GetTableSchemaReponse.status)
  return p != NULL ? *p : *reinterpret_cast<const ::hybridse::common::Status*>(
      &::hybridse::common::_Status_default_instance_);
}
inline ::hybridse::common::Status* GetTableSchemaReponse::release_status() {
  // @@protoc_insertion_point(field_release:hybridse.tablet.GetTableSchemaReponse.status)
  clear_has_status();
  ::hybridse::common::Status* temp = status_;
  status_ = NULL;
  return temp;
}
inline ::hybridse::common::Status* GetTableSchemaReponse::mutable_status() {
  set_has_status();
  if (status_ == NULL) {
    auto* p = CreateMaybeMessage<::hybridse::common::Status>(GetArenaNoVirtual());
    status_ = p;
  }
  // @@protoc_insertion_point(field_mutable:hybridse.tablet.GetTableSchemaReponse.status)
  return status_;
}
inline void GetTableSchemaReponse::set_allocated_status(::hybridse::common::Status* status) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(status_);
  }
  if (status) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      status = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, status, submessage_arena);
    }
    set_has_status();
  } else {
    clear_has_status();
  }
  status_ = status;
  // @@protoc_insertion_point(field_set_allocated:hybridse.tablet.GetTableSchemaReponse.status)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace tablet
}  // namespace hybridse

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_fe_5ftablet_2eproto
