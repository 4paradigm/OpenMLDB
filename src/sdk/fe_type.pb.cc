// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fe_type.proto

#include "fe_type.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_fe_5ftype_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5ftype_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_ColumnDef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5ftype_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_IndexDef;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_fe_5ftype_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_TableDef;
}  // namespace protobuf_fe_5ftype_2eproto
namespace hybridse {
namespace type {
class ColumnDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ColumnDef>
      _instance;
} _ColumnDef_default_instance_;
class IndexDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<IndexDef>
      _instance;
} _IndexDef_default_instance_;
class UserDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<User>
      _instance;
} _User_default_instance_;
class GroupDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Group>
      _instance;
} _Group_default_instance_;
class CataLogDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CataLog>
      _instance;
} _CataLog_default_instance_;
class TableDefDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<TableDef>
      _instance;
} _TableDef_default_instance_;
class DatabaseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Database>
      _instance;
} _Database_default_instance_;
}  // namespace type
}  // namespace hybridse
namespace protobuf_fe_5ftype_2eproto {
static void InitDefaultsColumnDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::type::_ColumnDef_default_instance_;
    new (ptr) ::hybridse::type::ColumnDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::type::ColumnDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_ColumnDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsColumnDef}, {}};

static void InitDefaultsIndexDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::type::_IndexDef_default_instance_;
    new (ptr) ::hybridse::type::IndexDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::type::IndexDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_IndexDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsIndexDef}, {}};

static void InitDefaultsUser() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::type::_User_default_instance_;
    new (ptr) ::hybridse::type::User();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::type::User::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_User =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUser}, {}};

static void InitDefaultsGroup() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::type::_Group_default_instance_;
    new (ptr) ::hybridse::type::Group();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::type::Group::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_Group =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGroup}, {}};

static void InitDefaultsCataLog() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::type::_CataLog_default_instance_;
    new (ptr) ::hybridse::type::CataLog();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::type::CataLog::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CataLog =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCataLog}, {}};

static void InitDefaultsTableDef() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::type::_TableDef_default_instance_;
    new (ptr) ::hybridse::type::TableDef();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::type::TableDef::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<2> scc_info_TableDef =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 2, InitDefaultsTableDef}, {
      &protobuf_fe_5ftype_2eproto::scc_info_ColumnDef.base,
      &protobuf_fe_5ftype_2eproto::scc_info_IndexDef.base,}};

static void InitDefaultsDatabase() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::hybridse::type::_Database_default_instance_;
    new (ptr) ::hybridse::type::Database();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::hybridse::type::Database::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_Database =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsDatabase}, {
      &protobuf_fe_5ftype_2eproto::scc_info_TableDef.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ColumnDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_IndexDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_User.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Group.base);
  ::google::protobuf::internal::InitSCC(&scc_info_CataLog.base);
  ::google::protobuf::internal::InitSCC(&scc_info_TableDef.base);
  ::google::protobuf::internal::InitSCC(&scc_info_Database.base);
}

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::ColumnDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::ColumnDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::ColumnDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::ColumnDef, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::ColumnDef, offset_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::ColumnDef, is_not_null_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::ColumnDef, is_constant_),
  0,
  1,
  2,
  3,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, first_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, second_key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, partion_keys_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, ttl_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, ttl_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::IndexDef, ts_offset_),
  0,
  ~0u,
  1,
  ~0u,
  ~0u,
  3,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::User, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::User, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::User, token_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::User, id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::User, ctime_),
  0,
  1,
  2,
  3,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Group, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Group, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Group, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Group, ctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Group, owner_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::CataLog, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::CataLog, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::CataLog, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::CataLog, ctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::CataLog, utime_),
  0,
  1,
  2,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, columns_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, catalog_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, ctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, utime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, indexes_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::TableDef, partitions_),
  ~0u,
  0,
  1,
  2,
  3,
  ~0u,
  4,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Database, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Database, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Database, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Database, ctime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Database, utime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::hybridse::type::Database, tables_),
  0,
  1,
  2,
  ~0u,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, sizeof(::hybridse::type::ColumnDef)},
  { 15, 27, sizeof(::hybridse::type::IndexDef)},
  { 34, 43, sizeof(::hybridse::type::User)},
  { 47, 55, sizeof(::hybridse::type::Group)},
  { 58, 66, sizeof(::hybridse::type::CataLog)},
  { 69, 81, sizeof(::hybridse::type::TableDef)},
  { 88, 97, sizeof(::hybridse::type::Database)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::type::_ColumnDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::type::_IndexDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::type::_User_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::type::_Group_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::type::_CataLog_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::type::_TableDef_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::hybridse::type::_Database_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "fe_type.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\rfe_type.proto\022\rhybridse.type\"}\n\tColumn"
      "Def\022\014\n\004name\030\001 \001(\t\022!\n\004type\030\002 \001(\0162\023.hybrid"
      "se.type.Type\022\016\n\006offset\030\003 \001(\r\022\023\n\013is_not_n"
      "ull\030\004 \001(\010\022\032\n\013is_constant\030\005 \001(\010:\005false\"\240\001"
      "\n\010IndexDef\022\014\n\004name\030\001 \001(\t\022\022\n\nfirst_keys\030\002"
      " \003(\t\022\022\n\nsecond_key\030\003 \001(\t\022\024\n\014partion_keys"
      "\030\004 \003(\t\022\013\n\003ttl\030\005 \003(\004\022(\n\010ttl_type\030\006 \001(\0162\026."
      "hybridse.type.TTLType\022\021\n\tts_offset\030\007 \001(\r"
      "\">\n\004User\022\014\n\004name\030\001 \001(\t\022\r\n\005token\030\002 \001(\t\022\n\n"
      "\002id\030\003 \001(\004\022\r\n\005ctime\030\004 \001(\004\"3\n\005Group\022\014\n\004nam"
      "e\030\001 \001(\t\022\r\n\005ctime\030\003 \001(\004\022\r\n\005owner\030\004 \001(\004\"5\n"
      "\007CataLog\022\014\n\004name\030\001 \001(\t\022\r\n\005ctime\030\003 \001(\004\022\r\n"
      "\005utime\030\005 \001(\004\"\263\001\n\010TableDef\022)\n\007columns\030\001 \003"
      "(\0132\030.hybridse.type.ColumnDef\022\014\n\004name\030\002 \001"
      "(\t\022\017\n\007catalog\030\004 \001(\t\022\r\n\005ctime\030\005 \001(\004\022\r\n\005ut"
      "ime\030\006 \001(\004\022(\n\007indexes\030\007 \003(\0132\027.hybridse.ty"
      "pe.IndexDef\022\025\n\npartitions\030\010 \001(\r:\0011\"_\n\010Da"
      "tabase\022\014\n\004name\030\001 \001(\t\022\r\n\005ctime\030\002 \001(\004\022\r\n\005u"
      "time\030\003 \001(\004\022\'\n\006tables\030\004 \003(\0132\027.hybridse.ty"
      "pe.TableDef*\215\001\n\004Type\022\t\n\005kBool\020\000\022\n\n\006kInt1"
      "6\020\001\022\n\n\006kInt32\020\003\022\n\n\006kInt64\020\005\022\n\n\006kFloat\020\007\022"
      "\013\n\007kDouble\020\010\022\014\n\010kVarchar\020\t\022\t\n\005kDate\020\n\022\016\n"
      "\nkTimestamp\020\013\022\t\n\005kBlob\020\014\022\t\n\005kNull\020e*w\n\007T"
      "TLType\022\020\n\014kTTLTimeLive\020\001\022\021\n\rkTTLCountLiv"
      "e\020\002\022\034\n\030kTTLTimeLiveAndCountLive\020\003\022\033\n\027kTT"
      "LTimeLiveOrCountLive\020\004\022\014\n\010kTTLNone\020\005B1\n\034"
      "com._4paradigm.hybridse.typeB\016TypeOuterC"
      "lass\200\001\000"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1087);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "fe_type.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_fe_5ftype_2eproto
namespace hybridse {
namespace type {
const ::google::protobuf::EnumDescriptor* Type_descriptor() {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fe_5ftype_2eproto::file_level_enum_descriptors[0];
}
bool Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 3:
    case 5:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 101:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* TTLType_descriptor() {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_fe_5ftype_2eproto::file_level_enum_descriptors[1];
}
bool TTLType_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void ColumnDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ColumnDef::kNameFieldNumber;
const int ColumnDef::kTypeFieldNumber;
const int ColumnDef::kOffsetFieldNumber;
const int ColumnDef::kIsNotNullFieldNumber;
const int ColumnDef::kIsConstantFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ColumnDef::ColumnDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fe_5ftype_2eproto::scc_info_ColumnDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.type.ColumnDef)
}
ColumnDef::ColumnDef(const ColumnDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&type_, &from.type_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_constant_) -
    reinterpret_cast<char*>(&type_)) + sizeof(is_constant_));
  // @@protoc_insertion_point(copy_constructor:hybridse.type.ColumnDef)
}

void ColumnDef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_constant_) -
      reinterpret_cast<char*>(&type_)) + sizeof(is_constant_));
}

ColumnDef::~ColumnDef() {
  // @@protoc_insertion_point(destructor:hybridse.type.ColumnDef)
  SharedDtor();
}

void ColumnDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ColumnDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ColumnDef::descriptor() {
  ::protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ColumnDef& ColumnDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fe_5ftype_2eproto::scc_info_ColumnDef.base);
  return *internal_default_instance();
}


void ColumnDef::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.type.ColumnDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 30u) {
    ::memset(&type_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&is_constant_) -
        reinterpret_cast<char*>(&type_)) + sizeof(is_constant_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool ColumnDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.type.ColumnDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.ColumnDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hybridse.type.Type type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hybridse::type::Type_IsValid(value)) {
            set_type(static_cast< ::hybridse::type::Type >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                2, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 offset = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_not_null = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_is_not_null();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_not_null_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bool is_constant = 5 [default = false];
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_is_constant();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_constant_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.type.ColumnDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.type.ColumnDef)
  return false;
#undef DO_
}

void ColumnDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.type.ColumnDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.ColumnDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional .hybridse.type.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // optional uint32 offset = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->offset(), output);
  }

  // optional bool is_not_null = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_not_null(), output);
  }

  // optional bool is_constant = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_constant(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.type.ColumnDef)
}

::google::protobuf::uint8* ColumnDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.type.ColumnDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.ColumnDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional .hybridse.type.Type type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->type(), target);
  }

  // optional uint32 offset = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->offset(), target);
  }

  // optional bool is_not_null = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->is_not_null(), target);
  }

  // optional bool is_constant = 5 [default = false];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_constant(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.type.ColumnDef)
  return target;
}

size_t ColumnDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.type.ColumnDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .hybridse.type.Type type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->offset());
    }

    // optional bool is_not_null = 4;
    if (has_is_not_null()) {
      total_size += 1 + 1;
    }

    // optional bool is_constant = 5 [default = false];
    if (has_is_constant()) {
      total_size += 1 + 1;
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ColumnDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.type.ColumnDef)
  GOOGLE_DCHECK_NE(&from, this);
  const ColumnDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ColumnDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.type.ColumnDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.type.ColumnDef)
    MergeFrom(*source);
  }
}

void ColumnDef::MergeFrom(const ColumnDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.type.ColumnDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000004u) {
      offset_ = from.offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      is_not_null_ = from.is_not_null_;
    }
    if (cached_has_bits & 0x00000010u) {
      is_constant_ = from.is_constant_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ColumnDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.type.ColumnDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnDef::CopyFrom(const ColumnDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.type.ColumnDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnDef::IsInitialized() const {
  return true;
}

void ColumnDef::Swap(ColumnDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ColumnDef::InternalSwap(ColumnDef* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(type_, other->type_);
  swap(offset_, other->offset_);
  swap(is_not_null_, other->is_not_null_);
  swap(is_constant_, other->is_constant_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ColumnDef::GetMetadata() const {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void IndexDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IndexDef::kNameFieldNumber;
const int IndexDef::kFirstKeysFieldNumber;
const int IndexDef::kSecondKeyFieldNumber;
const int IndexDef::kPartionKeysFieldNumber;
const int IndexDef::kTtlFieldNumber;
const int IndexDef::kTtlTypeFieldNumber;
const int IndexDef::kTsOffsetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IndexDef::IndexDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fe_5ftype_2eproto::scc_info_IndexDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.type.IndexDef)
}
IndexDef::IndexDef(const IndexDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      first_keys_(from.first_keys_),
      partion_keys_(from.partion_keys_),
      ttl_(from.ttl_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  second_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_second_key()) {
    second_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_key_);
  }
  ::memcpy(&ts_offset_, &from.ts_offset_,
    static_cast<size_t>(reinterpret_cast<char*>(&ttl_type_) -
    reinterpret_cast<char*>(&ts_offset_)) + sizeof(ttl_type_));
  // @@protoc_insertion_point(copy_constructor:hybridse.type.IndexDef)
}

void IndexDef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ts_offset_ = 0u;
  ttl_type_ = 1;
}

IndexDef::~IndexDef() {
  // @@protoc_insertion_point(destructor:hybridse.type.IndexDef)
  SharedDtor();
}

void IndexDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  second_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void IndexDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* IndexDef::descriptor() {
  ::protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const IndexDef& IndexDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fe_5ftype_2eproto::scc_info_IndexDef.base);
  return *internal_default_instance();
}


void IndexDef::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.type.IndexDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  first_keys_.Clear();
  partion_keys_.Clear();
  ttl_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      second_key_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ts_offset_ = 0u;
    ttl_type_ = 1;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool IndexDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.type.IndexDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.IndexDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string first_keys = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_first_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->first_keys(this->first_keys_size() - 1).data(),
            static_cast<int>(this->first_keys(this->first_keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.IndexDef.first_keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string second_key = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_second_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->second_key().data(), static_cast<int>(this->second_key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.IndexDef.second_key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string partion_keys = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_partion_keys()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->partion_keys(this->partion_keys_size() - 1).data(),
            static_cast<int>(this->partion_keys(this->partion_keys_size() - 1).length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.IndexDef.partion_keys");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 ttl = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 1, 40u, input, this->mutable_ttl())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_ttl())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .hybridse.type.TTLType ttl_type = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::hybridse::type::TTLType_IsValid(value)) {
            set_ttl_type(static_cast< ::hybridse::type::TTLType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(
                6, static_cast< ::google::protobuf::uint64>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 ts_offset = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          set_has_ts_offset();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &ts_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.type.IndexDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.type.IndexDef)
  return false;
#undef DO_
}

void IndexDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.type.IndexDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // repeated string first_keys = 2;
  for (int i = 0, n = this->first_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_keys(i).data(), static_cast<int>(this->first_keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.first_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->first_keys(i), output);
  }

  // optional string second_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_key().data(), static_cast<int>(this->second_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.second_key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->second_key(), output);
  }

  // repeated string partion_keys = 4;
  for (int i = 0, n = this->partion_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partion_keys(i).data(), static_cast<int>(this->partion_keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.partion_keys");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->partion_keys(i), output);
  }

  // repeated uint64 ttl = 5;
  for (int i = 0, n = this->ttl_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(
      5, this->ttl(i), output);
  }

  // optional .hybridse.type.TTLType ttl_type = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->ttl_type(), output);
  }

  // optional uint32 ts_offset = 7;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->ts_offset(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.type.IndexDef)
}

::google::protobuf::uint8* IndexDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.type.IndexDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated string first_keys = 2;
  for (int i = 0, n = this->first_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->first_keys(i).data(), static_cast<int>(this->first_keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.first_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->first_keys(i), target);
  }

  // optional string second_key = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->second_key().data(), static_cast<int>(this->second_key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.second_key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->second_key(), target);
  }

  // repeated string partion_keys = 4;
  for (int i = 0, n = this->partion_keys_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->partion_keys(i).data(), static_cast<int>(this->partion_keys(i).length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.IndexDef.partion_keys");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->partion_keys(i), target);
  }

  // repeated uint64 ttl = 5;
  target = ::google::protobuf::internal::WireFormatLite::
    WriteUInt64ToArray(5, this->ttl_, target);

  // optional .hybridse.type.TTLType ttl_type = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      6, this->ttl_type(), target);
  }

  // optional uint32 ts_offset = 7;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->ts_offset(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.type.IndexDef)
  return target;
}

size_t IndexDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.type.IndexDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated string first_keys = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->first_keys_size());
  for (int i = 0, n = this->first_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->first_keys(i));
  }

  // repeated string partion_keys = 4;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->partion_keys_size());
  for (int i = 0, n = this->partion_keys_size(); i < n; i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->partion_keys(i));
  }

  // repeated uint64 ttl = 5;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt64Size(this->ttl_);
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->ttl_size());
    total_size += data_size;
  }

  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string second_key = 3;
    if (has_second_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->second_key());
    }

    // optional uint32 ts_offset = 7;
    if (has_ts_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->ts_offset());
    }

    // optional .hybridse.type.TTLType ttl_type = 6;
    if (has_ttl_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->ttl_type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IndexDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.type.IndexDef)
  GOOGLE_DCHECK_NE(&from, this);
  const IndexDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const IndexDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.type.IndexDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.type.IndexDef)
    MergeFrom(*source);
  }
}

void IndexDef::MergeFrom(const IndexDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.type.IndexDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  first_keys_.MergeFrom(from.first_keys_);
  partion_keys_.MergeFrom(from.partion_keys_);
  ttl_.MergeFrom(from.ttl_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_second_key();
      second_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.second_key_);
    }
    if (cached_has_bits & 0x00000004u) {
      ts_offset_ = from.ts_offset_;
    }
    if (cached_has_bits & 0x00000008u) {
      ttl_type_ = from.ttl_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void IndexDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.type.IndexDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IndexDef::CopyFrom(const IndexDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.type.IndexDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndexDef::IsInitialized() const {
  return true;
}

void IndexDef::Swap(IndexDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IndexDef::InternalSwap(IndexDef* other) {
  using std::swap;
  first_keys_.InternalSwap(CastToBase(&other->first_keys_));
  partion_keys_.InternalSwap(CastToBase(&other->partion_keys_));
  ttl_.InternalSwap(&other->ttl_);
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  second_key_.Swap(&other->second_key_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ts_offset_, other->ts_offset_);
  swap(ttl_type_, other->ttl_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata IndexDef::GetMetadata() const {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void User::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kNameFieldNumber;
const int User::kTokenFieldNumber;
const int User::kIdFieldNumber;
const int User::kCtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fe_5ftype_2eproto::scc_info_User.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.type.User)
}
User::User(const User& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_token()) {
    token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&ctime_) -
    reinterpret_cast<char*>(&id_)) + sizeof(ctime_));
  // @@protoc_insertion_point(copy_constructor:hybridse.type.User)
}

void User::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ctime_) -
      reinterpret_cast<char*>(&id_)) + sizeof(ctime_));
}

User::~User() {
  // @@protoc_insertion_point(destructor:hybridse.type.User)
  SharedDtor();
}

void User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  token_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* User::descriptor() {
  ::protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const User& User::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fe_5ftype_2eproto::scc_info_User.base);
  return *internal_default_instance();
}


void User::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.type.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      token_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 12u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&ctime_) -
        reinterpret_cast<char*>(&id_)) + sizeof(ctime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.type.User)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.User.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string token = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_token()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->token().data(), static_cast<int>(this->token().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.User.token");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ctime = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_ctime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.type.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.type.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.type.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.User.token");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->token(), output);
  }

  // optional uint64 id = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->id(), output);
  }

  // optional uint64 ctime = 4;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->ctime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.type.User)
}

::google::protobuf::uint8* User::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.type.User)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.User.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string token = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->token().data(), static_cast<int>(this->token().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.User.token");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->token(), target);
  }

  // optional uint64 id = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->id(), target);
  }

  // optional uint64 ctime = 4;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->ctime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.type.User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.type.User)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->token());
    }

    // optional uint64 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->id());
    }

    // optional uint64 ctime = 4;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void User::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.type.User)
  GOOGLE_DCHECK_NE(&from, this);
  const User* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const User>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.type.User)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.type.User)
    MergeFrom(*source);
  }
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.type.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 15u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_token();
      token_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.token_);
    }
    if (cached_has_bits & 0x00000004u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000008u) {
      ctime_ = from.ctime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void User::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.type.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.type.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  token_.Swap(&other->token_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(id_, other->id_);
  swap(ctime_, other->ctime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata User::GetMetadata() const {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Group::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Group::kNameFieldNumber;
const int Group::kCtimeFieldNumber;
const int Group::kOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Group::Group()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fe_5ftype_2eproto::scc_info_Group.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.type.Group)
}
Group::Group(const Group& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&ctime_, &from.ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&owner_) -
    reinterpret_cast<char*>(&ctime_)) + sizeof(owner_));
  // @@protoc_insertion_point(copy_constructor:hybridse.type.Group)
}

void Group::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&owner_) -
      reinterpret_cast<char*>(&ctime_)) + sizeof(owner_));
}

Group::~Group() {
  // @@protoc_insertion_point(destructor:hybridse.type.Group)
  SharedDtor();
}

void Group::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Group::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Group::descriptor() {
  ::protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Group& Group::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fe_5ftype_2eproto::scc_info_Group.base);
  return *internal_default_instance();
}


void Group::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.type.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ctime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&owner_) -
        reinterpret_cast<char*>(&ctime_)) + sizeof(owner_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Group::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.type.Group)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.Group.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ctime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ctime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 owner = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_owner();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &owner_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.type.Group)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.type.Group)
  return false;
#undef DO_
}

void Group::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.type.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.Group.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 ctime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ctime(), output);
  }

  // optional uint64 owner = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.type.Group)
}

::google::protobuf::uint8* Group::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.type.Group)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.Group.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 ctime = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ctime(), target);
  }

  // optional uint64 owner = 4;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.type.Group)
  return target;
}

size_t Group::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.type.Group)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 ctime = 3;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }

    // optional uint64 owner = 4;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->owner());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Group::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.type.Group)
  GOOGLE_DCHECK_NE(&from, this);
  const Group* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Group>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.type.Group)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.type.Group)
    MergeFrom(*source);
  }
}

void Group::MergeFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.type.Group)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      ctime_ = from.ctime_;
    }
    if (cached_has_bits & 0x00000004u) {
      owner_ = from.owner_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Group::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.type.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Group::CopyFrom(const Group& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.type.Group)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Group::IsInitialized() const {
  return true;
}

void Group::Swap(Group* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Group::InternalSwap(Group* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctime_, other->ctime_);
  swap(owner_, other->owner_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Group::GetMetadata() const {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void CataLog::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CataLog::kNameFieldNumber;
const int CataLog::kCtimeFieldNumber;
const int CataLog::kUtimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CataLog::CataLog()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fe_5ftype_2eproto::scc_info_CataLog.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.type.CataLog)
}
CataLog::CataLog(const CataLog& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&ctime_, &from.ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&utime_) -
    reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
  // @@protoc_insertion_point(copy_constructor:hybridse.type.CataLog)
}

void CataLog::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utime_) -
      reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
}

CataLog::~CataLog() {
  // @@protoc_insertion_point(destructor:hybridse.type.CataLog)
  SharedDtor();
}

void CataLog::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CataLog::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* CataLog::descriptor() {
  ::protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const CataLog& CataLog::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fe_5ftype_2eproto::scc_info_CataLog.base);
  return *internal_default_instance();
}


void CataLog::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.type.CataLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ctime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utime_) -
        reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CataLog::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.type.CataLog)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.CataLog.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ctime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_ctime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 utime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_utime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.type.CataLog)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.type.CataLog)
  return false;
#undef DO_
}

void CataLog::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.type.CataLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.CataLog.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 ctime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->ctime(), output);
  }

  // optional uint64 utime = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utime(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.type.CataLog)
}

::google::protobuf::uint8* CataLog::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.type.CataLog)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.CataLog.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 ctime = 3;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->ctime(), target);
  }

  // optional uint64 utime = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utime(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.type.CataLog)
  return target;
}

size_t CataLog::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.type.CataLog)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 ctime = 3;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }

    // optional uint64 utime = 5;
    if (has_utime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CataLog::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.type.CataLog)
  GOOGLE_DCHECK_NE(&from, this);
  const CataLog* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const CataLog>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.type.CataLog)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.type.CataLog)
    MergeFrom(*source);
  }
}

void CataLog::MergeFrom(const CataLog& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.type.CataLog)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      ctime_ = from.ctime_;
    }
    if (cached_has_bits & 0x00000004u) {
      utime_ = from.utime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CataLog::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.type.CataLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CataLog::CopyFrom(const CataLog& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.type.CataLog)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CataLog::IsInitialized() const {
  return true;
}

void CataLog::Swap(CataLog* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CataLog::InternalSwap(CataLog* other) {
  using std::swap;
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctime_, other->ctime_);
  swap(utime_, other->utime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata CataLog::GetMetadata() const {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void TableDef::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableDef::kColumnsFieldNumber;
const int TableDef::kNameFieldNumber;
const int TableDef::kCatalogFieldNumber;
const int TableDef::kCtimeFieldNumber;
const int TableDef::kUtimeFieldNumber;
const int TableDef::kIndexesFieldNumber;
const int TableDef::kPartitionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableDef::TableDef()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fe_5ftype_2eproto::scc_info_TableDef.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.type.TableDef)
}
TableDef::TableDef(const TableDef& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      columns_(from.columns_),
      indexes_(from.indexes_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  catalog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_catalog()) {
    catalog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_);
  }
  ::memcpy(&ctime_, &from.ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&partitions_) -
    reinterpret_cast<char*>(&ctime_)) + sizeof(partitions_));
  // @@protoc_insertion_point(copy_constructor:hybridse.type.TableDef)
}

void TableDef::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utime_) -
      reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
  partitions_ = 1u;
}

TableDef::~TableDef() {
  // @@protoc_insertion_point(destructor:hybridse.type.TableDef)
  SharedDtor();
}

void TableDef::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  catalog_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void TableDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* TableDef::descriptor() {
  ::protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const TableDef& TableDef::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fe_5ftype_2eproto::scc_info_TableDef.base);
  return *internal_default_instance();
}


void TableDef::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.type.TableDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  columns_.Clear();
  indexes_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      catalog_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 28u) {
    ::memset(&ctime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utime_) -
        reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
    partitions_ = 1u;
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool TableDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.type.TableDef)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .hybridse.type.ColumnDef columns = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_columns()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string name = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.TableDef.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string catalog = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_catalog()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->catalog().data(), static_cast<int>(this->catalog().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.TableDef.catalog");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ctime = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_ctime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 utime = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_utime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hybridse.type.IndexDef indexes = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_indexes()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint32 partitions = 8 [default = 1];
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(64u /* 64 & 0xFF */)) {
          set_has_partitions();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partitions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.type.TableDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.type.TableDef)
  return false;
#undef DO_
}

void TableDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.type.TableDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hybridse.type.ColumnDef columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1,
      this->columns(static_cast<int>(i)),
      output);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.TableDef.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string catalog = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog().data(), static_cast<int>(this->catalog().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.TableDef.catalog");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->catalog(), output);
  }

  // optional uint64 ctime = 5;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->ctime(), output);
  }

  // optional uint64 utime = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->utime(), output);
  }

  // repeated .hybridse.type.IndexDef indexes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indexes_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7,
      this->indexes(static_cast<int>(i)),
      output);
  }

  // optional uint32 partitions = 8 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->partitions(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.type.TableDef)
}

::google::protobuf::uint8* TableDef::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.type.TableDef)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .hybridse.type.ColumnDef columns = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->columns_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->columns(static_cast<int>(i)), deterministic, target);
  }

  cached_has_bits = _has_bits_[0];
  // optional string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.TableDef.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string catalog = 4;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->catalog().data(), static_cast<int>(this->catalog().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.TableDef.catalog");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->catalog(), target);
  }

  // optional uint64 ctime = 5;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->ctime(), target);
  }

  // optional uint64 utime = 6;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->utime(), target);
  }

  // repeated .hybridse.type.IndexDef indexes = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->indexes_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->indexes(static_cast<int>(i)), deterministic, target);
  }

  // optional uint32 partitions = 8 [default = 1];
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->partitions(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.type.TableDef)
  return target;
}

size_t TableDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.type.TableDef)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .hybridse.type.ColumnDef columns = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->columns_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->columns(static_cast<int>(i)));
    }
  }

  // repeated .hybridse.type.IndexDef indexes = 7;
  {
    unsigned int count = static_cast<unsigned int>(this->indexes_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->indexes(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 31u) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string catalog = 4;
    if (has_catalog()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->catalog());
    }

    // optional uint64 ctime = 5;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }

    // optional uint64 utime = 6;
    if (has_utime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utime());
    }

    // optional uint32 partitions = 8 [default = 1];
    if (has_partitions()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partitions());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TableDef::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.type.TableDef)
  GOOGLE_DCHECK_NE(&from, this);
  const TableDef* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TableDef>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.type.TableDef)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.type.TableDef)
    MergeFrom(*source);
  }
}

void TableDef::MergeFrom(const TableDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.type.TableDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  columns_.MergeFrom(from.columns_);
  indexes_.MergeFrom(from.indexes_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_catalog();
      catalog_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.catalog_);
    }
    if (cached_has_bits & 0x00000004u) {
      ctime_ = from.ctime_;
    }
    if (cached_has_bits & 0x00000008u) {
      utime_ = from.utime_;
    }
    if (cached_has_bits & 0x00000010u) {
      partitions_ = from.partitions_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TableDef::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.type.TableDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableDef::CopyFrom(const TableDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.type.TableDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableDef::IsInitialized() const {
  return true;
}

void TableDef::Swap(TableDef* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableDef::InternalSwap(TableDef* other) {
  using std::swap;
  CastToBase(&columns_)->InternalSwap(CastToBase(&other->columns_));
  CastToBase(&indexes_)->InternalSwap(CastToBase(&other->indexes_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  catalog_.Swap(&other->catalog_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctime_, other->ctime_);
  swap(utime_, other->utime_);
  swap(partitions_, other->partitions_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata TableDef::GetMetadata() const {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Database::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Database::kNameFieldNumber;
const int Database::kCtimeFieldNumber;
const int Database::kUtimeFieldNumber;
const int Database::kTablesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Database::Database()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_fe_5ftype_2eproto::scc_info_Database.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:hybridse.type.Database)
}
Database::Database(const Database& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      tables_(from.tables_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_name()) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&ctime_, &from.ctime_,
    static_cast<size_t>(reinterpret_cast<char*>(&utime_) -
    reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
  // @@protoc_insertion_point(copy_constructor:hybridse.type.Database)
}

void Database::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&ctime_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utime_) -
      reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
}

Database::~Database() {
  // @@protoc_insertion_point(destructor:hybridse.type.Database)
  SharedDtor();
}

void Database::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Database::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* Database::descriptor() {
  ::protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Database& Database::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_fe_5ftype_2eproto::scc_info_Database.base);
  return *internal_default_instance();
}


void Database::Clear() {
// @@protoc_insertion_point(message_clear_start:hybridse.type.Database)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  tables_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmptyNoArena();
  }
  if (cached_has_bits & 6u) {
    ::memset(&ctime_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utime_) -
        reinterpret_cast<char*>(&ctime_)) + sizeof(utime_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Database::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:hybridse.type.Database)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "hybridse.type.Database.name");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 ctime = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_ctime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &ctime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional uint64 utime = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_utime();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .hybridse.type.TableDef tables = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
                input, add_tables()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:hybridse.type.Database)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:hybridse.type.Database)
  return false;
#undef DO_
}

void Database::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:hybridse.type.Database)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.Database.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // optional uint64 ctime = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->ctime(), output);
  }

  // optional uint64 utime = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->utime(), output);
  }

  // repeated .hybridse.type.TableDef tables = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4,
      this->tables(static_cast<int>(i)),
      output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:hybridse.type.Database)
}

::google::protobuf::uint8* Database::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:hybridse.type.Database)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string name = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "hybridse.type.Database.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional uint64 ctime = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->ctime(), target);
  }

  // optional uint64 utime = 3;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->utime(), target);
  }

  // repeated .hybridse.type.TableDef tables = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->tables_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->tables(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:hybridse.type.Database)
  return target;
}

size_t Database::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:hybridse.type.Database)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .hybridse.type.TableDef tables = 4;
  {
    unsigned int count = static_cast<unsigned int>(this->tables_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->tables(static_cast<int>(i)));
    }
  }

  if (_has_bits_[0 / 32] & 7u) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional uint64 ctime = 2;
    if (has_ctime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->ctime());
    }

    // optional uint64 utime = 3;
    if (has_utime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utime());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Database::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:hybridse.type.Database)
  GOOGLE_DCHECK_NE(&from, this);
  const Database* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Database>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:hybridse.type.Database)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:hybridse.type.Database)
    MergeFrom(*source);
  }
}

void Database::MergeFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:hybridse.type.Database)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  tables_.MergeFrom(from.tables_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_name();
      name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
    }
    if (cached_has_bits & 0x00000002u) {
      ctime_ = from.ctime_;
    }
    if (cached_has_bits & 0x00000004u) {
      utime_ = from.utime_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Database::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:hybridse.type.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Database::CopyFrom(const Database& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:hybridse.type.Database)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Database::IsInitialized() const {
  return true;
}

void Database::Swap(Database* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Database::InternalSwap(Database* other) {
  using std::swap;
  CastToBase(&tables_)->InternalSwap(CastToBase(&other->tables_));
  name_.Swap(&other->name_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(ctime_, other->ctime_);
  swap(utime_, other->utime_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata Database::GetMetadata() const {
  protobuf_fe_5ftype_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_fe_5ftype_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace type
}  // namespace hybridse
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::type::ColumnDef* Arena::CreateMaybeMessage< ::hybridse::type::ColumnDef >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::type::ColumnDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::type::IndexDef* Arena::CreateMaybeMessage< ::hybridse::type::IndexDef >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::type::IndexDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::type::User* Arena::CreateMaybeMessage< ::hybridse::type::User >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::type::User >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::type::Group* Arena::CreateMaybeMessage< ::hybridse::type::Group >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::type::Group >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::type::CataLog* Arena::CreateMaybeMessage< ::hybridse::type::CataLog >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::type::CataLog >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::type::TableDef* Arena::CreateMaybeMessage< ::hybridse::type::TableDef >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::type::TableDef >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::hybridse::type::Database* Arena::CreateMaybeMessage< ::hybridse::type::Database >(Arena* arena) {
  return Arena::CreateInternal< ::hybridse::type::Database >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
