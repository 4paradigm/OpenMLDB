/*
 * Copyright 2021 4Paradigm
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import "fe_type.proto";
import "fe_common.proto";

package hybridse.tablet;
option cc_generic_services = true;
option java_package = "com._4paradigm.hybridse.tablet";
option java_outer_classname = "Tablet";

message QueryRequest {
    optional string sql = 1;
    optional string db = 2;
    optional bool is_batch = 3 [default = true];
    optional bytes row = 4;
    optional bool is_debug = 5 [default = true];
    optional uint32 task_id = 6 [default = 0];
}

message QueryResponse {
    optional common.Status status = 1;
    optional bytes schema = 2;
    // the record size
    optional uint32 byte_size = 3;
    optional uint32 count = 4;
}

message CreateTableRequest {
    optional type.TableDef table = 1;
    optional uint32 tid = 2;
    repeated uint32 pids = 3;
    optional string db = 4;
}

message CreateTableResponse {
    optional common.Status status = 1;
}

message InsertRequest {
    optional string db = 1;
    optional string table = 2;
    optional bytes row = 3;
    optional string key = 4;
    optional uint64 ts = 5;
}

message ExplainRequest {
    optional string db = 1;
    optional string sql = 2;
};

message ExplainResponse {
    optional bytes input_schema = 1;
    optional common.Status status = 2;
    optional string logical_plan = 3;
    optional string physical_plan = 4;
    optional string ir = 5;
    optional bytes output_schema = 6;
}

message InsertResponse {
    optional common.Status status = 1;
}

message GetTablesSchemaRequest {
    optional string db = 1;
    optional string name = 2;
}

message GetTableSchemaReponse {
    optional string name = 1;
    optional type.TableDef schema = 2;
    optional common.Status status = 3;
}

service TabletServer {
    rpc GetTableSchema (GetTablesSchemaRequest) returns (GetTableSchemaReponse);
    rpc CreateTable (CreateTableRequest) returns (CreateTableResponse);
    rpc Query (QueryRequest) returns (QueryResponse);
    rpc Insert (InsertRequest) returns (InsertResponse);
    rpc Explain(ExplainRequest) returns (ExplainResponse);
}
