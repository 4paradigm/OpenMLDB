syntax = "proto2";

import "common.proto";

package openmldb.taskmanager;

option java_package = "com._4paradigm.openmldb.proto";
option java_outer_classname = "TaskManager";
option cc_generic_services = true;

message JobInfo {
    required int32 id = 1;
    optional string job_type = 2;
    optional string state = 3;
    optional int64 start_time = 4;
    optional int64 end_time = 5;
    optional string parameter = 6;
    optional string cluster = 7;
    optional string application_id = 8;
    optional string error = 9;
    optional string tracking_url = 10;
    optional float progress = 11;
}

message ShowJobsRequest {
    optional bool unfinished = 1 [default = false];
};

message ShowJobsResponse {
    required int32 code = 1;
    optional string msg = 2;
    repeated JobInfo jobs = 3;
}

message ShowJobRequest {
    required int32 id = 1;
};

message ShowJobResponse {
    required int32 code = 1;
    optional string msg = 2;
    optional JobInfo job = 3;
};

message StopJobRequest {
    required int32 id = 1;
};

message StopJobResponse {
    required int32 code = 1;
    optional string msg = 2;
    optional JobInfo job = 3;
};

message DeleteJobRequest {
    required int32 id = 1;
};

message DeleteJobResponse {
    required int32 code = 1;
    optional string msg = 2;
};

message ShowBatchVersionRequest {
    optional bool sync_job = 1 [default = false];
};

message RunBatchSqlRequest {
    required string sql = 1;
    map<string, string> conf = 2;
    optional string default_db = 3 [default = ""];
};

message RunBatchSqlResponse {
    required int32 code = 1;
    optional string msg = 2;
    optional string output = 3;
};

message RunBatchAndShowRequest {
    required string sql = 1;
    map<string, string> conf = 2;
    optional string default_db = 3 [default = ""];
    optional bool sync_job = 4 [default = false];
};

message ImportOnlineDataRequest {
    required string sql = 1;
    map<string, string> conf = 2;
    optional string default_db = 3 [default = ""];
    optional bool sync_job = 4 [default = false];
};

message ImportOfflineDataRequest {
    required string sql = 1;
    map<string, string> conf = 2;
    optional string default_db = 3 [default = ""];
    optional bool sync_job = 4 [default = false];
};

message ExportOfflineDataRequest {
    required string sql = 1;
    map<string, string> conf = 2;
    optional string default_db = 3 [default = ""];
    optional bool sync_job = 4 [default = false];
}

message InsertOfflineDataRequest {
    required string sql = 1;
    map<string, string> conf = 2;
    optional string default_db = 3 [default = ""];
    optional bool sync_job = 4 [default = false];
}

message DropOfflineTableRequest {
    required string db = 1;
    required string table = 2;
};

message DropOfflineTableResponse {
    required int32 code = 1;
    optional string msg = 2;
};

message GetJobLogRequest {
    required int32 id = 1;
};

message GetJobLogResponse {
    required int32 code = 1;
    optional string msg = 2;
    optional string log = 3;
};

message CreateFunctionRequest {
    optional openmldb.common.ExternalFun fun = 1;
};

message CreateFunctionResponse {
    required int32 code = 1;
    optional string msg = 2;
};

message DropFunctionRequest {
    optional string name = 1;
};

message DropFunctionResponse {
    required int32 code = 1;
    optional string msg = 2;
};

message GetVersionResponse {
    required string taskmanager_version = 1;
    required string batch_version = 2;
};

message EmptyMessage {};

message SaveJobResultRequest {
    required int32 result_id = 1;
    required string json_data = 2;
}

message SaveJobResultResponse {
    required int32 code = 1;
    optional string msg = 2; 
}

service TaskManagerServer {
    // Job management
    rpc ShowJobs(ShowJobsRequest) returns (ShowJobsResponse);
    rpc ShowJob(ShowJobRequest) returns (ShowJobResponse);
    rpc StopJob(StopJobRequest) returns (StopJobResponse);
    rpc DeleteJob(DeleteJobRequest) returns (DeleteJobResponse);

    // Spark jobs
    rpc ShowBatchVersion(ShowBatchVersionRequest) returns (ShowJobResponse);
    rpc RunBatchSql(RunBatchSqlRequest) returns (RunBatchSqlResponse);
    rpc RunBatchAndShow(RunBatchAndShowRequest) returns (ShowJobResponse);
    rpc ImportOnlineData(ImportOnlineDataRequest) returns (ShowJobResponse);
    rpc ImportOfflineData(ImportOfflineDataRequest) returns (ShowJobResponse);
    rpc ExportOfflineData(ExportOfflineDataRequest) returns (ShowJobResponse);
    rpc InsertOfflineData(InsertOfflineDataRequest) returns (ShowJobResponse);
    rpc DropOfflineTable(DropOfflineTableRequest) returns (DropOfflineTableResponse);
    rpc GetJobLog(GetJobLogRequest) returns (GetJobLogResponse);
    rpc CreateFunction(CreateFunctionRequest) returns (CreateFunctionResponse);
    rpc DropFunction(DropFunctionRequest) returns (DropFunctionResponse);

    // Other APIs
    rpc GetVersion(EmptyMessage) returns (GetVersionResponse);
    rpc SaveJobResult(SaveJobResultRequest) returns (SaveJobResultResponse);
};
